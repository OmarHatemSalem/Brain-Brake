
CommunicationController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004950  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08004ae4  08004ae4  00005ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b48  08004b48  00006134  2**0
                  CONTENTS
  4 .ARM          00000000  08004b48  08004b48  00006134  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b48  08004b48  00006134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b48  08004b48  00005b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b4c  08004b4c  00005b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000134  20000000  08004b50  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006134  2**0
                  CONTENTS
 10 .bss          00000164  20000134  20000134  00006134  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000298  20000298  00006134  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006134  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ec52  00000000  00000000  00006164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023ee  00000000  00000000  00014db6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000af8  00000000  00000000  000171a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000874  00000000  00000000  00017ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020ef6  00000000  00000000  00018514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f50f  00000000  00000000  0003940a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c614e  00000000  00000000  00048919  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010ea67  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002c48  00000000  00000000  0010eaac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  001116f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000134 	.word	0x20000134
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004acc 	.word	0x08004acc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000138 	.word	0x20000138
 80001d0:	08004acc 	.word	0x08004acc

080001d4 <Com_Init>:
static Com_StatusType initStatus = COM_UNINIT;
static const uint32 endian_test  = 0xDEADBEEFu;


/* Startup and Control Services*/
void Com_Init(const Com_ConfigType *config){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b08a      	sub	sp, #40	@ 0x28
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	/* @req COM128 */ /* Com_Init shall initialize all internal data that is not yet initialized by the start-up code*/
	/* @req COM217 */ /* COM module shall initialize each I-PDU during execution of Com_Init, firstly byte wise with the ComTxIPduUnusedAreasDefault value 
	and then bit wise according to initial values (ComSignalInitValue) of the contained signals and the update-bits */
	/* @req COM772 */ /* If timeout set to 0 */

	uint8 err = 0;
 80001dc:	2300      	movs	r3, #0
 80001de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* @req COM433 */
	if(config == NULL) {
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d104      	bne.n	80001f2 <Com_Init+0x1e>
		Det_ReportError(COM_INIT_ID, COM_E_PARAM_POINTER);
 80001e8:	216c      	movs	r1, #108	@ 0x6c
 80001ea:	2001      	movs	r0, #1
 80001ec:	f000 fd11 	bl	8000c12 <Det_ReportError>
 80001f0:	e104      	b.n	80003fc <Com_Init+0x228>
		return;
	}
	uint32 firstTimeout;
	boolean dataChanged = FALSE;
 80001f2:	2300      	movs	r3, #0
 80001f4:	60bb      	str	r3, [r7, #8]
	ComConfig = config;
 80001f6:	4a83      	ldr	r2, [pc, #524]	@ (8000404 <Com_Init+0x230>)
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	6013      	str	r3, [r2, #0]
	uint8 endian_byte = *(const uint8 *)&endian_test; /* Get last byte*/
 80001fc:	4b82      	ldr	r3, [pc, #520]	@ (8000408 <Com_Init+0x234>)
 80001fe:	781b      	ldrb	r3, [r3, #0]
 8000200:	76fb      	strb	r3, [r7, #27]
	if(endian_byte == 0xEF ){ 
 8000202:	7efb      	ldrb	r3, [r7, #27]
 8000204:	2bef      	cmp	r3, #239	@ 0xef
 8000206:	d103      	bne.n	8000210 <Com_Init+0x3c>
		Com_SystemEndianness = COM_LITTLE_ENDIAN; 
 8000208:	4b80      	ldr	r3, [pc, #512]	@ (800040c <Com_Init+0x238>)
 800020a:	2201      	movs	r2, #1
 800020c:	701a      	strb	r2, [r3, #0]
 800020e:	e009      	b.n	8000224 <Com_Init+0x50>
	}
	else if(endian_byte == 0xDE){ 
 8000210:	7efb      	ldrb	r3, [r7, #27]
 8000212:	2bde      	cmp	r3, #222	@ 0xde
 8000214:	d103      	bne.n	800021e <Com_Init+0x4a>
		Com_SystemEndianness = COM_BIG_ENDIAN;
 8000216:	4b7d      	ldr	r3, [pc, #500]	@ (800040c <Com_Init+0x238>)
 8000218:	2200      	movs	r2, #0
 800021a:	701a      	strb	r2, [r3, #0]
 800021c:	e002      	b.n	8000224 <Com_Init+0x50>
	}
	else {
		Com_SystemEndianness = COM_OPAQUE; /* Check */
 800021e:	4b7b      	ldr	r3, [pc, #492]	@ (800040c <Com_Init+0x238>)
 8000220:	2202      	movs	r2, #2
 8000222:	701a      	strb	r2, [r3, #0]
	}
	const ComSignal_type *Signal;
	uint16 bufferIndex = 0, i, j;
 8000224:	2300      	movs	r3, #0
 8000226:	833b      	strh	r3, [r7, #24]
	for (i = 0; !ComConfig->ComIPdu[i].Com_EOL; i++) {
 8000228:	2300      	movs	r3, #0
 800022a:	83fb      	strh	r3, [r7, #30]
 800022c:	e0bc      	b.n	80003a8 <Com_Init+0x1d4>
	    boolean pduHasGroupSignal = FALSE;
 800022e:	2300      	movs	r3, #0
 8000230:	617b      	str	r3, [r7, #20]
		ComIPdu_type *IPdu = Com_GetIPDU(i);
 8000232:	4b74      	ldr	r3, [pc, #464]	@ (8000404 <Com_Init+0x230>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	681a      	ldr	r2, [r3, #0]
 8000238:	8bfb      	ldrh	r3, [r7, #30]
 800023a:	019b      	lsls	r3, r3, #6
 800023c:	4413      	add	r3, r2
 800023e:	613b      	str	r3, [r7, #16]

		if (ComConfig->ComNumOfIPDUs <= i) {
 8000240:	4b70      	ldr	r3, [pc, #448]	@ (8000404 <Com_Init+0x230>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	7a5b      	ldrb	r3, [r3, #9]
 8000246:	461a      	mov	r2, r3
 8000248:	8bfb      	ldrh	r3, [r7, #30]
 800024a:	4293      	cmp	r3, r2
 800024c:	d307      	bcc.n	800025e <Com_Init+0x8a>
			Det_ReportError(COM_INIT_ID ,COM_E_TOO_MANY_IPDU);
 800024e:	216a      	movs	r1, #106	@ 0x6a
 8000250:	2001      	movs	r0, #1
 8000252:	f000 fcde 	bl	8000c12 <Det_ReportError>
			err = 1;
 8000256:	2301      	movs	r3, #1
 8000258:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800025c:	e0af      	b.n	80003be <Com_Init+0x1ea>
		}
		/* Set the data pointer for this PDU */
		/* IPdu->ComIPduDataPtr = (void *)&Data_Buffer[bufferIndex];
		bufferIndex += IPdu->ComIPduSize; */
		/* If this is a TX and cyclic I-PDU, configure the first deadline. */
		if ((IPdu->ComIPduDirection == SEND) &&
 800025e:	693b      	ldr	r3, [r7, #16]
 8000260:	79db      	ldrb	r3, [r3, #7]
 8000262:	2b01      	cmp	r3, #1
 8000264:	d10b      	bne.n	800027e <Com_Init+0xaa>
				((IPdu->ComTxIPdu.ComTxModeTrue.ComTxModeMode == PERIODIC) || (IPdu->ComTxIPdu.ComTxModeTrue.ComTxModeMode == MIXED))){
 8000266:	693b      	ldr	r3, [r7, #16]
 8000268:	7c1b      	ldrb	r3, [r3, #16]
		if ((IPdu->ComIPduDirection == SEND) &&
 800026a:	2b03      	cmp	r3, #3
 800026c:	d003      	beq.n	8000276 <Com_Init+0xa2>
				((IPdu->ComTxIPdu.ComTxModeTrue.ComTxModeMode == PERIODIC) || (IPdu->ComTxIPdu.ComTxModeTrue.ComTxModeMode == MIXED))){
 800026e:	693b      	ldr	r3, [r7, #16]
 8000270:	7c1b      	ldrb	r3, [r3, #16]
 8000272:	2b01      	cmp	r3, #1
 8000274:	d103      	bne.n	800027e <Com_Init+0xaa>
			IPdu->ComTxIPdu.ComTxModeTrue.ComTxModeTimePeriod = IPdu->ComTxIPdu.ComTxModeTrue.ComTxModeTimeOffset;
 8000276:	693b      	ldr	r3, [r7, #16]
 8000278:	699a      	ldr	r2, [r3, #24]
 800027a:	693b      	ldr	r3, [r7, #16]
 800027c:	61da      	str	r2, [r3, #28]
		}

		/* Reset timeout. */
		firstTimeout = 0xFFFFFFFFu;
 800027e:	f04f 33ff 	mov.w	r3, #4294967295
 8000282:	623b      	str	r3, [r7, #32]

		/* Initialize the memory with the default value. */
		/* @req COM015 */
		if (IPdu->ComIPduDirection == SEND) {
 8000284:	693b      	ldr	r3, [r7, #16]
 8000286:	79db      	ldrb	r3, [r3, #7]
 8000288:	2b01      	cmp	r3, #1
 800028a:	d109      	bne.n	80002a0 <Com_Init+0xcc>
			memset((void *)IPdu->ComIPduDataPtr, IPdu->ComTxIPdu.ComTxIPduUnusedAreasDefault, IPdu->ComIPduSize);
 800028c:	693b      	ldr	r3, [r7, #16]
 800028e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8000290:	693b      	ldr	r3, [r7, #16]
 8000292:	7b1b      	ldrb	r3, [r3, #12]
 8000294:	4619      	mov	r1, r3
 8000296:	693b      	ldr	r3, [r7, #16]
 8000298:	799b      	ldrb	r3, [r3, #6]
 800029a:	461a      	mov	r2, r3
 800029c:	f004 fbdb 	bl	8004a56 <memset>
		}

		/* For each signal in this PDU. */
		for (j = 0; (IPdu->ComIPduSignalRef != NULL) && (IPdu->ComIPduSignalRef[j] != NULL) ; j++) {
 80002a0:	2300      	movs	r3, #0
 80002a2:	83bb      	strh	r3, [r7, #28]
 80002a4:	e044      	b.n	8000330 <Com_Init+0x15c>
			Signal = IPdu->ComIPduSignalRef[j];
 80002a6:	693b      	ldr	r3, [r7, #16]
 80002a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80002aa:	8bbb      	ldrh	r3, [r7, #28]
 80002ac:	009b      	lsls	r3, r3, #2
 80002ae:	4413      	add	r3, r2
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	60fb      	str	r3, [r7, #12]
			/* Configure signal deadline monitoring if used. */
			/* @req COM333 */ /* If timeout set to 0 */
			if (Signal->ComTimeoutFactor > 0) {
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d00c      	beq.n	80002d6 <Com_Init+0x102>
				if (Signal->ComSignalUseUpdateBit) {
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d107      	bne.n	80002d6 <Com_Init+0x102>
					/* @req COM292 */ /* Signals with update bit shall have their own deadline monitoring */
					/* DeadlineCounter = Signal->ComFirstTimeoutFactor; /* Configure the deadline counter */

				} else {
					/* This signal does not use an update bit, and should therefore use per I-PDU deadline monitoring. */
					if (Signal->ComFirstTimeoutFactor < firstTimeout) {
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	68db      	ldr	r3, [r3, #12]
 80002ca:	6a3a      	ldr	r2, [r7, #32]
 80002cc:	429a      	cmp	r2, r3
 80002ce:	d902      	bls.n	80002d6 <Com_Init+0x102>
						firstTimeout = Signal->ComFirstTimeoutFactor;
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	68db      	ldr	r3, [r3, #12]
 80002d4:	623b      	str	r3, [r7, #32]
					}
				}
			}

			/* @req COM117 */ /* COM module shall clear all update-bits during initialization */
			if (Signal->ComSignalUseUpdateBit) {
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d01b      	beq.n	8000318 <Com_Init+0x144>
				Com_ClearBit(IPdu->ComIPduDataPtr, Signal->ComUpdateBitPosition);
 80002e0:	693b      	ldr	r3, [r7, #16]
 80002e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002e4:	68fa      	ldr	r2, [r7, #12]
 80002e6:	8dd2      	ldrh	r2, [r2, #46]	@ 0x2e
 80002e8:	08d2      	lsrs	r2, r2, #3
 80002ea:	b292      	uxth	r2, r2
 80002ec:	4413      	add	r3, r2
 80002ee:	7819      	ldrb	r1, [r3, #0]
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80002f4:	f003 0307 	and.w	r3, r3, #7
 80002f8:	2201      	movs	r2, #1
 80002fa:	fa02 f303 	lsl.w	r3, r2, r3
 80002fe:	b2db      	uxtb	r3, r3
 8000300:	43db      	mvns	r3, r3
 8000302:	b2da      	uxtb	r2, r3
 8000304:	693b      	ldr	r3, [r7, #16]
 8000306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000308:	68f8      	ldr	r0, [r7, #12]
 800030a:	8dc0      	ldrh	r0, [r0, #46]	@ 0x2e
 800030c:	08c0      	lsrs	r0, r0, #3
 800030e:	b280      	uxth	r0, r0
 8000310:	4403      	add	r3, r0
 8000312:	400a      	ands	r2, r1
 8000314:	b2d2      	uxtb	r2, r2
 8000316:	701a      	strb	r2, [r3, #0]
			}
				/* Initialize signal data. */
				/* @req COM098 */
				Com_WriteToPDU(Signal->ComHandleId, Signal->ComSignalInitValue, &dataChanged);
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	8a18      	ldrh	r0, [r3, #16]
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	69db      	ldr	r3, [r3, #28]
 8000320:	f107 0208 	add.w	r2, r7, #8
 8000324:	4619      	mov	r1, r3
 8000326:	f000 fa6f 	bl	8000808 <Com_WriteToPDU>
		for (j = 0; (IPdu->ComIPduSignalRef != NULL) && (IPdu->ComIPduSignalRef[j] != NULL) ; j++) {
 800032a:	8bbb      	ldrh	r3, [r7, #28]
 800032c:	3301      	adds	r3, #1
 800032e:	83bb      	strh	r3, [r7, #28]
 8000330:	693b      	ldr	r3, [r7, #16]
 8000332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000334:	2b00      	cmp	r3, #0
 8000336:	d007      	beq.n	8000348 <Com_Init+0x174>
 8000338:	693b      	ldr	r3, [r7, #16]
 800033a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800033c:	8bbb      	ldrh	r3, [r7, #28]
 800033e:	009b      	lsls	r3, r3, #2
 8000340:	4413      	add	r3, r2
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	2b00      	cmp	r3, #0
 8000346:	d1ae      	bne.n	80002a6 <Com_Init+0xd2>
			}
		if (IPdu->ComIPduDirection == RECEIVE && IPdu->ComIPduSignalProcessing == DEFERRED) {
 8000348:	693b      	ldr	r3, [r7, #16]
 800034a:	79db      	ldrb	r3, [r3, #7]
 800034c:	2b00      	cmp	r3, #0
 800034e:	d10c      	bne.n	800036a <Com_Init+0x196>
 8000350:	693b      	ldr	r3, [r7, #16]
 8000352:	795b      	ldrb	r3, [r3, #5]
 8000354:	2b01      	cmp	r3, #1
 8000356:	d108      	bne.n	800036a <Com_Init+0x196>
			/* Copy the initialized I-PDU to deferred buffer */
			memcpy(IPdu->ComIPduDeferredDataPtr, IPdu->ComIPduDataPtr,IPdu->ComIPduSize);
 8000358:	693b      	ldr	r3, [r7, #16]
 800035a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800035c:	693b      	ldr	r3, [r7, #16]
 800035e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000360:	693b      	ldr	r3, [r7, #16]
 8000362:	799b      	ldrb	r3, [r3, #6]
 8000364:	461a      	mov	r2, r3
 8000366:	f004 fba3 	bl	8004ab0 <memcpy>
		}
		/* Configure per I-PDU based deadline monitoring. */
		for (j = 0; (IPdu->ComIPduSignalRef != NULL) && (IPdu->ComIPduSignalRef[j] != NULL); j++) {
 800036a:	2300      	movs	r3, #0
 800036c:	83bb      	strh	r3, [r7, #28]
 800036e:	e00c      	b.n	800038a <Com_Init+0x1b6>
			Signal = IPdu->ComIPduSignalRef[j];
 8000370:	693b      	ldr	r3, [r7, #16]
 8000372:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000374:	8bbb      	ldrh	r3, [r7, #28]
 8000376:	009b      	lsls	r3, r3, #2
 8000378:	4413      	add	r3, r2
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	60fb      	str	r3, [r7, #12]

			/* @req COM333 */ /* If timeout set to 0 */
			if ( (Signal->ComTimeoutFactor > 0) && (!Signal->ComSignalUseUpdateBit) ) {
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000382:	2b00      	cmp	r3, #0
		for (j = 0; (IPdu->ComIPduSignalRef != NULL) && (IPdu->ComIPduSignalRef[j] != NULL); j++) {
 8000384:	8bbb      	ldrh	r3, [r7, #28]
 8000386:	3301      	adds	r3, #1
 8000388:	83bb      	strh	r3, [r7, #28]
 800038a:	693b      	ldr	r3, [r7, #16]
 800038c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800038e:	2b00      	cmp	r3, #0
 8000390:	d007      	beq.n	80003a2 <Com_Init+0x1ce>
 8000392:	693b      	ldr	r3, [r7, #16]
 8000394:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000396:	8bbb      	ldrh	r3, [r7, #28]
 8000398:	009b      	lsls	r3, r3, #2
 800039a:	4413      	add	r3, r2
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d1e6      	bne.n	8000370 <Com_Init+0x19c>
	for (i = 0; !ComConfig->ComIPdu[i].Com_EOL; i++) {
 80003a2:	8bfb      	ldrh	r3, [r7, #30]
 80003a4:	3301      	adds	r3, #1
 80003a6:	83fb      	strh	r3, [r7, #30]
 80003a8:	4b16      	ldr	r3, [pc, #88]	@ (8000404 <Com_Init+0x230>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	681a      	ldr	r2, [r3, #0]
 80003ae:	8bfb      	ldrh	r3, [r7, #30]
 80003b0:	019b      	lsls	r3, r3, #6
 80003b2:	4413      	add	r3, r2
 80003b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	f43f af38 	beq.w	800022e <Com_Init+0x5a>
				/* @req COM290 */
				/* DeadlineCounter = firstTimeout; */
			}
		}
	}
	for (i = 0; i < ComConfig->ComNumOfIPDUs; i++) {
 80003be:	2300      	movs	r3, #0
 80003c0:	83fb      	strh	r3, [r7, #30]
 80003c2:	e00d      	b.n	80003e0 <Com_Init+0x20c>
		Com_BufferPduState[i].index = 0;
 80003c4:	8bfb      	ldrh	r3, [r7, #30]
 80003c6:	4a12      	ldr	r2, [pc, #72]	@ (8000410 <Com_Init+0x23c>)
 80003c8:	2100      	movs	r1, #0
 80003ca:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		Com_BufferPduState[i].isLocked = FALSE;
 80003ce:	8bfb      	ldrh	r3, [r7, #30]
 80003d0:	4a0f      	ldr	r2, [pc, #60]	@ (8000410 <Com_Init+0x23c>)
 80003d2:	00db      	lsls	r3, r3, #3
 80003d4:	4413      	add	r3, r2
 80003d6:	2200      	movs	r2, #0
 80003d8:	605a      	str	r2, [r3, #4]
	for (i = 0; i < ComConfig->ComNumOfIPDUs; i++) {
 80003da:	8bfb      	ldrh	r3, [r7, #30]
 80003dc:	3301      	adds	r3, #1
 80003de:	83fb      	strh	r3, [r7, #30]
 80003e0:	4b08      	ldr	r3, [pc, #32]	@ (8000404 <Com_Init+0x230>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	7a5b      	ldrb	r3, [r3, #9]
 80003e6:	461a      	mov	r2, r3
 80003e8:	8bfb      	ldrh	r3, [r7, #30]
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d3ea      	bcc.n	80003c4 <Com_Init+0x1f0>
	}
	/* Check if an error has occurred. */
	if (err) {
 80003ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d102      	bne.n	80003fc <Com_Init+0x228>
		/* */
	} else {
		initStatus = COM_INIT;
 80003f6:	4b07      	ldr	r3, [pc, #28]	@ (8000414 <Com_Init+0x240>)
 80003f8:	2201      	movs	r2, #1
 80003fa:	701a      	strb	r2, [r3, #0]
	}
} /*SID 0x01*/
 80003fc:	3728      	adds	r7, #40	@ 0x28
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	20000150 	.word	0x20000150
 8000408:	08004aec 	.word	0x08004aec
 800040c:	20000164 	.word	0x20000164
 8000410:	20000154 	.word	0x20000154
 8000414:	20000165 	.word	0x20000165

08000418 <Com_GetStatus>:
	}
	initStatus = COM_UNINIT;
} /*SID 0x02*/


Com_StatusType Com_GetStatus(void){ 
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
	return initStatus;
 800041c:	4b03      	ldr	r3, [pc, #12]	@ (800042c <Com_GetStatus+0x14>)
 800041e:	781b      	ldrb	r3, [r3, #0]
}/*SID 0x07, returns COM_INIT or COM_UNINIT*/
 8000420:	4618      	mov	r0, r3
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	20000165 	.word	0x20000165

08000430 <Com_SendSignal>:


/* Communication Services */
uint8 Com_SendSignal(Com_SignalIdType SignalId, const void* SignalDataPtr){
 8000430:	b580      	push	{r7, lr}
 8000432:	b08a      	sub	sp, #40	@ 0x28
 8000434:	af00      	add	r7, sp, #0
 8000436:	4603      	mov	r3, r0
 8000438:	6039      	str	r1, [r7, #0]
 800043a:	80fb      	strh	r3, [r7, #6]
	boolean dataChanged = FALSE;
 800043c:	2300      	movs	r3, #0
 800043e:	617b      	str	r3, [r7, #20]

	if(Com_GetStatus() != COM_INIT){
 8000440:	f7ff ffea 	bl	8000418 <Com_GetStatus>
 8000444:	4603      	mov	r3, r0
 8000446:	2b01      	cmp	r3, #1
 8000448:	d005      	beq.n	8000456 <Com_SendSignal+0x26>
		Det_ReportError(COM_SENDSIGNAL_ID, COM_E_UNINIT);
 800044a:	216f      	movs	r1, #111	@ 0x6f
 800044c:	2002      	movs	r0, #2
 800044e:	f000 fbe0 	bl	8000c12 <Det_ReportError>
		return COM_SERVICE_NOT_AVAILABLE;
 8000452:	2380      	movs	r3, #128	@ 0x80
 8000454:	e0ad      	b.n	80005b2 <Com_SendSignal+0x182>
	}

	if(ComConfig->ComNumOfSignals <= SignalId){
 8000456:	4b59      	ldr	r3, [pc, #356]	@ (80005bc <Com_SendSignal+0x18c>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	7a1b      	ldrb	r3, [r3, #8]
 800045c:	461a      	mov	r2, r3
 800045e:	88fb      	ldrh	r3, [r7, #6]
 8000460:	4293      	cmp	r3, r2
 8000462:	d305      	bcc.n	8000470 <Com_SendSignal+0x40>
		Det_ReportError(COM_SENDSIGNAL_ID, COM_INVALID_SIGNAL_ID);
 8000464:	216d      	movs	r1, #109	@ 0x6d
 8000466:	2002      	movs	r0, #2
 8000468:	f000 fbd3 	bl	8000c12 <Det_ReportError>
		return COM_SERVICE_NOT_AVAILABLE;
 800046c:	2380      	movs	r3, #128	@ 0x80
 800046e:	e0a0      	b.n	80005b2 <Com_SendSignal+0x182>
	}

	/* Store pointer to signal for easier coding. */
	ComSignal_type * Signal = Com_GetSignal(SignalId);
 8000470:	4b52      	ldr	r3, [pc, #328]	@ (80005bc <Com_SendSignal+0x18c>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	6859      	ldr	r1, [r3, #4]
 8000476:	88fa      	ldrh	r2, [r7, #6]
 8000478:	4613      	mov	r3, r2
 800047a:	00db      	lsls	r3, r3, #3
 800047c:	1a9b      	subs	r3, r3, r2
 800047e:	00db      	lsls	r3, r3, #3
 8000480:	440b      	add	r3, r1
 8000482:	623b      	str	r3, [r7, #32]

    ComIPdu_type *IPdu = Com_GetIPDU(Signal->ComIPduHandleId);
 8000484:	4b4d      	ldr	r3, [pc, #308]	@ (80005bc <Com_SendSignal+0x18c>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	681a      	ldr	r2, [r3, #0]
 800048a:	6a3b      	ldr	r3, [r7, #32]
 800048c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800048e:	019b      	lsls	r3, r3, #6
 8000490:	4413      	add	r3, r2
 8000492:	61fb      	str	r3, [r7, #28]

    if (Com_BufferLocked(Com_GetPDUId(IPdu))) {
 8000494:	4b49      	ldr	r3, [pc, #292]	@ (80005bc <Com_SendSignal+0x18c>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	69fa      	ldr	r2, [r7, #28]
 800049c:	1ad3      	subs	r3, r2, r3
 800049e:	119b      	asrs	r3, r3, #6
 80004a0:	b29b      	uxth	r3, r3
 80004a2:	4618      	mov	r0, r3
 80004a4:	f000 f996 	bl	80007d4 <Com_BufferLocked>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <Com_SendSignal+0x82>
        return COM_BUSY;
 80004ae:	2381      	movs	r3, #129	@ 0x81
 80004b0:	e07f      	b.n	80005b2 <Com_SendSignal+0x182>
    //imask_t irq_state;

    //Irq_Save(irq_state);
    /* @req COM624 */
    /*Com_SendSignal shall update the signal object identified by SignalId with the signal reference by the SignalDataPtr param */
    Com_WriteToPDU(Signal->ComHandleId, SignalDataPtr, &dataChanged); /* Helper function*/
 80004b2:	6a3b      	ldr	r3, [r7, #32]
 80004b4:	8a1b      	ldrh	r3, [r3, #16]
 80004b6:	f107 0214 	add.w	r2, r7, #20
 80004ba:	6839      	ldr	r1, [r7, #0]
 80004bc:	4618      	mov	r0, r3
 80004be:	f000 f9a3 	bl	8000808 <Com_WriteToPDU>

    /* @req COM061 */
    /* Set bit if signal has an update bit */
    if (Signal->ComSignalUseUpdateBit) {
 80004c2:	6a3b      	ldr	r3, [r7, #32]
 80004c4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d016      	beq.n	80004fa <Com_SendSignal+0xca>
        Com_SetBit(IPdu->ComIPduDataPtr, Signal->ComUpdateBitPosition);
 80004cc:	69fb      	ldr	r3, [r7, #28]
 80004ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004d0:	6a3a      	ldr	r2, [r7, #32]
 80004d2:	8dd2      	ldrh	r2, [r2, #46]	@ 0x2e
 80004d4:	08d2      	lsrs	r2, r2, #3
 80004d6:	b290      	uxth	r0, r2
 80004d8:	4602      	mov	r2, r0
 80004da:	4413      	add	r3, r2
 80004dc:	7819      	ldrb	r1, [r3, #0]
 80004de:	6a3b      	ldr	r3, [r7, #32]
 80004e0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80004e2:	f003 0307 	and.w	r3, r3, #7
 80004e6:	2201      	movs	r2, #1
 80004e8:	fa02 f303 	lsl.w	r3, r2, r3
 80004ec:	b2da      	uxtb	r2, r3
 80004ee:	69fb      	ldr	r3, [r7, #28]
 80004f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004f2:	4403      	add	r3, r0
 80004f4:	430a      	orrs	r2, r1
 80004f6:	b2d2      	uxtb	r2, r2
 80004f8:	701a      	strb	r2, [r3, #0]
        /* Signal with ComTransferProperty TRIGGERED_ON_CHANGE_WITHOUT_REPETITION assigned to I-PDU  wtih ComTxModeMode DIRECT or MIXED shall be transmitted once 
         * if the new value of the signal is different from local 
         */
        /* @req COM762 */
        /* Signal with ComBitSize 0 should never be detected as changed */
        if ( (TRIGGERED == Signal->ComTransferProperty) || ( TRIGGERED_WITHOUT_REPETITION == Signal->ComTransferProperty ) ||
 80004fa:	6a3b      	ldr	r3, [r7, #32]
 80004fc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8000500:	2b01      	cmp	r3, #1
 8000502:	d011      	beq.n	8000528 <Com_SendSignal+0xf8>
 8000504:	6a3b      	ldr	r3, [r7, #32]
 8000506:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800050a:	2b04      	cmp	r3, #4
 800050c:	d00c      	beq.n	8000528 <Com_SendSignal+0xf8>
                ( ((TRIGGERED_ON_CHANGE == Signal->ComTransferProperty) || ( TRIGGERED_ON_CHANGE_WITHOUT_REPETITION == Signal->ComTransferProperty )) && dataChanged)) {
 800050e:	6a3b      	ldr	r3, [r7, #32]
 8000510:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
        if ( (TRIGGERED == Signal->ComTransferProperty) || ( TRIGGERED_WITHOUT_REPETITION == Signal->ComTransferProperty ) ||
 8000514:	2b02      	cmp	r3, #2
 8000516:	d004      	beq.n	8000522 <Com_SendSignal+0xf2>
                ( ((TRIGGERED_ON_CHANGE == Signal->ComTransferProperty) || ( TRIGGERED_ON_CHANGE_WITHOUT_REPETITION == Signal->ComTransferProperty )) && dataChanged)) {
 8000518:	6a3b      	ldr	r3, [r7, #32]
 800051a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800051e:	2b03      	cmp	r3, #3
 8000520:	d143      	bne.n	80005aa <Com_SendSignal+0x17a>
 8000522:	697b      	ldr	r3, [r7, #20]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d040      	beq.n	80005aa <Com_SendSignal+0x17a>
            /* !req COM625 */
            /* @req COM279 */
            /* @req COM330 */
            /* @req COM467 */ /* Though RetryFailedTransmitRequests not supported. */
            /* @req COM305.1 */
            uint8 numOfReps = 0;
 8000528:	2300      	movs	r3, #0
 800052a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            switch(Signal->ComTransferProperty) {
 800052e:	6a3b      	ldr	r3, [r7, #32]
 8000530:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8000534:	2b02      	cmp	r3, #2
 8000536:	dc02      	bgt.n	800053e <Com_SendSignal+0x10e>
 8000538:	2b00      	cmp	r3, #0
 800053a:	dc04      	bgt.n	8000546 <Com_SendSignal+0x116>
                case TRIGGERED_WITHOUT_REPETITION:
                case TRIGGERED_ON_CHANGE_WITHOUT_REPETITION:
                    numOfReps = 1;
                    break;
                default:
                    break;
 800053c:	e029      	b.n	8000592 <Com_SendSignal+0x162>
 800053e:	3b03      	subs	r3, #3
            switch(Signal->ComTransferProperty) {
 8000540:	2b01      	cmp	r3, #1
 8000542:	d826      	bhi.n	8000592 <Com_SendSignal+0x162>
 8000544:	e021      	b.n	800058a <Com_SendSignal+0x15a>
                    if(IPdu->ComTxIPdu.ComTxModeTrue.ComTxModeNumberOfRepetitions == 0){
 8000546:	69fb      	ldr	r3, [r7, #28]
 8000548:	7c5b      	ldrb	r3, [r3, #17]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d103      	bne.n	8000556 <Com_SendSignal+0x126>
                        numOfReps = 1;
 800054e:	2301      	movs	r3, #1
 8000550:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000554:	e003      	b.n	800055e <Com_SendSignal+0x12e>
                        numOfReps = IPdu->ComTxIPdu.ComTxModeTrue.ComTxModeNumberOfRepetitions;
 8000556:	69fb      	ldr	r3, [r7, #28]
 8000558:	7c5b      	ldrb	r3, [r3, #17]
 800055a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                    Can_HwHandleType Hth = 0;
 800055e:	2300      	movs	r3, #0
 8000560:	76fb      	strb	r3, [r7, #27]
						.swPduHandle = Signal->ComHandleId,
 8000562:	6a3b      	ldr	r3, [r7, #32]
 8000564:	8a1b      	ldrh	r3, [r3, #16]
					Can_PduType PduInfo = {
 8000566:	813b      	strh	r3, [r7, #8]
						.length = IPdu->ComIPduSize,
 8000568:	69fb      	ldr	r3, [r7, #28]
 800056a:	799b      	ldrb	r3, [r3, #6]
					Can_PduType PduInfo = {
 800056c:	72bb      	strb	r3, [r7, #10]
 800056e:	f240 4333 	movw	r3, #1075	@ 0x433
 8000572:	81bb      	strh	r3, [r7, #12]
						.sdu = IPdu->ComIPduDataPtr
 8000574:	69fb      	ldr	r3, [r7, #28]
 8000576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
					Can_PduType PduInfo = {
 8000578:	613b      	str	r3, [r7, #16]
					Can_Write(Hth, &PduInfo);
 800057a:	f107 0208 	add.w	r2, r7, #8
 800057e:	7efb      	ldrb	r3, [r7, #27]
 8000580:	4611      	mov	r1, r2
 8000582:	4618      	mov	r0, r3
 8000584:	f000 fb4e 	bl	8000c24 <Can_Write>
                    break;
 8000588:	e004      	b.n	8000594 <Com_SendSignal+0x164>
                    numOfReps = 1;
 800058a:	2301      	movs	r3, #1
 800058c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                    break;
 8000590:	e000      	b.n	8000594 <Com_SendSignal+0x164>
                    break;
 8000592:	bf00      	nop
            }
            /* Do not cancel outstanding repetitions triggered by other signals  */
            if(IPdu->ComTxIPdu.ComTxModeTrue.ComTxModeNumberOfRepetitions < numOfReps){
 8000594:	69fb      	ldr	r3, [r7, #28]
 8000596:	7c5b      	ldrb	r3, [r3, #17]
 8000598:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800059c:	429a      	cmp	r2, r3
 800059e:	d906      	bls.n	80005ae <Com_SendSignal+0x17e>
                IPdu->ComTxIPdu.ComTxModeTrue.ComTxModeNumberOfRepetitions = numOfReps;
 80005a0:	69fb      	ldr	r3, [r7, #28]
 80005a2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80005a6:	745a      	strb	r2, [r3, #17]
                ( ((TRIGGERED_ON_CHANGE == Signal->ComTransferProperty) || ( TRIGGERED_ON_CHANGE_WITHOUT_REPETITION == Signal->ComTransferProperty )) && dataChanged)) {
 80005a8:	e001      	b.n	80005ae <Com_SendSignal+0x17e>
            }
    }else{
        return COM_SERVICE_NOT_AVAILABLE;
 80005aa:	2380      	movs	r3, #128	@ 0x80
 80005ac:	e001      	b.n	80005b2 <Com_SendSignal+0x182>
                ( ((TRIGGERED_ON_CHANGE == Signal->ComTransferProperty) || ( TRIGGERED_ON_CHANGE_WITHOUT_REPETITION == Signal->ComTransferProperty )) && dataChanged)) {
 80005ae:	bf00      	nop
    }
    //Irq_Restore(irq_state);
    return E_OK;
 80005b0:	2300      	movs	r3, #0
} /*SID 0x0a*/
 80005b2:	4618      	mov	r0, r3
 80005b4:	3728      	adds	r7, #40	@ 0x28
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000150 	.word	0x20000150

080005c0 <Com_WriteData>:

/* Scheduled Functions*/

/* Helper functions */
void Com_WriteData(uint8 *pdu, uint8 *pduSignalMask, const uint8 *signalDataPtr, uint8 destByteLength,
	Com_BitPositionType segmStartBitOffset, uint8 segmBitLength) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b088      	sub	sp, #32
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	607a      	str	r2, [r7, #4]
 80005cc:	70fb      	strb	r3, [r7, #3]
	Com_BitPositionType pduEndBitOffset = segmStartBitOffset + segmBitLength - 1;
 80005ce:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80005d6:	4413      	add	r3, r2
 80005d8:	b29b      	uxth	r3, r3
 80005da:	3b01      	subs	r3, #1
 80005dc:	833b      	strh	r3, [r7, #24]
	uint8 pduStartByte = segmStartBitOffset / 8;
 80005de:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80005e0:	08db      	lsrs	r3, r3, #3
 80005e2:	b29b      	uxth	r3, r3
 80005e4:	75fb      	strb	r3, [r7, #23]
	uint8 pduEndByte = (pduEndBitOffset) / 8;
 80005e6:	8b3b      	ldrh	r3, [r7, #24]
 80005e8:	08db      	lsrs	r3, r3, #3
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	75bb      	strb	r3, [r7, #22]
	uint8 pduByteLength = pduEndByte - pduStartByte;
 80005ee:	7dba      	ldrb	r2, [r7, #22]
 80005f0:	7dfb      	ldrb	r3, [r7, #23]
 80005f2:	1ad3      	subs	r3, r2, r3
 80005f4:	757b      	strb	r3, [r7, #21]

	uint8 segmStartBitOffsetInsideByte = segmStartBitOffset % 8;
 80005f6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	f003 0307 	and.w	r3, r3, #7
 80005fe:	753b      	strb	r3, [r7, #20]
	uint8 pduStartByteMask = (0xFFu >> segmStartBitOffsetInsideByte);
 8000600:	7d3b      	ldrb	r3, [r7, #20]
 8000602:	22ff      	movs	r2, #255	@ 0xff
 8000604:	fa22 f303 	lsr.w	r3, r2, r3
 8000608:	74fb      	strb	r3, [r7, #19]

	uint8 pduAlignmentShift = 7 - (pduEndBitOffset % 8);
 800060a:	8b3b      	ldrh	r3, [r7, #24]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	43db      	mvns	r3, r3
 8000610:	b2db      	uxtb	r3, r3
 8000612:	f003 0307 	and.w	r3, r3, #7
 8000616:	74bb      	strb	r3, [r7, #18]
	uint8 segmByteLength = 1 + (segmBitLength - 1) / 8;
 8000618:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800061c:	3b01      	subs	r3, #1
 800061e:	2b00      	cmp	r3, #0
 8000620:	da00      	bge.n	8000624 <Com_WriteData+0x64>
 8000622:	3307      	adds	r3, #7
 8000624:	10db      	asrs	r3, r3, #3
 8000626:	b2db      	uxtb	r3, r3
 8000628:	3301      	adds	r3, #1
 800062a:	747b      	strb	r3, [r7, #17]
	uint8 pduByteNr = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	77fb      	strb	r3, [r7, #31]
	uint8 signalByteNr = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	77bb      	strb	r3, [r7, #30]

	uint16 shiftReg = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	83bb      	strh	r3, [r7, #28]
	uint16 clearReg = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	837b      	strh	r3, [r7, #26]

	/* clear pduSignalMask all the way from 0 */
	memset(pduSignalMask, 0x00, pduEndByte);
 800063c:	7dbb      	ldrb	r3, [r7, #22]
 800063e:	461a      	mov	r2, r3
 8000640:	2100      	movs	r1, #0
 8000642:	68b8      	ldr	r0, [r7, #8]
 8000644:	f004 fa07 	bl	8004a56 <memset>

	/* setup to point to end (LSB) of buffers */
	pdu += pduEndByte;
 8000648:	7dbb      	ldrb	r3, [r7, #22]
 800064a:	68fa      	ldr	r2, [r7, #12]
 800064c:	4413      	add	r3, r2
 800064e:	60fb      	str	r3, [r7, #12]
	pduSignalMask += pduEndByte;
 8000650:	7dbb      	ldrb	r3, [r7, #22]
 8000652:	68ba      	ldr	r2, [r7, #8]
 8000654:	4413      	add	r3, r2
 8000656:	60bb      	str	r3, [r7, #8]
	signalDataPtr += destByteLength - 1;
 8000658:	78fb      	ldrb	r3, [r7, #3]
 800065a:	3b01      	subs	r3, #1
 800065c:	687a      	ldr	r2, [r7, #4]
 800065e:	4413      	add	r3, r2
 8000660:	607b      	str	r3, [r7, #4]

	/* Process one byte (source) on per iteration */
	do {
		shiftReg = *(signalDataPtr - signalByteNr) & 0x00FFu;
 8000662:	7fbb      	ldrb	r3, [r7, #30]
 8000664:	425b      	negs	r3, r3
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	4413      	add	r3, r2
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	83bb      	strh	r3, [r7, #28]
		clearReg = 0x00FF;
 800066e:	23ff      	movs	r3, #255	@ 0xff
 8000670:	837b      	strh	r3, [r7, #26]
		shiftReg <<= pduAlignmentShift;
 8000672:	8bba      	ldrh	r2, [r7, #28]
 8000674:	7cbb      	ldrb	r3, [r7, #18]
 8000676:	fa02 f303 	lsl.w	r3, r2, r3
 800067a:	83bb      	strh	r3, [r7, #28]
		clearReg <<= pduAlignmentShift;
 800067c:	8b7a      	ldrh	r2, [r7, #26]
 800067e:	7cbb      	ldrb	r3, [r7, #18]
 8000680:	fa02 f303 	lsl.w	r3, r2, r3
 8000684:	837b      	strh	r3, [r7, #26]
		if (pduByteNr == pduByteLength) {
 8000686:	7ffa      	ldrb	r2, [r7, #31]
 8000688:	7d7b      	ldrb	r3, [r7, #21]
 800068a:	429a      	cmp	r2, r3
 800068c:	d109      	bne.n	80006a2 <Com_WriteData+0xe2>
			shiftReg &= pduStartByteMask;
 800068e:	7cfb      	ldrb	r3, [r7, #19]
 8000690:	b29a      	uxth	r2, r3
 8000692:	8bbb      	ldrh	r3, [r7, #28]
 8000694:	4013      	ands	r3, r2
 8000696:	83bb      	strh	r3, [r7, #28]
			clearReg &= pduStartByteMask;
 8000698:	7cfb      	ldrb	r3, [r7, #19]
 800069a:	b29a      	uxth	r2, r3
 800069c:	8b7b      	ldrh	r3, [r7, #26]
 800069e:	4013      	ands	r3, r2
 80006a0:	837b      	strh	r3, [r7, #26]
		}
		*(pdu - pduByteNr) &= (uint16)(~clearReg | ~0x00FFu);
 80006a2:	7ffb      	ldrb	r3, [r7, #31]
 80006a4:	425b      	negs	r3, r3
 80006a6:	68fa      	ldr	r2, [r7, #12]
 80006a8:	4413      	add	r3, r2
 80006aa:	7819      	ldrb	r1, [r3, #0]
 80006ac:	8b7b      	ldrh	r3, [r7, #26]
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	43db      	mvns	r3, r3
 80006b2:	b2da      	uxtb	r2, r3
 80006b4:	7ffb      	ldrb	r3, [r7, #31]
 80006b6:	425b      	negs	r3, r3
 80006b8:	68f8      	ldr	r0, [r7, #12]
 80006ba:	4403      	add	r3, r0
 80006bc:	400a      	ands	r2, r1
 80006be:	b2d2      	uxtb	r2, r2
 80006c0:	701a      	strb	r2, [r3, #0]
		*(pduSignalMask - pduByteNr) |= (uint16) (clearReg & 0x00FFu);
 80006c2:	7ffb      	ldrb	r3, [r7, #31]
 80006c4:	425b      	negs	r3, r3
 80006c6:	68ba      	ldr	r2, [r7, #8]
 80006c8:	4413      	add	r3, r2
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	b25a      	sxtb	r2, r3
 80006ce:	8b7b      	ldrh	r3, [r7, #26]
 80006d0:	b25b      	sxtb	r3, r3
 80006d2:	4313      	orrs	r3, r2
 80006d4:	b259      	sxtb	r1, r3
 80006d6:	7ffb      	ldrb	r3, [r7, #31]
 80006d8:	425b      	negs	r3, r3
 80006da:	68ba      	ldr	r2, [r7, #8]
 80006dc:	4413      	add	r3, r2
 80006de:	b2ca      	uxtb	r2, r1
 80006e0:	701a      	strb	r2, [r3, #0]
		*(pdu - pduByteNr) |= shiftReg & 0x00FFu;
 80006e2:	7ffb      	ldrb	r3, [r7, #31]
 80006e4:	425b      	negs	r3, r3
 80006e6:	68fa      	ldr	r2, [r7, #12]
 80006e8:	4413      	add	r3, r2
 80006ea:	7819      	ldrb	r1, [r3, #0]
 80006ec:	8bbb      	ldrh	r3, [r7, #28]
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	7ffb      	ldrb	r3, [r7, #31]
 80006f2:	425b      	negs	r3, r3
 80006f4:	68f8      	ldr	r0, [r7, #12]
 80006f6:	4403      	add	r3, r0
 80006f8:	430a      	orrs	r2, r1
 80006fa:	b2d2      	uxtb	r2, r2
 80006fc:	701a      	strb	r2, [r3, #0]

		pduByteNr++;
 80006fe:	7ffb      	ldrb	r3, [r7, #31]
 8000700:	3301      	adds	r3, #1
 8000702:	77fb      	strb	r3, [r7, #31]
		if ((pduAlignmentShift != 0) && (pduByteNr <= pduByteLength)) {
 8000704:	7cbb      	ldrb	r3, [r7, #18]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d057      	beq.n	80007ba <Com_WriteData+0x1fa>
 800070a:	7ffa      	ldrb	r2, [r7, #31]
 800070c:	7d7b      	ldrb	r3, [r7, #21]
 800070e:	429a      	cmp	r2, r3
 8000710:	d853      	bhi.n	80007ba <Com_WriteData+0x1fa>
			shiftReg = *(signalDataPtr - signalByteNr) & 0x00FFu;
 8000712:	7fbb      	ldrb	r3, [r7, #30]
 8000714:	425b      	negs	r3, r3
 8000716:	687a      	ldr	r2, [r7, #4]
 8000718:	4413      	add	r3, r2
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	83bb      	strh	r3, [r7, #28]
			clearReg = 0x00FF;
 800071e:	23ff      	movs	r3, #255	@ 0xff
 8000720:	837b      	strh	r3, [r7, #26]
			shiftReg <<= pduAlignmentShift;
 8000722:	8bba      	ldrh	r2, [r7, #28]
 8000724:	7cbb      	ldrb	r3, [r7, #18]
 8000726:	fa02 f303 	lsl.w	r3, r2, r3
 800072a:	83bb      	strh	r3, [r7, #28]
			clearReg <<= pduAlignmentShift;
 800072c:	8b7a      	ldrh	r2, [r7, #26]
 800072e:	7cbb      	ldrb	r3, [r7, #18]
 8000730:	fa02 f303 	lsl.w	r3, r2, r3
 8000734:	837b      	strh	r3, [r7, #26]
			shiftReg >>= 8;
 8000736:	8bbb      	ldrh	r3, [r7, #28]
 8000738:	0a1b      	lsrs	r3, r3, #8
 800073a:	83bb      	strh	r3, [r7, #28]
			clearReg >>= 8;
 800073c:	8b7b      	ldrh	r3, [r7, #26]
 800073e:	0a1b      	lsrs	r3, r3, #8
 8000740:	837b      	strh	r3, [r7, #26]
			if (pduByteNr == pduByteLength) {
 8000742:	7ffa      	ldrb	r2, [r7, #31]
 8000744:	7d7b      	ldrb	r3, [r7, #21]
 8000746:	429a      	cmp	r2, r3
 8000748:	d109      	bne.n	800075e <Com_WriteData+0x19e>
				shiftReg &= pduStartByteMask;
 800074a:	7cfb      	ldrb	r3, [r7, #19]
 800074c:	b29a      	uxth	r2, r3
 800074e:	8bbb      	ldrh	r3, [r7, #28]
 8000750:	4013      	ands	r3, r2
 8000752:	83bb      	strh	r3, [r7, #28]
				clearReg &= pduStartByteMask;
 8000754:	7cfb      	ldrb	r3, [r7, #19]
 8000756:	b29a      	uxth	r2, r3
 8000758:	8b7b      	ldrh	r3, [r7, #26]
 800075a:	4013      	ands	r3, r2
 800075c:	837b      	strh	r3, [r7, #26]
			}
			*(pdu - pduByteNr) &= (uint16)(~clearReg | ~0x00FFu);
 800075e:	7ffb      	ldrb	r3, [r7, #31]
 8000760:	425b      	negs	r3, r3
 8000762:	68fa      	ldr	r2, [r7, #12]
 8000764:	4413      	add	r3, r2
 8000766:	7819      	ldrb	r1, [r3, #0]
 8000768:	8b7b      	ldrh	r3, [r7, #26]
 800076a:	b2db      	uxtb	r3, r3
 800076c:	43db      	mvns	r3, r3
 800076e:	b2da      	uxtb	r2, r3
 8000770:	7ffb      	ldrb	r3, [r7, #31]
 8000772:	425b      	negs	r3, r3
 8000774:	68f8      	ldr	r0, [r7, #12]
 8000776:	4403      	add	r3, r0
 8000778:	400a      	ands	r2, r1
 800077a:	b2d2      	uxtb	r2, r2
 800077c:	701a      	strb	r2, [r3, #0]
			*(pduSignalMask - pduByteNr) |= (uint16) (clearReg & 0x00FFu);
 800077e:	7ffb      	ldrb	r3, [r7, #31]
 8000780:	425b      	negs	r3, r3
 8000782:	68ba      	ldr	r2, [r7, #8]
 8000784:	4413      	add	r3, r2
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	b25a      	sxtb	r2, r3
 800078a:	8b7b      	ldrh	r3, [r7, #26]
 800078c:	b25b      	sxtb	r3, r3
 800078e:	4313      	orrs	r3, r2
 8000790:	b259      	sxtb	r1, r3
 8000792:	7ffb      	ldrb	r3, [r7, #31]
 8000794:	425b      	negs	r3, r3
 8000796:	68ba      	ldr	r2, [r7, #8]
 8000798:	4413      	add	r3, r2
 800079a:	b2ca      	uxtb	r2, r1
 800079c:	701a      	strb	r2, [r3, #0]
			*(pdu - pduByteNr) |= shiftReg & 0x00FFu;
 800079e:	7ffb      	ldrb	r3, [r7, #31]
 80007a0:	425b      	negs	r3, r3
 80007a2:	68fa      	ldr	r2, [r7, #12]
 80007a4:	4413      	add	r3, r2
 80007a6:	7819      	ldrb	r1, [r3, #0]
 80007a8:	8bbb      	ldrh	r3, [r7, #28]
 80007aa:	b2da      	uxtb	r2, r3
 80007ac:	7ffb      	ldrb	r3, [r7, #31]
 80007ae:	425b      	negs	r3, r3
 80007b0:	68f8      	ldr	r0, [r7, #12]
 80007b2:	4403      	add	r3, r0
 80007b4:	430a      	orrs	r2, r1
 80007b6:	b2d2      	uxtb	r2, r2
 80007b8:	701a      	strb	r2, [r3, #0]
		}
		signalByteNr++;
 80007ba:	7fbb      	ldrb	r3, [r7, #30]
 80007bc:	3301      	adds	r3, #1
 80007be:	77bb      	strb	r3, [r7, #30]
	} while (signalByteNr < segmByteLength);
 80007c0:	7fba      	ldrb	r2, [r7, #30]
 80007c2:	7c7b      	ldrb	r3, [r7, #17]
 80007c4:	429a      	cmp	r2, r3
 80007c6:	f4ff af4c 	bcc.w	8000662 <Com_WriteData+0xa2>
}
 80007ca:	bf00      	nop
 80007cc:	bf00      	nop
 80007ce:	3720      	adds	r7, #32
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <Com_BufferLocked>:

boolean Com_BufferLocked(PduIdType id) {
 80007d4:	b480      	push	{r7}
 80007d6:	b085      	sub	sp, #20
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	80fb      	strh	r3, [r7, #6]
	//imask_t state;
	//Irq_Save(state);
	boolean locked = Com_BufferPduState[id].isLocked;
 80007de:	88fb      	ldrh	r3, [r7, #6]
 80007e0:	4a08      	ldr	r2, [pc, #32]	@ (8000804 <Com_BufferLocked+0x30>)
 80007e2:	00db      	lsls	r3, r3, #3
 80007e4:	4413      	add	r3, r2
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	60fb      	str	r3, [r7, #12]
	//Irq_Restore(state);
	if (locked) {
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <Com_BufferLocked+0x20>
		return TRUE;
 80007f0:	2301      	movs	r3, #1
 80007f2:	e000      	b.n	80007f6 <Com_BufferLocked+0x22>
	} else {
		return FALSE;
 80007f4:	2300      	movs	r3, #0
	}
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3714      	adds	r7, #20
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	20000154 	.word	0x20000154

08000808 <Com_WriteToPDU>:
			/* Nothing? */
		}
	}
}

void Com_WriteToPDU(Com_SignalIdType signalId, const void *signalData, boolean *dataChanged){
 8000808:	b5b0      	push	{r4, r5, r7, lr}
 800080a:	b098      	sub	sp, #96	@ 0x60
 800080c:	af02      	add	r7, sp, #8
 800080e:	4603      	mov	r3, r0
 8000810:	60b9      	str	r1, [r7, #8]
 8000812:	607a      	str	r2, [r7, #4]
 8000814:	81fb      	strh	r3, [r7, #14]
	/* @req COM221 */ /* COM module shall perform endianness conversion before the I-PDU callout on sender side. */
	ComSignal_type * Signal =  Com_GetSignal(signalId);
 8000816:	4ba7      	ldr	r3, [pc, #668]	@ (8000ab4 <Com_WriteToPDU+0x2ac>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	6859      	ldr	r1, [r3, #4]
 800081c:	89fa      	ldrh	r2, [r7, #14]
 800081e:	4613      	mov	r3, r2
 8000820:	00db      	lsls	r3, r3, #3
 8000822:	1a9b      	subs	r3, r3, r2
 8000824:	00db      	lsls	r3, r3, #3
 8000826:	440b      	add	r3, r1
 8000828:	653b      	str	r3, [r7, #80]	@ 0x50
	Com_SignalType signalType = Signal->ComSignalType;
 800082a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800082c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000830:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	uint8 signalLength = Signal->ComBitSize / 8;
 8000834:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000836:	791b      	ldrb	r3, [r3, #4]
 8000838:	08db      	lsrs	r3, r3, #3
 800083a:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
	Com_BitPositionType bitPosition = Signal->ComBitPosition;
 800083e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000840:	881b      	ldrh	r3, [r3, #0]
 8000842:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	uint8 bitSize = Signal->ComBitSize;
 8000846:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000848:	791b      	ldrb	r3, [r3, #4]
 800084a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	ComSignalEndianess_type endianness = Signal->ComSignalEndianess;
 800084e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000850:	7e5b      	ldrb	r3, [r3, #25]
 8000852:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

	uint8 signalBufferSize = Com_SignalTypeToSize(signalType, signalLength);
 8000856:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800085a:	2b0a      	cmp	r3, #10
 800085c:	d020      	beq.n	80008a0 <Com_WriteToPDU+0x98>
 800085e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000862:	2b07      	cmp	r3, #7
 8000864:	d01a      	beq.n	800089c <Com_WriteToPDU+0x94>
 8000866:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800086a:	2b08      	cmp	r3, #8
 800086c:	d014      	beq.n	8000898 <Com_WriteToPDU+0x90>
 800086e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000872:	2b0c      	cmp	r3, #12
 8000874:	d00d      	beq.n	8000892 <Com_WriteToPDU+0x8a>
 8000876:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800087a:	2b06      	cmp	r3, #6
 800087c:	d007      	beq.n	800088e <Com_WriteToPDU+0x86>
 800087e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000882:	2b03      	cmp	r3, #3
 8000884:	d101      	bne.n	800088a <Com_WriteToPDU+0x82>
 8000886:	2302      	movs	r3, #2
 8000888:	e00b      	b.n	80008a2 <Com_WriteToPDU+0x9a>
 800088a:	2304      	movs	r3, #4
 800088c:	e009      	b.n	80008a2 <Com_WriteToPDU+0x9a>
 800088e:	2301      	movs	r3, #1
 8000890:	e007      	b.n	80008a2 <Com_WriteToPDU+0x9a>
 8000892:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000896:	e004      	b.n	80008a2 <Com_WriteToPDU+0x9a>
 8000898:	2304      	movs	r3, #4
 800089a:	e002      	b.n	80008a2 <Com_WriteToPDU+0x9a>
 800089c:	2302      	movs	r3, #2
 800089e:	e000      	b.n	80008a2 <Com_WriteToPDU+0x9a>
 80008a0:	2301      	movs	r3, #1
 80008a2:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
	uint8 pduSignalMask[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 80008a6:	4a84      	ldr	r2, [pc, #528]	@ (8000ab8 <Com_WriteToPDU+0x2b0>)
 80008a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008b0:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8 signalDataBytesArray[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 80008b4:	4a80      	ldr	r2, [pc, #512]	@ (8000ab8 <Com_WriteToPDU+0x2b0>)
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008be:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8 *signalDataBytes = (uint8 *)signalData;
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	647b      	str	r3, [r7, #68]	@ 0x44
	//imask_t irq_state;

	//Irq_Save(irq_state);
	if (endianness == COM_OPAQUE || signalType == UINT8_N){
 80008c6:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80008ca:	2b02      	cmp	r3, #2
 80008cc:	d003      	beq.n	80008d6 <Com_WriteToPDU+0xce>
 80008ce:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80008d2:	2b0c      	cmp	r3, #12
 80008d4:	d12a      	bne.n	800092c <Com_WriteToPDU+0x124>
		/* @req COM472 */
		/* COM interprets opaque data as uint8[n] and shall always map it to an n-bytes sized signal */
		uint8 *pduBufferBytes = (uint8 *)pduBuffer;
 80008d6:	4b77      	ldr	r3, [pc, #476]	@ (8000ab4 <Com_WriteToPDU+0x2ac>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80008de:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80008e0:	019b      	lsls	r3, r3, #6
 80008e2:	4413      	add	r3, r2
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	633b      	str	r3, [r7, #48]	@ 0x30
		uint8 startFromPduByte = bitPosition / 8;
 80008e8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80008ec:	08db      	lsrs	r3, r3, #3
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if(memcmp(pduBufferBytes + startFromPduByte, signalDataBytes, signalLength) != 0){
 80008f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80008f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80008fa:	4413      	add	r3, r2
 80008fc:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 8000900:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8000902:	4618      	mov	r0, r3
 8000904:	f004 f897 	bl	8004a36 <memcmp>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d002      	beq.n	8000914 <Com_WriteToPDU+0x10c>
		    *dataChanged = TRUE;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2201      	movs	r2, #1
 8000912:	601a      	str	r2, [r3, #0]
		}
		memcpy(pduBufferBytes + startFromPduByte, signalDataBytes, signalLength);
 8000914:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000918:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800091a:	4413      	add	r3, r2
 800091c:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 8000920:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8000922:	4618      	mov	r0, r3
 8000924:	f004 f8c4 	bl	8004ab0 <memcpy>
	if (endianness == COM_OPAQUE || signalType == UINT8_N){
 8000928:	bf00      	nop
                pduBufferBytes[i] |= pduBufferByteEnd[7 - i];
            }
        }
	}
	//Irq_Restore(irq_state);
}
 800092a:	e14e      	b.n	8000bca <Com_WriteToPDU+0x3c2>
		if (Com_SystemEndianness == COM_BIG_ENDIAN){
 800092c:	4b63      	ldr	r3, [pc, #396]	@ (8000abc <Com_WriteToPDU+0x2b4>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d11a      	bne.n	800096a <Com_WriteToPDU+0x162>
			for (i = 0; i < signalBufferSize; i++){
 8000934:	2300      	movs	r3, #0
 8000936:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 800093a:	e00f      	b.n	800095c <Com_WriteToPDU+0x154>
				signalDataBytesArray[i] = signalDataBytes[i];
 800093c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000940:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000942:	441a      	add	r2, r3
 8000944:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000948:	7812      	ldrb	r2, [r2, #0]
 800094a:	3358      	adds	r3, #88	@ 0x58
 800094c:	443b      	add	r3, r7
 800094e:	f803 2c3c 	strb.w	r2, [r3, #-60]
			for (i = 0; i < signalBufferSize; i++){
 8000952:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000956:	3301      	adds	r3, #1
 8000958:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 800095c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8000960:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8000964:	429a      	cmp	r2, r3
 8000966:	d3e9      	bcc.n	800093c <Com_WriteToPDU+0x134>
 8000968:	e021      	b.n	80009ae <Com_WriteToPDU+0x1a6>
		} else if (Com_SystemEndianness == COM_LITTLE_ENDIAN){
 800096a:	4b54      	ldr	r3, [pc, #336]	@ (8000abc <Com_WriteToPDU+0x2b4>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d11d      	bne.n	80009ae <Com_WriteToPDU+0x1a6>
			for (i = 0; i < signalBufferSize; i++){
 8000972:	2300      	movs	r3, #0
 8000974:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 8000978:	e013      	b.n	80009a2 <Com_WriteToPDU+0x19a>
				signalDataBytesArray[(signalBufferSize - 1) - i] = signalDataBytes[i];
 800097a:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800097e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000980:	441a      	add	r2, r3
 8000982:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8000986:	1e59      	subs	r1, r3, #1
 8000988:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800098c:	1acb      	subs	r3, r1, r3
 800098e:	7812      	ldrb	r2, [r2, #0]
 8000990:	3358      	adds	r3, #88	@ 0x58
 8000992:	443b      	add	r3, r7
 8000994:	f803 2c3c 	strb.w	r2, [r3, #-60]
			for (i = 0; i < signalBufferSize; i++){
 8000998:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800099c:	3301      	adds	r3, #1
 800099e:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 80009a2:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 80009a6:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80009aa:	429a      	cmp	r2, r3
 80009ac:	d3e5      	bcc.n	800097a <Com_WriteToPDU+0x172>
		uint8 pduBufferByteEnd[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 80009ae:	4a42      	ldr	r2, [pc, #264]	@ (8000ab8 <Com_WriteToPDU+0x2b0>)
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009b8:	e883 0003 	stmia.w	r3, {r0, r1}
        if (endianness == COM_BIG_ENDIAN){
 80009bc:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d17d      	bne.n	8000ac0 <Com_WriteToPDU+0x2b8>
            Com_BitPositionType startBitOffset = Com_GetByteOffset(bitPosition % 8);
 80009c4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80009c8:	f003 0307 	and.w	r3, r3, #7
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	4618      	mov	r0, r3
 80009d0:	f000 f902 	bl	8000bd8 <Com_GetByteOffset>
 80009d4:	4603      	mov	r3, r0
 80009d6:	877b      	strh	r3, [r7, #58]	@ 0x3a
			Com_WriteData(pduBufferByteEnd, pduSignalMask, signalDataBytesArray, signalBufferSize, startBitOffset, bitSize);
 80009d8:	f897 4049 	ldrb.w	r4, [r7, #73]	@ 0x49
 80009dc:	f107 021c 	add.w	r2, r7, #28
 80009e0:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80009e4:	f107 0014 	add.w	r0, r7, #20
 80009e8:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80009ec:	9301      	str	r3, [sp, #4]
 80009ee:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80009f0:	9300      	str	r3, [sp, #0]
 80009f2:	4623      	mov	r3, r4
 80009f4:	f7ff fde4 	bl	80005c0 <Com_WriteData>
            uint8 *pduBufferBytes = ((uint8 *)pduBuffer) + (bitPosition/8);
 80009f8:	4b2e      	ldr	r3, [pc, #184]	@ (8000ab4 <Com_WriteToPDU+0x2ac>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000a00:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000a02:	019b      	lsls	r3, r3, #6
 8000a04:	4413      	add	r3, r2
 8000a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a08:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8000a0c:	08d2      	lsrs	r2, r2, #3
 8000a0e:	b292      	uxth	r2, r2
 8000a10:	4413      	add	r3, r2
 8000a12:	637b      	str	r3, [r7, #52]	@ 0x34
            for (i = 0; i < 8; i++) {
 8000a14:	2300      	movs	r3, #0
 8000a16:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 8000a1a:	e045      	b.n	8000aa8 <Com_WriteToPDU+0x2a0>
                if(pduBufferByteEnd[i] != (pduBufferBytes[i]  & pduSignalMask[i])){
 8000a1c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000a20:	3358      	adds	r3, #88	@ 0x58
 8000a22:	443b      	add	r3, r7
 8000a24:	f813 2c44 	ldrb.w	r2, [r3, #-68]
 8000a28:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000a2c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000a2e:	440b      	add	r3, r1
 8000a30:	7819      	ldrb	r1, [r3, #0]
 8000a32:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000a36:	3358      	adds	r3, #88	@ 0x58
 8000a38:	443b      	add	r3, r7
 8000a3a:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8000a3e:	400b      	ands	r3, r1
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	429a      	cmp	r2, r3
 8000a44:	d002      	beq.n	8000a4c <Com_WriteToPDU+0x244>
                    *dataChanged = TRUE;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2201      	movs	r2, #1
 8000a4a:	601a      	str	r2, [r3, #0]
                pduBufferBytes[i] &= ~pduSignalMask[i];
 8000a4c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000a50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000a52:	4413      	add	r3, r2
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	b25a      	sxtb	r2, r3
 8000a58:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000a5c:	3358      	adds	r3, #88	@ 0x58
 8000a5e:	443b      	add	r3, r7
 8000a60:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8000a64:	b25b      	sxtb	r3, r3
 8000a66:	43db      	mvns	r3, r3
 8000a68:	b25b      	sxtb	r3, r3
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	b259      	sxtb	r1, r3
 8000a6e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000a72:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000a74:	4413      	add	r3, r2
 8000a76:	b2ca      	uxtb	r2, r1
 8000a78:	701a      	strb	r2, [r3, #0]
                pduBufferBytes[i] |= pduBufferByteEnd[i];
 8000a7a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000a7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000a80:	4413      	add	r3, r2
 8000a82:	7819      	ldrb	r1, [r3, #0]
 8000a84:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000a88:	3358      	adds	r3, #88	@ 0x58
 8000a8a:	443b      	add	r3, r7
 8000a8c:	f813 2c44 	ldrb.w	r2, [r3, #-68]
 8000a90:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000a94:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000a96:	4403      	add	r3, r0
 8000a98:	430a      	orrs	r2, r1
 8000a9a:	b2d2      	uxtb	r2, r2
 8000a9c:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < 8; i++) {
 8000a9e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 8000aa8:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000aac:	2b07      	cmp	r3, #7
 8000aae:	d9b5      	bls.n	8000a1c <Com_WriteToPDU+0x214>
}
 8000ab0:	e08b      	b.n	8000bca <Com_WriteToPDU+0x3c2>
 8000ab2:	bf00      	nop
 8000ab4:	20000150 	.word	0x20000150
 8000ab8:	08004ae4 	.word	0x08004ae4
 8000abc:	20000164 	.word	0x20000164
            uint8 startBitOffset = 64 - ((bitPosition % 8) + bitSize); /* 8 bytes = 64 bit*/
 8000ac0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	f003 0307 	and.w	r3, r3, #7
 8000aca:	b2da      	uxtb	r2, r3
 8000acc:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000ad0:	4413      	add	r3, r2
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000ad8:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
            Com_WriteData(pduBufferByteEnd, pduSignalMask, signalDataBytesArray, signalBufferSize, startBitOffset, bitSize);
 8000adc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	f897 5049 	ldrb.w	r5, [r7, #73]	@ 0x49
 8000ae6:	f107 041c 	add.w	r4, r7, #28
 8000aea:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000aee:	f107 0014 	add.w	r0, r7, #20
 8000af2:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8000af6:	9201      	str	r2, [sp, #4]
 8000af8:	9300      	str	r3, [sp, #0]
 8000afa:	462b      	mov	r3, r5
 8000afc:	4622      	mov	r2, r4
 8000afe:	f7ff fd5f 	bl	80005c0 <Com_WriteData>
            uint8 *pduBufferBytes = ((uint8 *)pduBuffer) + (bitPosition / 8);
 8000b02:	4b34      	ldr	r3, [pc, #208]	@ (8000bd4 <Com_WriteToPDU+0x3cc>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000b0a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000b0c:	019b      	lsls	r3, r3, #6
 8000b0e:	4413      	add	r3, r2
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8000b16:	08d2      	lsrs	r2, r2, #3
 8000b18:	b292      	uxth	r2, r2
 8000b1a:	4413      	add	r3, r2
 8000b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
            for (i = 0; i < 8; i++){
 8000b1e:	2300      	movs	r3, #0
 8000b20:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 8000b24:	e04d      	b.n	8000bc2 <Com_WriteToPDU+0x3ba>
                if(pduBufferByteEnd[7 - i] != (pduBufferBytes[i] & (pduSignalMask[7 - i]))){
 8000b26:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000b2a:	f1c3 0307 	rsb	r3, r3, #7
 8000b2e:	3358      	adds	r3, #88	@ 0x58
 8000b30:	443b      	add	r3, r7
 8000b32:	f813 2c44 	ldrb.w	r2, [r3, #-68]
 8000b36:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000b3a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8000b3c:	440b      	add	r3, r1
 8000b3e:	7819      	ldrb	r1, [r3, #0]
 8000b40:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000b44:	f1c3 0307 	rsb	r3, r3, #7
 8000b48:	3358      	adds	r3, #88	@ 0x58
 8000b4a:	443b      	add	r3, r7
 8000b4c:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8000b50:	400b      	ands	r3, r1
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d002      	beq.n	8000b5e <Com_WriteToPDU+0x356>
                    *dataChanged = TRUE;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	601a      	str	r2, [r3, #0]
                pduBufferBytes[i] &= ~pduSignalMask[7 - i];
 8000b5e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000b62:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000b64:	4413      	add	r3, r2
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	b25a      	sxtb	r2, r3
 8000b6a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000b6e:	f1c3 0307 	rsb	r3, r3, #7
 8000b72:	3358      	adds	r3, #88	@ 0x58
 8000b74:	443b      	add	r3, r7
 8000b76:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8000b7a:	b25b      	sxtb	r3, r3
 8000b7c:	43db      	mvns	r3, r3
 8000b7e:	b25b      	sxtb	r3, r3
 8000b80:	4013      	ands	r3, r2
 8000b82:	b259      	sxtb	r1, r3
 8000b84:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000b88:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000b8a:	4413      	add	r3, r2
 8000b8c:	b2ca      	uxtb	r2, r1
 8000b8e:	701a      	strb	r2, [r3, #0]
                pduBufferBytes[i] |= pduBufferByteEnd[7 - i];
 8000b90:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000b94:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000b96:	4413      	add	r3, r2
 8000b98:	7819      	ldrb	r1, [r3, #0]
 8000b9a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000b9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ba2:	3358      	adds	r3, #88	@ 0x58
 8000ba4:	443b      	add	r3, r7
 8000ba6:	f813 2c44 	ldrb.w	r2, [r3, #-68]
 8000baa:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000bae:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000bb0:	4403      	add	r3, r0
 8000bb2:	430a      	orrs	r2, r1
 8000bb4:	b2d2      	uxtb	r2, r2
 8000bb6:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < 8; i++){
 8000bb8:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 8000bc2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000bc6:	2b07      	cmp	r3, #7
 8000bc8:	d9ad      	bls.n	8000b26 <Com_WriteToPDU+0x31e>
}
 8000bca:	bf00      	nop
 8000bcc:	3758      	adds	r7, #88	@ 0x58
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bdb0      	pop	{r4, r5, r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000150 	.word	0x20000150

08000bd8 <Com_GetByteOffset>:

Com_BitPositionType Com_GetByteOffset(Com_BitPositionType BitNumber){
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	80fb      	strh	r3, [r7, #6]
	uint8 byte = BitNumber / 8;
 8000be2:	88fb      	ldrh	r3, [r7, #6]
 8000be4:	08db      	lsrs	r3, r3, #3
 8000be6:	b29b      	uxth	r3, r3
 8000be8:	73fb      	strb	r3, [r7, #15]
	Com_BitPositionType byteStartOffset = (Com_BitPositionType) (byte * 8u);
 8000bea:	7bfb      	ldrb	r3, [r7, #15]
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	00db      	lsls	r3, r3, #3
 8000bf0:	81bb      	strh	r3, [r7, #12]
	Com_BitPositionType byteOffset = BitNumber % 8;
 8000bf2:	88fb      	ldrh	r3, [r7, #6]
 8000bf4:	f003 0307 	and.w	r3, r3, #7
 8000bf8:	817b      	strh	r3, [r7, #10]
	return (Com_BitPositionType) (byteStartOffset + (7u - byteOffset));
 8000bfa:	89ba      	ldrh	r2, [r7, #12]
 8000bfc:	897b      	ldrh	r3, [r7, #10]
 8000bfe:	1ad3      	subs	r3, r2, r3
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	3307      	adds	r3, #7
 8000c04:	b29b      	uxth	r3, r3
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3714      	adds	r7, #20
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <Det_ReportError>:
#include "Std_Types.h"

void Det_ReportError(int a, ...){
 8000c12:	b40f      	push	{r0, r1, r2, r3}
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0

}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	b004      	add	sp, #16
 8000c22:	4770      	bx	lr

08000c24 <Can_Write>:
    CAN_READY
} Can_DriverStateType;

Can_DriverStateType Can_state = CAN_UNINIT;

Can_ReturnType Can_Write(Can_HwHandleType Hth, const Can_PduType* PduInfo) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	@ 0x28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	6039      	str	r1, [r7, #0]
 8000c2e:	71fb      	strb	r3, [r7, #7]
	// we only have one controller with id 0
	if (Hth != 0) {
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <Can_Write+0x16>
		return CAN_NOT_OK;
 8000c36:	2301      	movs	r3, #1
 8000c38:	e018      	b.n	8000c6c <Can_Write+0x48>
	}
	CAN_TxHeaderTypeDef TxHeader;
	uint32_t TxMailbox;
	TxHeader.DLC = PduInfo->length;
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	789b      	ldrb	r3, [r3, #2]
 8000c3e:	623b      	str	r3, [r7, #32]
	TxHeader.IDE = CAN_ID_STD;
 8000c40:	2300      	movs	r3, #0
 8000c42:	61bb      	str	r3, [r7, #24]
	TxHeader.RTR = CAN_RTR_DATA;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61fb      	str	r3, [r7, #28]
	TxHeader.StdId = PduInfo->id;
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	889b      	ldrh	r3, [r3, #4]
 8000c4c:	613b      	str	r3, [r7, #16]
	return HAL_CAN_AddTxMessage(&hcan, &TxHeader, PduInfo->sdu, &TxMailbox) == HAL_OK ? CAN_OK : CAN_NOT_OK;
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	689a      	ldr	r2, [r3, #8]
 8000c52:	f107 030c 	add.w	r3, r7, #12
 8000c56:	f107 0110 	add.w	r1, r7, #16
 8000c5a:	4806      	ldr	r0, [pc, #24]	@ (8000c74 <Can_Write+0x50>)
 8000c5c:	f000 fb98 	bl	8001390 <HAL_CAN_AddTxMessage>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	bf14      	ite	ne
 8000c66:	2301      	movne	r3, #1
 8000c68:	2300      	moveq	r3, #0
 8000c6a:	b2db      	uxtb	r3, r3
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3728      	adds	r7, #40	@ 0x28
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000170 	.word	0x20000170

08000c78 <Can_Init>:


void Can_Init(const Can_ConfigType *Config) {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
    /* Do initial configuration of layer here */
	hcan.Instance = CAN;
 8000c80:	4b17      	ldr	r3, [pc, #92]	@ (8000ce0 <Can_Init+0x68>)
 8000c82:	4a18      	ldr	r2, [pc, #96]	@ (8000ce4 <Can_Init+0x6c>)
 8000c84:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 12;
 8000c86:	4b16      	ldr	r3, [pc, #88]	@ (8000ce0 <Can_Init+0x68>)
 8000c88:	220c      	movs	r2, #12
 8000c8a:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8000c8c:	4b14      	ldr	r3, [pc, #80]	@ (8000ce0 <Can_Init+0x68>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c92:	4b13      	ldr	r3, [pc, #76]	@ (8000ce0 <Can_Init+0x68>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000c98:	4b11      	ldr	r3, [pc, #68]	@ (8000ce0 <Can_Init+0x68>)
 8000c9a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000c9e:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce0 <Can_Init+0x68>)
 8000ca2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000ca6:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8000ca8:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce0 <Can_Init+0x68>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8000cae:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce0 <Can_Init+0x68>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8000cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce0 <Can_Init+0x68>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8000cba:	4b09      	ldr	r3, [pc, #36]	@ (8000ce0 <Can_Init+0x68>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8000cc0:	4b07      	ldr	r3, [pc, #28]	@ (8000ce0 <Can_Init+0x68>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8000cc6:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <Can_Init+0x68>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	775a      	strb	r2, [r3, #29]

	HAL_CAN_Start(&hcan);
 8000ccc:	4804      	ldr	r0, [pc, #16]	@ (8000ce0 <Can_Init+0x68>)
 8000cce:	f000 fb1b 	bl	8001308 <HAL_CAN_Start>

	Can_state = CAN_READY;
 8000cd2:	4b05      	ldr	r3, [pc, #20]	@ (8000ce8 <Can_Init+0x70>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	701a      	strb	r2, [r3, #0]

}
 8000cd8:	bf00      	nop
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000170 	.word	0x20000170
 8000ce4:	40006400 	.word	0x40006400
 8000ce8:	20000198 	.word	0x20000198

08000cec <HAL_SPI_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t pData[8];
uint8_t recv_flag = 0;
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
	if (recv_flag == 0) {
 8000cf4:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <HAL_SPI_RxCpltCallback+0x24>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d102      	bne.n	8000d02 <HAL_SPI_RxCpltCallback+0x16>
		recv_flag = 1;
 8000cfc:	4b04      	ldr	r3, [pc, #16]	@ (8000d10 <HAL_SPI_RxCpltCallback+0x24>)
 8000cfe:	2201      	movs	r2, #1
 8000d00:	701a      	strb	r2, [r3, #0]
	}
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	20000290 	.word	0x20000290

08000d14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d1a:	f000 fa8f 	bl	800123c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d1e:	f000 f833 	bl	8000d88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d22:	f000 f8f7 	bl	8000f14 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d26:	f000 f8c5 	bl	8000eb4 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000d2a:	f000 f889 	bl	8000e40 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  Com_Init(&ComConfiguration);
 8000d2e:	4812      	ldr	r0, [pc, #72]	@ (8000d78 <main+0x64>)
 8000d30:	f7ff fa50 	bl	80001d4 <Com_Init>
  Can_ConfigType CanConfig;
  Can_Init(&CanConfig);
 8000d34:	f107 0008 	add.w	r0, r7, #8
 8000d38:	f7ff ff9e 	bl	8000c78 <Can_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_SPI_Receive_IT(&hspi2, pData, 8);
 8000d3c:	2208      	movs	r2, #8
 8000d3e:	490f      	ldr	r1, [pc, #60]	@ (8000d7c <main+0x68>)
 8000d40:	480f      	ldr	r0, [pc, #60]	@ (8000d80 <main+0x6c>)
 8000d42:	f002 fc3d 	bl	80035c0 <HAL_SPI_Receive_IT>
	  if (recv_flag == 1) {
 8000d46:	4b0f      	ldr	r3, [pc, #60]	@ (8000d84 <main+0x70>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d1f6      	bne.n	8000d3c <main+0x28>
		  float speed, dist;
		  memcpy(&speed, &pData, 4);
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d7c <main+0x68>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	607b      	str	r3, [r7, #4]
		  memcpy(&dist, &pData[4], 4);
 8000d54:	4b09      	ldr	r3, [pc, #36]	@ (8000d7c <main+0x68>)
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	603b      	str	r3, [r7, #0]
		  Com_SendSignal(COM_SIGNAL_ID_SPEEDSIGNAL, &speed);
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	2000      	movs	r0, #0
 8000d60:	f7ff fb66 	bl	8000430 <Com_SendSignal>
		  Com_SendSignal(COM_SIGNAL_ID_DISTSIGNAL, &dist);
 8000d64:	463b      	mov	r3, r7
 8000d66:	4619      	mov	r1, r3
 8000d68:	2001      	movs	r0, #1
 8000d6a:	f7ff fb61 	bl	8000430 <Com_SendSignal>
		  recv_flag = 0;
 8000d6e:	4b05      	ldr	r3, [pc, #20]	@ (8000d84 <main+0x70>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	701a      	strb	r2, [r3, #0]
	  HAL_SPI_Receive_IT(&hspi2, pData, 8);
 8000d74:	e7e2      	b.n	8000d3c <main+0x28>
 8000d76:	bf00      	nop
 8000d78:	08004b04 	.word	0x08004b04
 8000d7c:	20000288 	.word	0x20000288
 8000d80:	2000019c 	.word	0x2000019c
 8000d84:	20000290 	.word	0x20000290

08000d88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b0a6      	sub	sp, #152	@ 0x98
 8000d8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d8e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000d92:	2228      	movs	r2, #40	@ 0x28
 8000d94:	2100      	movs	r1, #0
 8000d96:	4618      	mov	r0, r3
 8000d98:	f003 fe5d 	bl	8004a56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d9c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dac:	1d3b      	adds	r3, r7, #4
 8000dae:	2258      	movs	r2, #88	@ 0x58
 8000db0:	2100      	movs	r1, #0
 8000db2:	4618      	mov	r0, r3
 8000db4:	f003 fe4f 	bl	8004a56 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000db8:	2301      	movs	r3, #1
 8000dba:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dc6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000dca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 8000dce:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000dd2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ddc:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000de0:	4618      	mov	r0, r3
 8000de2:	f000 fe97 	bl	8001b14 <HAL_RCC_OscConfig>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000dec:	f000 f8f8 	bl	8000fe0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df0:	230f      	movs	r3, #15
 8000df2:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000df4:	2302      	movs	r3, #2
 8000df6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dfc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e00:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e02:	2300      	movs	r3, #0
 8000e04:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e06:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000e0a:	2102      	movs	r1, #2
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f001 fed5 	bl	8002bbc <HAL_RCC_ClockConfig>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e18:	f000 f8e2 	bl	8000fe0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e20:	2300      	movs	r3, #0
 8000e22:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	4618      	mov	r0, r3
 8000e28:	f002 f900 	bl	800302c <HAL_RCCEx_PeriphCLKConfig>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000e32:	f000 f8d5 	bl	8000fe0 <Error_Handler>
  }
}
 8000e36:	bf00      	nop
 8000e38:	3798      	adds	r7, #152	@ 0x98
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
	...

08000e40 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000e44:	4b19      	ldr	r3, [pc, #100]	@ (8000eac <MX_SPI2_Init+0x6c>)
 8000e46:	4a1a      	ldr	r2, [pc, #104]	@ (8000eb0 <MX_SPI2_Init+0x70>)
 8000e48:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000e4a:	4b18      	ldr	r3, [pc, #96]	@ (8000eac <MX_SPI2_Init+0x6c>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000e50:	4b16      	ldr	r3, [pc, #88]	@ (8000eac <MX_SPI2_Init+0x6c>)
 8000e52:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e56:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e58:	4b14      	ldr	r3, [pc, #80]	@ (8000eac <MX_SPI2_Init+0x6c>)
 8000e5a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000e5e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000e60:	4b12      	ldr	r3, [pc, #72]	@ (8000eac <MX_SPI2_Init+0x6c>)
 8000e62:	2202      	movs	r2, #2
 8000e64:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e66:	4b11      	ldr	r3, [pc, #68]	@ (8000eac <MX_SPI2_Init+0x6c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8000e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000eac <MX_SPI2_Init+0x6c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8000e72:	4b0e      	ldr	r3, [pc, #56]	@ (8000eac <MX_SPI2_Init+0x6c>)
 8000e74:	2280      	movs	r2, #128	@ 0x80
 8000e76:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e78:	4b0c      	ldr	r3, [pc, #48]	@ (8000eac <MX_SPI2_Init+0x6c>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000eac <MX_SPI2_Init+0x6c>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000e84:	4b09      	ldr	r3, [pc, #36]	@ (8000eac <MX_SPI2_Init+0x6c>)
 8000e86:	2207      	movs	r2, #7
 8000e88:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e8a:	4b08      	ldr	r3, [pc, #32]	@ (8000eac <MX_SPI2_Init+0x6c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000e90:	4b06      	ldr	r3, [pc, #24]	@ (8000eac <MX_SPI2_Init+0x6c>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e96:	4805      	ldr	r0, [pc, #20]	@ (8000eac <MX_SPI2_Init+0x6c>)
 8000e98:	f002 fae6 	bl	8003468 <HAL_SPI_Init>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 8000ea2:	f000 f89d 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	2000019c 	.word	0x2000019c
 8000eb0:	40003800 	.word	0x40003800

08000eb4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000eb8:	4b14      	ldr	r3, [pc, #80]	@ (8000f0c <MX_USART2_UART_Init+0x58>)
 8000eba:	4a15      	ldr	r2, [pc, #84]	@ (8000f10 <MX_USART2_UART_Init+0x5c>)
 8000ebc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000ebe:	4b13      	ldr	r3, [pc, #76]	@ (8000f0c <MX_USART2_UART_Init+0x58>)
 8000ec0:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000ec4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ec6:	4b11      	ldr	r3, [pc, #68]	@ (8000f0c <MX_USART2_UART_Init+0x58>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ecc:	4b0f      	ldr	r3, [pc, #60]	@ (8000f0c <MX_USART2_UART_Init+0x58>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8000f0c <MX_USART2_UART_Init+0x58>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f0c <MX_USART2_UART_Init+0x58>)
 8000eda:	220c      	movs	r2, #12
 8000edc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ede:	4b0b      	ldr	r3, [pc, #44]	@ (8000f0c <MX_USART2_UART_Init+0x58>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee4:	4b09      	ldr	r3, [pc, #36]	@ (8000f0c <MX_USART2_UART_Init+0x58>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eea:	4b08      	ldr	r3, [pc, #32]	@ (8000f0c <MX_USART2_UART_Init+0x58>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	@ (8000f0c <MX_USART2_UART_Init+0x58>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ef6:	4805      	ldr	r0, [pc, #20]	@ (8000f0c <MX_USART2_UART_Init+0x58>)
 8000ef8:	f003 f966 	bl	80041c8 <HAL_UART_Init>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f02:	f000 f86d 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000200 	.word	0x20000200
 8000f10:	40004400 	.word	0x40004400

08000f14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08a      	sub	sp, #40	@ 0x28
 8000f18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1a:	f107 0314 	add.w	r3, r7, #20
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
 8000f26:	60da      	str	r2, [r3, #12]
 8000f28:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f2a:	4b2b      	ldr	r3, [pc, #172]	@ (8000fd8 <MX_GPIO_Init+0xc4>)
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	4a2a      	ldr	r2, [pc, #168]	@ (8000fd8 <MX_GPIO_Init+0xc4>)
 8000f30:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000f34:	6153      	str	r3, [r2, #20]
 8000f36:	4b28      	ldr	r3, [pc, #160]	@ (8000fd8 <MX_GPIO_Init+0xc4>)
 8000f38:	695b      	ldr	r3, [r3, #20]
 8000f3a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000f3e:	613b      	str	r3, [r7, #16]
 8000f40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f42:	4b25      	ldr	r3, [pc, #148]	@ (8000fd8 <MX_GPIO_Init+0xc4>)
 8000f44:	695b      	ldr	r3, [r3, #20]
 8000f46:	4a24      	ldr	r2, [pc, #144]	@ (8000fd8 <MX_GPIO_Init+0xc4>)
 8000f48:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f4c:	6153      	str	r3, [r2, #20]
 8000f4e:	4b22      	ldr	r3, [pc, #136]	@ (8000fd8 <MX_GPIO_Init+0xc4>)
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5a:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd8 <MX_GPIO_Init+0xc4>)
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	4a1e      	ldr	r2, [pc, #120]	@ (8000fd8 <MX_GPIO_Init+0xc4>)
 8000f60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f64:	6153      	str	r3, [r2, #20]
 8000f66:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd8 <MX_GPIO_Init+0xc4>)
 8000f68:	695b      	ldr	r3, [r3, #20]
 8000f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f72:	4b19      	ldr	r3, [pc, #100]	@ (8000fd8 <MX_GPIO_Init+0xc4>)
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	4a18      	ldr	r2, [pc, #96]	@ (8000fd8 <MX_GPIO_Init+0xc4>)
 8000f78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f7c:	6153      	str	r3, [r2, #20]
 8000f7e:	4b16      	ldr	r3, [pc, #88]	@ (8000fd8 <MX_GPIO_Init+0xc4>)
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2120      	movs	r1, #32
 8000f8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f92:	f000 fda7 	bl	8001ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f96:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f9c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000fa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	4619      	mov	r1, r3
 8000fac:	480b      	ldr	r0, [pc, #44]	@ (8000fdc <MX_GPIO_Init+0xc8>)
 8000fae:	f000 fc0f 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fb2:	2320      	movs	r3, #32
 8000fb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fc2:	f107 0314 	add.w	r3, r7, #20
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fcc:	f000 fc00 	bl	80017d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fd0:	bf00      	nop
 8000fd2:	3728      	adds	r7, #40	@ 0x28
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	48000800 	.word	0x48000800

08000fe0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe4:	b672      	cpsid	i
}
 8000fe6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <Error_Handler+0x8>

08000fec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff2:	4b0f      	ldr	r3, [pc, #60]	@ (8001030 <HAL_MspInit+0x44>)
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	4a0e      	ldr	r2, [pc, #56]	@ (8001030 <HAL_MspInit+0x44>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6193      	str	r3, [r2, #24]
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	@ (8001030 <HAL_MspInit+0x44>)
 8001000:	699b      	ldr	r3, [r3, #24]
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800100a:	4b09      	ldr	r3, [pc, #36]	@ (8001030 <HAL_MspInit+0x44>)
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	4a08      	ldr	r2, [pc, #32]	@ (8001030 <HAL_MspInit+0x44>)
 8001010:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001014:	61d3      	str	r3, [r2, #28]
 8001016:	4b06      	ldr	r3, [pc, #24]	@ (8001030 <HAL_MspInit+0x44>)
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800101e:	603b      	str	r3, [r7, #0]
 8001020:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001022:	2007      	movs	r0, #7
 8001024:	f000 fb54 	bl	80016d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40021000 	.word	0x40021000

08001034 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08a      	sub	sp, #40	@ 0x28
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a1b      	ldr	r2, [pc, #108]	@ (80010c0 <HAL_SPI_MspInit+0x8c>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d130      	bne.n	80010b8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001056:	4b1b      	ldr	r3, [pc, #108]	@ (80010c4 <HAL_SPI_MspInit+0x90>)
 8001058:	69db      	ldr	r3, [r3, #28]
 800105a:	4a1a      	ldr	r2, [pc, #104]	@ (80010c4 <HAL_SPI_MspInit+0x90>)
 800105c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001060:	61d3      	str	r3, [r2, #28]
 8001062:	4b18      	ldr	r3, [pc, #96]	@ (80010c4 <HAL_SPI_MspInit+0x90>)
 8001064:	69db      	ldr	r3, [r3, #28]
 8001066:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800106a:	613b      	str	r3, [r7, #16]
 800106c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800106e:	4b15      	ldr	r3, [pc, #84]	@ (80010c4 <HAL_SPI_MspInit+0x90>)
 8001070:	695b      	ldr	r3, [r3, #20]
 8001072:	4a14      	ldr	r2, [pc, #80]	@ (80010c4 <HAL_SPI_MspInit+0x90>)
 8001074:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001078:	6153      	str	r3, [r2, #20]
 800107a:	4b12      	ldr	r3, [pc, #72]	@ (80010c4 <HAL_SPI_MspInit+0x90>)
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001086:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 800108a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108c:	2302      	movs	r3, #2
 800108e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001094:	2303      	movs	r3, #3
 8001096:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001098:	2305      	movs	r3, #5
 800109a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	4619      	mov	r1, r3
 80010a2:	4809      	ldr	r0, [pc, #36]	@ (80010c8 <HAL_SPI_MspInit+0x94>)
 80010a4:	f000 fb94 	bl	80017d0 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80010a8:	2200      	movs	r2, #0
 80010aa:	2100      	movs	r1, #0
 80010ac:	2024      	movs	r0, #36	@ 0x24
 80010ae:	f000 fb1a 	bl	80016e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80010b2:	2024      	movs	r0, #36	@ 0x24
 80010b4:	f000 fb33 	bl	800171e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80010b8:	bf00      	nop
 80010ba:	3728      	adds	r7, #40	@ 0x28
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40003800 	.word	0x40003800
 80010c4:	40021000 	.word	0x40021000
 80010c8:	48000400 	.word	0x48000400

080010cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	@ 0x28
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 0314 	add.w	r3, r7, #20
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a17      	ldr	r2, [pc, #92]	@ (8001148 <HAL_UART_MspInit+0x7c>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d128      	bne.n	8001140 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010ee:	4b17      	ldr	r3, [pc, #92]	@ (800114c <HAL_UART_MspInit+0x80>)
 80010f0:	69db      	ldr	r3, [r3, #28]
 80010f2:	4a16      	ldr	r2, [pc, #88]	@ (800114c <HAL_UART_MspInit+0x80>)
 80010f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010f8:	61d3      	str	r3, [r2, #28]
 80010fa:	4b14      	ldr	r3, [pc, #80]	@ (800114c <HAL_UART_MspInit+0x80>)
 80010fc:	69db      	ldr	r3, [r3, #28]
 80010fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001102:	613b      	str	r3, [r7, #16]
 8001104:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001106:	4b11      	ldr	r3, [pc, #68]	@ (800114c <HAL_UART_MspInit+0x80>)
 8001108:	695b      	ldr	r3, [r3, #20]
 800110a:	4a10      	ldr	r2, [pc, #64]	@ (800114c <HAL_UART_MspInit+0x80>)
 800110c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001110:	6153      	str	r3, [r2, #20]
 8001112:	4b0e      	ldr	r3, [pc, #56]	@ (800114c <HAL_UART_MspInit+0x80>)
 8001114:	695b      	ldr	r3, [r3, #20]
 8001116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800111e:	230c      	movs	r3, #12
 8001120:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001122:	2302      	movs	r3, #2
 8001124:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112a:	2300      	movs	r3, #0
 800112c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800112e:	2307      	movs	r3, #7
 8001130:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001132:	f107 0314 	add.w	r3, r7, #20
 8001136:	4619      	mov	r1, r3
 8001138:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800113c:	f000 fb48 	bl	80017d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001140:	bf00      	nop
 8001142:	3728      	adds	r7, #40	@ 0x28
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40004400 	.word	0x40004400
 800114c:	40021000 	.word	0x40021000

08001150 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001154:	bf00      	nop
 8001156:	e7fd      	b.n	8001154 <NMI_Handler+0x4>

08001158 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800115c:	bf00      	nop
 800115e:	e7fd      	b.n	800115c <HardFault_Handler+0x4>

08001160 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001164:	bf00      	nop
 8001166:	e7fd      	b.n	8001164 <MemManage_Handler+0x4>

08001168 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800116c:	bf00      	nop
 800116e:	e7fd      	b.n	800116c <BusFault_Handler+0x4>

08001170 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001174:	bf00      	nop
 8001176:	e7fd      	b.n	8001174 <UsageFault_Handler+0x4>

08001178 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr

08001186 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001186:	b480      	push	{r7}
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011a6:	f000 f88f 	bl	80012c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80011b4:	4802      	ldr	r0, [pc, #8]	@ (80011c0 <SPI2_IRQHandler+0x10>)
 80011b6:	f002 fb63 	bl	8003880 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	2000019c 	.word	0x2000019c

080011c4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011c8:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <SystemInit+0x20>)
 80011ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011ce:	4a05      	ldr	r2, [pc, #20]	@ (80011e4 <SystemInit+0x20>)
 80011d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001220 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80011ec:	f7ff ffea 	bl	80011c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011f0:	480c      	ldr	r0, [pc, #48]	@ (8001224 <LoopForever+0x6>)
  ldr r1, =_edata
 80011f2:	490d      	ldr	r1, [pc, #52]	@ (8001228 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011f4:	4a0d      	ldr	r2, [pc, #52]	@ (800122c <LoopForever+0xe>)
  movs r3, #0
 80011f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f8:	e002      	b.n	8001200 <LoopCopyDataInit>

080011fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011fe:	3304      	adds	r3, #4

08001200 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001200:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001202:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001204:	d3f9      	bcc.n	80011fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001206:	4a0a      	ldr	r2, [pc, #40]	@ (8001230 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001208:	4c0a      	ldr	r4, [pc, #40]	@ (8001234 <LoopForever+0x16>)
  movs r3, #0
 800120a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800120c:	e001      	b.n	8001212 <LoopFillZerobss>

0800120e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800120e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001210:	3204      	adds	r2, #4

08001212 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001212:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001214:	d3fb      	bcc.n	800120e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001216:	f003 fc27 	bl	8004a68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800121a:	f7ff fd7b 	bl	8000d14 <main>

0800121e <LoopForever>:

LoopForever:
    b LoopForever
 800121e:	e7fe      	b.n	800121e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001220:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001224:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001228:	20000134 	.word	0x20000134
  ldr r2, =_sidata
 800122c:	08004b50 	.word	0x08004b50
  ldr r2, =_sbss
 8001230:	20000134 	.word	0x20000134
  ldr r4, =_ebss
 8001234:	20000298 	.word	0x20000298

08001238 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001238:	e7fe      	b.n	8001238 <ADC1_2_IRQHandler>
	...

0800123c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001240:	4b08      	ldr	r3, [pc, #32]	@ (8001264 <HAL_Init+0x28>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a07      	ldr	r2, [pc, #28]	@ (8001264 <HAL_Init+0x28>)
 8001246:	f043 0310 	orr.w	r3, r3, #16
 800124a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800124c:	2003      	movs	r0, #3
 800124e:	f000 fa3f 	bl	80016d0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001252:	2000      	movs	r0, #0
 8001254:	f000 f808 	bl	8001268 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001258:	f7ff fec8 	bl	8000fec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40022000 	.word	0x40022000

08001268 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001270:	4b12      	ldr	r3, [pc, #72]	@ (80012bc <HAL_InitTick+0x54>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4b12      	ldr	r3, [pc, #72]	@ (80012c0 <HAL_InitTick+0x58>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	4619      	mov	r1, r3
 800127a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800127e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001282:	fbb2 f3f3 	udiv	r3, r2, r3
 8001286:	4618      	mov	r0, r3
 8001288:	f000 fa57 	bl	800173a <HAL_SYSTICK_Config>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e00e      	b.n	80012b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2b0f      	cmp	r3, #15
 800129a:	d80a      	bhi.n	80012b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800129c:	2200      	movs	r2, #0
 800129e:	6879      	ldr	r1, [r7, #4]
 80012a0:	f04f 30ff 	mov.w	r0, #4294967295
 80012a4:	f000 fa1f 	bl	80016e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a8:	4a06      	ldr	r2, [pc, #24]	@ (80012c4 <HAL_InitTick+0x5c>)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80012ae:	2300      	movs	r3, #0
 80012b0:	e000      	b.n	80012b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000128 	.word	0x20000128
 80012c0:	20000130 	.word	0x20000130
 80012c4:	2000012c 	.word	0x2000012c

080012c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012cc:	4b06      	ldr	r3, [pc, #24]	@ (80012e8 <HAL_IncTick+0x20>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	461a      	mov	r2, r3
 80012d2:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <HAL_IncTick+0x24>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4413      	add	r3, r2
 80012d8:	4a04      	ldr	r2, [pc, #16]	@ (80012ec <HAL_IncTick+0x24>)
 80012da:	6013      	str	r3, [r2, #0]
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	20000130 	.word	0x20000130
 80012ec:	20000294 	.word	0x20000294

080012f0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  return uwTick;  
 80012f4:	4b03      	ldr	r3, [pc, #12]	@ (8001304 <HAL_GetTick+0x14>)
 80012f6:	681b      	ldr	r3, [r3, #0]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	20000294 	.word	0x20000294

08001308 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001316:	b2db      	uxtb	r3, r3
 8001318:	2b01      	cmp	r3, #1
 800131a:	d12e      	bne.n	800137a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2202      	movs	r2, #2
 8001320:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f022 0201 	bic.w	r2, r2, #1
 8001332:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001334:	f7ff ffdc 	bl	80012f0 <HAL_GetTick>
 8001338:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800133a:	e012      	b.n	8001362 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800133c:	f7ff ffd8 	bl	80012f0 <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b0a      	cmp	r3, #10
 8001348:	d90b      	bls.n	8001362 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800134e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2205      	movs	r2, #5
 800135a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e012      	b.n	8001388 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	2b00      	cmp	r3, #0
 800136e:	d1e5      	bne.n	800133c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001376:	2300      	movs	r3, #0
 8001378:	e006      	b.n	8001388 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800137e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
  }
}
 8001388:	4618      	mov	r0, r3
 800138a:	3710      	adds	r7, #16
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001390:	b480      	push	{r7}
 8001392:	b089      	sub	sp, #36	@ 0x24
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
 800139c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013a4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80013ae:	7ffb      	ldrb	r3, [r7, #31]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d003      	beq.n	80013bc <HAL_CAN_AddTxMessage+0x2c>
 80013b4:	7ffb      	ldrb	r3, [r7, #31]
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	f040 80ad 	bne.w	8001516 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d10a      	bne.n	80013dc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d105      	bne.n	80013dc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f000 8095 	beq.w	8001506 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	0e1b      	lsrs	r3, r3, #24
 80013e0:	f003 0303 	and.w	r3, r3, #3
 80013e4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80013e6:	2201      	movs	r2, #1
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	409a      	lsls	r2, r3
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d10d      	bne.n	8001414 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001402:	68f9      	ldr	r1, [r7, #12]
 8001404:	6809      	ldr	r1, [r1, #0]
 8001406:	431a      	orrs	r2, r3
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	3318      	adds	r3, #24
 800140c:	011b      	lsls	r3, r3, #4
 800140e:	440b      	add	r3, r1
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	e00f      	b.n	8001434 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800141e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001424:	68f9      	ldr	r1, [r7, #12]
 8001426:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001428:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	3318      	adds	r3, #24
 800142e:	011b      	lsls	r3, r3, #4
 8001430:	440b      	add	r3, r1
 8001432:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	6819      	ldr	r1, [r3, #0]
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	691a      	ldr	r2, [r3, #16]
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	3318      	adds	r3, #24
 8001440:	011b      	lsls	r3, r3, #4
 8001442:	440b      	add	r3, r1
 8001444:	3304      	adds	r3, #4
 8001446:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	7d1b      	ldrb	r3, [r3, #20]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d111      	bne.n	8001474 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	3318      	adds	r3, #24
 8001458:	011b      	lsls	r3, r3, #4
 800145a:	4413      	add	r3, r2
 800145c:	3304      	adds	r3, #4
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	68fa      	ldr	r2, [r7, #12]
 8001462:	6811      	ldr	r1, [r2, #0]
 8001464:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	3318      	adds	r3, #24
 800146c:	011b      	lsls	r3, r3, #4
 800146e:	440b      	add	r3, r1
 8001470:	3304      	adds	r3, #4
 8001472:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3307      	adds	r3, #7
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	061a      	lsls	r2, r3, #24
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3306      	adds	r3, #6
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	041b      	lsls	r3, r3, #16
 8001484:	431a      	orrs	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	3305      	adds	r3, #5
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	021b      	lsls	r3, r3, #8
 800148e:	4313      	orrs	r3, r2
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	3204      	adds	r2, #4
 8001494:	7812      	ldrb	r2, [r2, #0]
 8001496:	4610      	mov	r0, r2
 8001498:	68fa      	ldr	r2, [r7, #12]
 800149a:	6811      	ldr	r1, [r2, #0]
 800149c:	ea43 0200 	orr.w	r2, r3, r0
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	011b      	lsls	r3, r3, #4
 80014a4:	440b      	add	r3, r1
 80014a6:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80014aa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3303      	adds	r3, #3
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	061a      	lsls	r2, r3, #24
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3302      	adds	r3, #2
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	041b      	lsls	r3, r3, #16
 80014bc:	431a      	orrs	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	3301      	adds	r3, #1
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	021b      	lsls	r3, r3, #8
 80014c6:	4313      	orrs	r3, r2
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	7812      	ldrb	r2, [r2, #0]
 80014cc:	4610      	mov	r0, r2
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	6811      	ldr	r1, [r2, #0]
 80014d2:	ea43 0200 	orr.w	r2, r3, r0
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	011b      	lsls	r3, r3, #4
 80014da:	440b      	add	r3, r1
 80014dc:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80014e0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	3318      	adds	r3, #24
 80014ea:	011b      	lsls	r3, r3, #4
 80014ec:	4413      	add	r3, r2
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	68fa      	ldr	r2, [r7, #12]
 80014f2:	6811      	ldr	r1, [r2, #0]
 80014f4:	f043 0201 	orr.w	r2, r3, #1
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	3318      	adds	r3, #24
 80014fc:	011b      	lsls	r3, r3, #4
 80014fe:	440b      	add	r3, r1
 8001500:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001502:	2300      	movs	r3, #0
 8001504:	e00e      	b.n	8001524 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800150a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e006      	b.n	8001524 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800151a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
  }
}
 8001524:	4618      	mov	r0, r3
 8001526:	3724      	adds	r7, #36	@ 0x24
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001540:	4b0c      	ldr	r3, [pc, #48]	@ (8001574 <__NVIC_SetPriorityGrouping+0x44>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001546:	68ba      	ldr	r2, [r7, #8]
 8001548:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800154c:	4013      	ands	r3, r2
 800154e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001558:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800155c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001560:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001562:	4a04      	ldr	r2, [pc, #16]	@ (8001574 <__NVIC_SetPriorityGrouping+0x44>)
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	60d3      	str	r3, [r2, #12]
}
 8001568:	bf00      	nop
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800157c:	4b04      	ldr	r3, [pc, #16]	@ (8001590 <__NVIC_GetPriorityGrouping+0x18>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	0a1b      	lsrs	r3, r3, #8
 8001582:	f003 0307 	and.w	r3, r3, #7
}
 8001586:	4618      	mov	r0, r3
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800159e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	db0b      	blt.n	80015be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	f003 021f 	and.w	r2, r3, #31
 80015ac:	4907      	ldr	r1, [pc, #28]	@ (80015cc <__NVIC_EnableIRQ+0x38>)
 80015ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b2:	095b      	lsrs	r3, r3, #5
 80015b4:	2001      	movs	r0, #1
 80015b6:	fa00 f202 	lsl.w	r2, r0, r2
 80015ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	e000e100 	.word	0xe000e100

080015d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	6039      	str	r1, [r7, #0]
 80015da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	db0a      	blt.n	80015fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	b2da      	uxtb	r2, r3
 80015e8:	490c      	ldr	r1, [pc, #48]	@ (800161c <__NVIC_SetPriority+0x4c>)
 80015ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ee:	0112      	lsls	r2, r2, #4
 80015f0:	b2d2      	uxtb	r2, r2
 80015f2:	440b      	add	r3, r1
 80015f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015f8:	e00a      	b.n	8001610 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	b2da      	uxtb	r2, r3
 80015fe:	4908      	ldr	r1, [pc, #32]	@ (8001620 <__NVIC_SetPriority+0x50>)
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	f003 030f 	and.w	r3, r3, #15
 8001606:	3b04      	subs	r3, #4
 8001608:	0112      	lsls	r2, r2, #4
 800160a:	b2d2      	uxtb	r2, r2
 800160c:	440b      	add	r3, r1
 800160e:	761a      	strb	r2, [r3, #24]
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	e000e100 	.word	0xe000e100
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001624:	b480      	push	{r7}
 8001626:	b089      	sub	sp, #36	@ 0x24
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f003 0307 	and.w	r3, r3, #7
 8001636:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	f1c3 0307 	rsb	r3, r3, #7
 800163e:	2b04      	cmp	r3, #4
 8001640:	bf28      	it	cs
 8001642:	2304      	movcs	r3, #4
 8001644:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	3304      	adds	r3, #4
 800164a:	2b06      	cmp	r3, #6
 800164c:	d902      	bls.n	8001654 <NVIC_EncodePriority+0x30>
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	3b03      	subs	r3, #3
 8001652:	e000      	b.n	8001656 <NVIC_EncodePriority+0x32>
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001658:	f04f 32ff 	mov.w	r2, #4294967295
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	43da      	mvns	r2, r3
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	401a      	ands	r2, r3
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800166c:	f04f 31ff 	mov.w	r1, #4294967295
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	fa01 f303 	lsl.w	r3, r1, r3
 8001676:	43d9      	mvns	r1, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800167c:	4313      	orrs	r3, r2
         );
}
 800167e:	4618      	mov	r0, r3
 8001680:	3724      	adds	r7, #36	@ 0x24
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
	...

0800168c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3b01      	subs	r3, #1
 8001698:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800169c:	d301      	bcc.n	80016a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800169e:	2301      	movs	r3, #1
 80016a0:	e00f      	b.n	80016c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016a2:	4a0a      	ldr	r2, [pc, #40]	@ (80016cc <SysTick_Config+0x40>)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016aa:	210f      	movs	r1, #15
 80016ac:	f04f 30ff 	mov.w	r0, #4294967295
 80016b0:	f7ff ff8e 	bl	80015d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016b4:	4b05      	ldr	r3, [pc, #20]	@ (80016cc <SysTick_Config+0x40>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ba:	4b04      	ldr	r3, [pc, #16]	@ (80016cc <SysTick_Config+0x40>)
 80016bc:	2207      	movs	r2, #7
 80016be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	e000e010 	.word	0xe000e010

080016d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f7ff ff29 	bl	8001530 <__NVIC_SetPriorityGrouping>
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b086      	sub	sp, #24
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	4603      	mov	r3, r0
 80016ee:	60b9      	str	r1, [r7, #8]
 80016f0:	607a      	str	r2, [r7, #4]
 80016f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016f8:	f7ff ff3e 	bl	8001578 <__NVIC_GetPriorityGrouping>
 80016fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	68b9      	ldr	r1, [r7, #8]
 8001702:	6978      	ldr	r0, [r7, #20]
 8001704:	f7ff ff8e 	bl	8001624 <NVIC_EncodePriority>
 8001708:	4602      	mov	r2, r0
 800170a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800170e:	4611      	mov	r1, r2
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff ff5d 	bl	80015d0 <__NVIC_SetPriority>
}
 8001716:	bf00      	nop
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b082      	sub	sp, #8
 8001722:	af00      	add	r7, sp, #0
 8001724:	4603      	mov	r3, r0
 8001726:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff ff31 	bl	8001594 <__NVIC_EnableIRQ>
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b082      	sub	sp, #8
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff ffa2 	bl	800168c <SysTick_Config>
 8001748:	4603      	mov	r3, r0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001752:	b580      	push	{r7, lr}
 8001754:	b084      	sub	sp, #16
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800175a:	2300      	movs	r3, #0
 800175c:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001764:	2b02      	cmp	r3, #2
 8001766:	d005      	beq.n	8001774 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2204      	movs	r2, #4
 800176c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	73fb      	strb	r3, [r7, #15]
 8001772:	e027      	b.n	80017c4 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f022 020e 	bic.w	r2, r2, #14
 8001782:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f022 0201 	bic.w	r2, r2, #1
 8001792:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800179c:	2101      	movs	r1, #1
 800179e:	fa01 f202 	lsl.w	r2, r1, r2
 80017a2:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2201      	movs	r2, #1
 80017a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d003      	beq.n	80017c4 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	4798      	blx	r3
    } 
  }
  return status;
 80017c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
	...

080017d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b087      	sub	sp, #28
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017da:	2300      	movs	r3, #0
 80017dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017de:	e160      	b.n	8001aa2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	2101      	movs	r1, #1
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	fa01 f303 	lsl.w	r3, r1, r3
 80017ec:	4013      	ands	r3, r2
 80017ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f000 8152 	beq.w	8001a9c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 0303 	and.w	r3, r3, #3
 8001800:	2b01      	cmp	r3, #1
 8001802:	d005      	beq.n	8001810 <HAL_GPIO_Init+0x40>
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 0303 	and.w	r3, r3, #3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d130      	bne.n	8001872 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	2203      	movs	r2, #3
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	4013      	ands	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	68da      	ldr	r2, [r3, #12]
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	4313      	orrs	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001846:	2201      	movs	r2, #1
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	43db      	mvns	r3, r3
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	4013      	ands	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	091b      	lsrs	r3, r3, #4
 800185c:	f003 0201 	and.w	r2, r3, #1
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	4313      	orrs	r3, r2
 800186a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f003 0303 	and.w	r3, r3, #3
 800187a:	2b03      	cmp	r3, #3
 800187c:	d017      	beq.n	80018ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	2203      	movs	r2, #3
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43db      	mvns	r3, r3
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	4013      	ands	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f003 0303 	and.w	r3, r3, #3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d123      	bne.n	8001902 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	08da      	lsrs	r2, r3, #3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	3208      	adds	r2, #8
 80018c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	220f      	movs	r2, #15
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43db      	mvns	r3, r3
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	4013      	ands	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	691a      	ldr	r2, [r3, #16]
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	08da      	lsrs	r2, r3, #3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3208      	adds	r2, #8
 80018fc:	6939      	ldr	r1, [r7, #16]
 80018fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	2203      	movs	r2, #3
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43db      	mvns	r3, r3
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	4013      	ands	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f003 0203 	and.w	r2, r3, #3
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	4313      	orrs	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800193e:	2b00      	cmp	r3, #0
 8001940:	f000 80ac 	beq.w	8001a9c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001944:	4b5e      	ldr	r3, [pc, #376]	@ (8001ac0 <HAL_GPIO_Init+0x2f0>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	4a5d      	ldr	r2, [pc, #372]	@ (8001ac0 <HAL_GPIO_Init+0x2f0>)
 800194a:	f043 0301 	orr.w	r3, r3, #1
 800194e:	6193      	str	r3, [r2, #24]
 8001950:	4b5b      	ldr	r3, [pc, #364]	@ (8001ac0 <HAL_GPIO_Init+0x2f0>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800195c:	4a59      	ldr	r2, [pc, #356]	@ (8001ac4 <HAL_GPIO_Init+0x2f4>)
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	089b      	lsrs	r3, r3, #2
 8001962:	3302      	adds	r3, #2
 8001964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001968:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	f003 0303 	and.w	r3, r3, #3
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	220f      	movs	r2, #15
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	4013      	ands	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001986:	d025      	beq.n	80019d4 <HAL_GPIO_Init+0x204>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a4f      	ldr	r2, [pc, #316]	@ (8001ac8 <HAL_GPIO_Init+0x2f8>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d01f      	beq.n	80019d0 <HAL_GPIO_Init+0x200>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a4e      	ldr	r2, [pc, #312]	@ (8001acc <HAL_GPIO_Init+0x2fc>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d019      	beq.n	80019cc <HAL_GPIO_Init+0x1fc>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a4d      	ldr	r2, [pc, #308]	@ (8001ad0 <HAL_GPIO_Init+0x300>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d013      	beq.n	80019c8 <HAL_GPIO_Init+0x1f8>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a4c      	ldr	r2, [pc, #304]	@ (8001ad4 <HAL_GPIO_Init+0x304>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d00d      	beq.n	80019c4 <HAL_GPIO_Init+0x1f4>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a4b      	ldr	r2, [pc, #300]	@ (8001ad8 <HAL_GPIO_Init+0x308>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d007      	beq.n	80019c0 <HAL_GPIO_Init+0x1f0>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a4a      	ldr	r2, [pc, #296]	@ (8001adc <HAL_GPIO_Init+0x30c>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d101      	bne.n	80019bc <HAL_GPIO_Init+0x1ec>
 80019b8:	2306      	movs	r3, #6
 80019ba:	e00c      	b.n	80019d6 <HAL_GPIO_Init+0x206>
 80019bc:	2307      	movs	r3, #7
 80019be:	e00a      	b.n	80019d6 <HAL_GPIO_Init+0x206>
 80019c0:	2305      	movs	r3, #5
 80019c2:	e008      	b.n	80019d6 <HAL_GPIO_Init+0x206>
 80019c4:	2304      	movs	r3, #4
 80019c6:	e006      	b.n	80019d6 <HAL_GPIO_Init+0x206>
 80019c8:	2303      	movs	r3, #3
 80019ca:	e004      	b.n	80019d6 <HAL_GPIO_Init+0x206>
 80019cc:	2302      	movs	r3, #2
 80019ce:	e002      	b.n	80019d6 <HAL_GPIO_Init+0x206>
 80019d0:	2301      	movs	r3, #1
 80019d2:	e000      	b.n	80019d6 <HAL_GPIO_Init+0x206>
 80019d4:	2300      	movs	r3, #0
 80019d6:	697a      	ldr	r2, [r7, #20]
 80019d8:	f002 0203 	and.w	r2, r2, #3
 80019dc:	0092      	lsls	r2, r2, #2
 80019de:	4093      	lsls	r3, r2
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019e6:	4937      	ldr	r1, [pc, #220]	@ (8001ac4 <HAL_GPIO_Init+0x2f4>)
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	089b      	lsrs	r3, r3, #2
 80019ec:	3302      	adds	r3, #2
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019f4:	4b3a      	ldr	r3, [pc, #232]	@ (8001ae0 <HAL_GPIO_Init+0x310>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	43db      	mvns	r3, r3
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	4013      	ands	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d003      	beq.n	8001a18 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a18:	4a31      	ldr	r2, [pc, #196]	@ (8001ae0 <HAL_GPIO_Init+0x310>)
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a1e:	4b30      	ldr	r3, [pc, #192]	@ (8001ae0 <HAL_GPIO_Init+0x310>)
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	43db      	mvns	r3, r3
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a42:	4a27      	ldr	r2, [pc, #156]	@ (8001ae0 <HAL_GPIO_Init+0x310>)
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a48:	4b25      	ldr	r3, [pc, #148]	@ (8001ae0 <HAL_GPIO_Init+0x310>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	43db      	mvns	r3, r3
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	4013      	ands	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d003      	beq.n	8001a6c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a6c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ae0 <HAL_GPIO_Init+0x310>)
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a72:	4b1b      	ldr	r3, [pc, #108]	@ (8001ae0 <HAL_GPIO_Init+0x310>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a96:	4a12      	ldr	r2, [pc, #72]	@ (8001ae0 <HAL_GPIO_Init+0x310>)
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f47f ae97 	bne.w	80017e0 <HAL_GPIO_Init+0x10>
  }
}
 8001ab2:	bf00      	nop
 8001ab4:	bf00      	nop
 8001ab6:	371c      	adds	r7, #28
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	40010000 	.word	0x40010000
 8001ac8:	48000400 	.word	0x48000400
 8001acc:	48000800 	.word	0x48000800
 8001ad0:	48000c00 	.word	0x48000c00
 8001ad4:	48001000 	.word	0x48001000
 8001ad8:	48001400 	.word	0x48001400
 8001adc:	48001800 	.word	0x48001800
 8001ae0:	40010400 	.word	0x40010400

08001ae4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	460b      	mov	r3, r1
 8001aee:	807b      	strh	r3, [r7, #2]
 8001af0:	4613      	mov	r3, r2
 8001af2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001af4:	787b      	ldrb	r3, [r7, #1]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001afa:	887a      	ldrh	r2, [r7, #2]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b00:	e002      	b.n	8001b08 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b02:	887a      	ldrh	r2, [r7, #2]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b20:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b24:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b2a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d102      	bne.n	8001b3a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	f001 b83a 	b.w	8002bae <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b3e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f000 816f 	beq.w	8001e2e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b50:	4bb5      	ldr	r3, [pc, #724]	@ (8001e28 <HAL_RCC_OscConfig+0x314>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 030c 	and.w	r3, r3, #12
 8001b58:	2b04      	cmp	r3, #4
 8001b5a:	d00c      	beq.n	8001b76 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b5c:	4bb2      	ldr	r3, [pc, #712]	@ (8001e28 <HAL_RCC_OscConfig+0x314>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 030c 	and.w	r3, r3, #12
 8001b64:	2b08      	cmp	r3, #8
 8001b66:	d15c      	bne.n	8001c22 <HAL_RCC_OscConfig+0x10e>
 8001b68:	4baf      	ldr	r3, [pc, #700]	@ (8001e28 <HAL_RCC_OscConfig+0x314>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001b70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b74:	d155      	bne.n	8001c22 <HAL_RCC_OscConfig+0x10e>
 8001b76:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b7a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001b82:	fa93 f3a3 	rbit	r3, r3
 8001b86:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b8a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b8e:	fab3 f383 	clz	r3, r3
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	095b      	lsrs	r3, r3, #5
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	f043 0301 	orr.w	r3, r3, #1
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d102      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x94>
 8001ba2:	4ba1      	ldr	r3, [pc, #644]	@ (8001e28 <HAL_RCC_OscConfig+0x314>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	e015      	b.n	8001bd4 <HAL_RCC_OscConfig+0xc0>
 8001ba8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bac:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8001bb4:	fa93 f3a3 	rbit	r3, r3
 8001bb8:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8001bbc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bc0:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001bc4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8001bc8:	fa93 f3a3 	rbit	r3, r3
 8001bcc:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001bd0:	4b95      	ldr	r3, [pc, #596]	@ (8001e28 <HAL_RCC_OscConfig+0x314>)
 8001bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001bd8:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8001bdc:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8001be0:	fa92 f2a2 	rbit	r2, r2
 8001be4:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8001be8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001bec:	fab2 f282 	clz	r2, r2
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	f042 0220 	orr.w	r2, r2, #32
 8001bf6:	b2d2      	uxtb	r2, r2
 8001bf8:	f002 021f 	and.w	r2, r2, #31
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	fa01 f202 	lsl.w	r2, r1, r2
 8001c02:	4013      	ands	r3, r2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f000 8111 	beq.w	8001e2c <HAL_RCC_OscConfig+0x318>
 8001c0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c0e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f040 8108 	bne.w	8001e2c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	f000 bfc6 	b.w	8002bae <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c26:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c32:	d106      	bne.n	8001c42 <HAL_RCC_OscConfig+0x12e>
 8001c34:	4b7c      	ldr	r3, [pc, #496]	@ (8001e28 <HAL_RCC_OscConfig+0x314>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a7b      	ldr	r2, [pc, #492]	@ (8001e28 <HAL_RCC_OscConfig+0x314>)
 8001c3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c3e:	6013      	str	r3, [r2, #0]
 8001c40:	e036      	b.n	8001cb0 <HAL_RCC_OscConfig+0x19c>
 8001c42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c46:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d10c      	bne.n	8001c6c <HAL_RCC_OscConfig+0x158>
 8001c52:	4b75      	ldr	r3, [pc, #468]	@ (8001e28 <HAL_RCC_OscConfig+0x314>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a74      	ldr	r2, [pc, #464]	@ (8001e28 <HAL_RCC_OscConfig+0x314>)
 8001c58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c5c:	6013      	str	r3, [r2, #0]
 8001c5e:	4b72      	ldr	r3, [pc, #456]	@ (8001e28 <HAL_RCC_OscConfig+0x314>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a71      	ldr	r2, [pc, #452]	@ (8001e28 <HAL_RCC_OscConfig+0x314>)
 8001c64:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	e021      	b.n	8001cb0 <HAL_RCC_OscConfig+0x19c>
 8001c6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c70:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c7c:	d10c      	bne.n	8001c98 <HAL_RCC_OscConfig+0x184>
 8001c7e:	4b6a      	ldr	r3, [pc, #424]	@ (8001e28 <HAL_RCC_OscConfig+0x314>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a69      	ldr	r2, [pc, #420]	@ (8001e28 <HAL_RCC_OscConfig+0x314>)
 8001c84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c88:	6013      	str	r3, [r2, #0]
 8001c8a:	4b67      	ldr	r3, [pc, #412]	@ (8001e28 <HAL_RCC_OscConfig+0x314>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a66      	ldr	r2, [pc, #408]	@ (8001e28 <HAL_RCC_OscConfig+0x314>)
 8001c90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c94:	6013      	str	r3, [r2, #0]
 8001c96:	e00b      	b.n	8001cb0 <HAL_RCC_OscConfig+0x19c>
 8001c98:	4b63      	ldr	r3, [pc, #396]	@ (8001e28 <HAL_RCC_OscConfig+0x314>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a62      	ldr	r2, [pc, #392]	@ (8001e28 <HAL_RCC_OscConfig+0x314>)
 8001c9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ca2:	6013      	str	r3, [r2, #0]
 8001ca4:	4b60      	ldr	r3, [pc, #384]	@ (8001e28 <HAL_RCC_OscConfig+0x314>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a5f      	ldr	r2, [pc, #380]	@ (8001e28 <HAL_RCC_OscConfig+0x314>)
 8001caa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cae:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cb0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cb4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d059      	beq.n	8001d74 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc0:	f7ff fb16 	bl	80012f0 <HAL_GetTick>
 8001cc4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc8:	e00a      	b.n	8001ce0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cca:	f7ff fb11 	bl	80012f0 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b64      	cmp	r3, #100	@ 0x64
 8001cd8:	d902      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	f000 bf67 	b.w	8002bae <HAL_RCC_OscConfig+0x109a>
 8001ce0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ce4:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001cec:	fa93 f3a3 	rbit	r3, r3
 8001cf0:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8001cf4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf8:	fab3 f383 	clz	r3, r3
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	095b      	lsrs	r3, r3, #5
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	f043 0301 	orr.w	r3, r3, #1
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d102      	bne.n	8001d12 <HAL_RCC_OscConfig+0x1fe>
 8001d0c:	4b46      	ldr	r3, [pc, #280]	@ (8001e28 <HAL_RCC_OscConfig+0x314>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	e015      	b.n	8001d3e <HAL_RCC_OscConfig+0x22a>
 8001d12:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d16:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001d1e:	fa93 f3a3 	rbit	r3, r3
 8001d22:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001d26:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d2a:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001d2e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8001d32:	fa93 f3a3 	rbit	r3, r3
 8001d36:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001d3a:	4b3b      	ldr	r3, [pc, #236]	@ (8001e28 <HAL_RCC_OscConfig+0x314>)
 8001d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d3e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d42:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8001d46:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8001d4a:	fa92 f2a2 	rbit	r2, r2
 8001d4e:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8001d52:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001d56:	fab2 f282 	clz	r2, r2
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	f042 0220 	orr.w	r2, r2, #32
 8001d60:	b2d2      	uxtb	r2, r2
 8001d62:	f002 021f 	and.w	r2, r2, #31
 8001d66:	2101      	movs	r1, #1
 8001d68:	fa01 f202 	lsl.w	r2, r1, r2
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d0ab      	beq.n	8001cca <HAL_RCC_OscConfig+0x1b6>
 8001d72:	e05c      	b.n	8001e2e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d74:	f7ff fabc 	bl	80012f0 <HAL_GetTick>
 8001d78:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d7c:	e00a      	b.n	8001d94 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d7e:	f7ff fab7 	bl	80012f0 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b64      	cmp	r3, #100	@ 0x64
 8001d8c:	d902      	bls.n	8001d94 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	f000 bf0d 	b.w	8002bae <HAL_RCC_OscConfig+0x109a>
 8001d94:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d98:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001da0:	fa93 f3a3 	rbit	r3, r3
 8001da4:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8001da8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dac:	fab3 f383 	clz	r3, r3
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	095b      	lsrs	r3, r3, #5
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d102      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x2b2>
 8001dc0:	4b19      	ldr	r3, [pc, #100]	@ (8001e28 <HAL_RCC_OscConfig+0x314>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	e015      	b.n	8001df2 <HAL_RCC_OscConfig+0x2de>
 8001dc6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001dca:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001dd2:	fa93 f3a3 	rbit	r3, r3
 8001dd6:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001dda:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001dde:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001de2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001de6:	fa93 f3a3 	rbit	r3, r3
 8001dea:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001dee:	4b0e      	ldr	r3, [pc, #56]	@ (8001e28 <HAL_RCC_OscConfig+0x314>)
 8001df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001df6:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8001dfa:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8001dfe:	fa92 f2a2 	rbit	r2, r2
 8001e02:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8001e06:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001e0a:	fab2 f282 	clz	r2, r2
 8001e0e:	b2d2      	uxtb	r2, r2
 8001e10:	f042 0220 	orr.w	r2, r2, #32
 8001e14:	b2d2      	uxtb	r2, r2
 8001e16:	f002 021f 	and.w	r2, r2, #31
 8001e1a:	2101      	movs	r1, #1
 8001e1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e20:	4013      	ands	r3, r2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1ab      	bne.n	8001d7e <HAL_RCC_OscConfig+0x26a>
 8001e26:	e002      	b.n	8001e2e <HAL_RCC_OscConfig+0x31a>
 8001e28:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e32:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	f000 817f 	beq.w	8002142 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e44:	4ba7      	ldr	r3, [pc, #668]	@ (80020e4 <HAL_RCC_OscConfig+0x5d0>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f003 030c 	and.w	r3, r3, #12
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d00c      	beq.n	8001e6a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e50:	4ba4      	ldr	r3, [pc, #656]	@ (80020e4 <HAL_RCC_OscConfig+0x5d0>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f003 030c 	and.w	r3, r3, #12
 8001e58:	2b08      	cmp	r3, #8
 8001e5a:	d173      	bne.n	8001f44 <HAL_RCC_OscConfig+0x430>
 8001e5c:	4ba1      	ldr	r3, [pc, #644]	@ (80020e4 <HAL_RCC_OscConfig+0x5d0>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001e64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e68:	d16c      	bne.n	8001f44 <HAL_RCC_OscConfig+0x430>
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e70:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001e74:	fa93 f3a3 	rbit	r3, r3
 8001e78:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8001e7c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e80:	fab3 f383 	clz	r3, r3
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	095b      	lsrs	r3, r3, #5
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	f043 0301 	orr.w	r3, r3, #1
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d102      	bne.n	8001e9a <HAL_RCC_OscConfig+0x386>
 8001e94:	4b93      	ldr	r3, [pc, #588]	@ (80020e4 <HAL_RCC_OscConfig+0x5d0>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	e013      	b.n	8001ec2 <HAL_RCC_OscConfig+0x3ae>
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea0:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001ea4:	fa93 f3a3 	rbit	r3, r3
 8001ea8:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001eac:	2302      	movs	r3, #2
 8001eae:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001eb2:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001eb6:	fa93 f3a3 	rbit	r3, r3
 8001eba:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001ebe:	4b89      	ldr	r3, [pc, #548]	@ (80020e4 <HAL_RCC_OscConfig+0x5d0>)
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001ec8:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001ecc:	fa92 f2a2 	rbit	r2, r2
 8001ed0:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8001ed4:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001ed8:	fab2 f282 	clz	r2, r2
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	f042 0220 	orr.w	r2, r2, #32
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	f002 021f 	and.w	r2, r2, #31
 8001ee8:	2101      	movs	r1, #1
 8001eea:	fa01 f202 	lsl.w	r2, r1, r2
 8001eee:	4013      	ands	r3, r2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d00a      	beq.n	8001f0a <HAL_RCC_OscConfig+0x3f6>
 8001ef4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ef8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d002      	beq.n	8001f0a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	f000 be52 	b.w	8002bae <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f0a:	4b76      	ldr	r3, [pc, #472]	@ (80020e4 <HAL_RCC_OscConfig+0x5d0>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f16:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	21f8      	movs	r1, #248	@ 0xf8
 8001f20:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f24:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8001f28:	fa91 f1a1 	rbit	r1, r1
 8001f2c:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8001f30:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001f34:	fab1 f181 	clz	r1, r1
 8001f38:	b2c9      	uxtb	r1, r1
 8001f3a:	408b      	lsls	r3, r1
 8001f3c:	4969      	ldr	r1, [pc, #420]	@ (80020e4 <HAL_RCC_OscConfig+0x5d0>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f42:	e0fe      	b.n	8002142 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f48:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f000 8088 	beq.w	8002066 <HAL_RCC_OscConfig+0x552>
 8001f56:	2301      	movs	r3, #1
 8001f58:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5c:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001f60:	fa93 f3a3 	rbit	r3, r3
 8001f64:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8001f68:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f6c:	fab3 f383 	clz	r3, r3
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001f76:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	2301      	movs	r3, #1
 8001f80:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f82:	f7ff f9b5 	bl	80012f0 <HAL_GetTick>
 8001f86:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f8a:	e00a      	b.n	8001fa2 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f8c:	f7ff f9b0 	bl	80012f0 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d902      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	f000 be06 	b.w	8002bae <HAL_RCC_OscConfig+0x109a>
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa8:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001fac:	fa93 f3a3 	rbit	r3, r3
 8001fb0:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8001fb4:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb8:	fab3 f383 	clz	r3, r3
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	095b      	lsrs	r3, r3, #5
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	f043 0301 	orr.w	r3, r3, #1
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d102      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x4be>
 8001fcc:	4b45      	ldr	r3, [pc, #276]	@ (80020e4 <HAL_RCC_OscConfig+0x5d0>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	e013      	b.n	8001ffa <HAL_RCC_OscConfig+0x4e6>
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd8:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001fdc:	fa93 f3a3 	rbit	r3, r3
 8001fe0:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001fea:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001fee:	fa93 f3a3 	rbit	r3, r3
 8001ff2:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001ff6:	4b3b      	ldr	r3, [pc, #236]	@ (80020e4 <HAL_RCC_OscConfig+0x5d0>)
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8002000:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8002004:	fa92 f2a2 	rbit	r2, r2
 8002008:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 800200c:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002010:	fab2 f282 	clz	r2, r2
 8002014:	b2d2      	uxtb	r2, r2
 8002016:	f042 0220 	orr.w	r2, r2, #32
 800201a:	b2d2      	uxtb	r2, r2
 800201c:	f002 021f 	and.w	r2, r2, #31
 8002020:	2101      	movs	r1, #1
 8002022:	fa01 f202 	lsl.w	r2, r1, r2
 8002026:	4013      	ands	r3, r2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d0af      	beq.n	8001f8c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800202c:	4b2d      	ldr	r3, [pc, #180]	@ (80020e4 <HAL_RCC_OscConfig+0x5d0>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002034:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002038:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	21f8      	movs	r1, #248	@ 0xf8
 8002042:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002046:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 800204a:	fa91 f1a1 	rbit	r1, r1
 800204e:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8002052:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002056:	fab1 f181 	clz	r1, r1
 800205a:	b2c9      	uxtb	r1, r1
 800205c:	408b      	lsls	r3, r1
 800205e:	4921      	ldr	r1, [pc, #132]	@ (80020e4 <HAL_RCC_OscConfig+0x5d0>)
 8002060:	4313      	orrs	r3, r2
 8002062:	600b      	str	r3, [r1, #0]
 8002064:	e06d      	b.n	8002142 <HAL_RCC_OscConfig+0x62e>
 8002066:	2301      	movs	r3, #1
 8002068:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002070:	fa93 f3a3 	rbit	r3, r3
 8002074:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8002078:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800207c:	fab3 f383 	clz	r3, r3
 8002080:	b2db      	uxtb	r3, r3
 8002082:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002086:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	461a      	mov	r2, r3
 800208e:	2300      	movs	r3, #0
 8002090:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002092:	f7ff f92d 	bl	80012f0 <HAL_GetTick>
 8002096:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800209a:	e00a      	b.n	80020b2 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800209c:	f7ff f928 	bl	80012f0 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d902      	bls.n	80020b2 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	f000 bd7e 	b.w	8002bae <HAL_RCC_OscConfig+0x109a>
 80020b2:	2302      	movs	r3, #2
 80020b4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80020bc:	fa93 f3a3 	rbit	r3, r3
 80020c0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 80020c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020c8:	fab3 f383 	clz	r3, r3
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	095b      	lsrs	r3, r3, #5
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	f043 0301 	orr.w	r3, r3, #1
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d105      	bne.n	80020e8 <HAL_RCC_OscConfig+0x5d4>
 80020dc:	4b01      	ldr	r3, [pc, #4]	@ (80020e4 <HAL_RCC_OscConfig+0x5d0>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	e016      	b.n	8002110 <HAL_RCC_OscConfig+0x5fc>
 80020e2:	bf00      	nop
 80020e4:	40021000 	.word	0x40021000
 80020e8:	2302      	movs	r3, #2
 80020ea:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80020f2:	fa93 f3a3 	rbit	r3, r3
 80020f6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80020fa:	2302      	movs	r3, #2
 80020fc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002100:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002104:	fa93 f3a3 	rbit	r3, r3
 8002108:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800210c:	4bbf      	ldr	r3, [pc, #764]	@ (800240c <HAL_RCC_OscConfig+0x8f8>)
 800210e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002110:	2202      	movs	r2, #2
 8002112:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8002116:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800211a:	fa92 f2a2 	rbit	r2, r2
 800211e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8002122:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002126:	fab2 f282 	clz	r2, r2
 800212a:	b2d2      	uxtb	r2, r2
 800212c:	f042 0220 	orr.w	r2, r2, #32
 8002130:	b2d2      	uxtb	r2, r2
 8002132:	f002 021f 	and.w	r2, r2, #31
 8002136:	2101      	movs	r1, #1
 8002138:	fa01 f202 	lsl.w	r2, r1, r2
 800213c:	4013      	ands	r3, r2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1ac      	bne.n	800209c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002142:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002146:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0308 	and.w	r3, r3, #8
 8002152:	2b00      	cmp	r3, #0
 8002154:	f000 8113 	beq.w	800237e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002158:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800215c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	695b      	ldr	r3, [r3, #20]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d07c      	beq.n	8002262 <HAL_RCC_OscConfig+0x74e>
 8002168:	2301      	movs	r3, #1
 800216a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002172:	fa93 f3a3 	rbit	r3, r3
 8002176:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 800217a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800217e:	fab3 f383 	clz	r3, r3
 8002182:	b2db      	uxtb	r3, r3
 8002184:	461a      	mov	r2, r3
 8002186:	4ba2      	ldr	r3, [pc, #648]	@ (8002410 <HAL_RCC_OscConfig+0x8fc>)
 8002188:	4413      	add	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	461a      	mov	r2, r3
 800218e:	2301      	movs	r3, #1
 8002190:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002192:	f7ff f8ad 	bl	80012f0 <HAL_GetTick>
 8002196:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800219a:	e00a      	b.n	80021b2 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800219c:	f7ff f8a8 	bl	80012f0 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d902      	bls.n	80021b2 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	f000 bcfe 	b.w	8002bae <HAL_RCC_OscConfig+0x109a>
 80021b2:	2302      	movs	r3, #2
 80021b4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80021bc:	fa93 f2a3 	rbit	r2, r3
 80021c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021c4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80021d2:	2202      	movs	r2, #2
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	fa93 f2a3 	rbit	r2, r3
 80021e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021f2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80021f6:	2202      	movs	r2, #2
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021fe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	fa93 f2a3 	rbit	r2, r3
 8002208:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800220c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002210:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002212:	4b7e      	ldr	r3, [pc, #504]	@ (800240c <HAL_RCC_OscConfig+0x8f8>)
 8002214:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002216:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800221a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800221e:	2102      	movs	r1, #2
 8002220:	6019      	str	r1, [r3, #0]
 8002222:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002226:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	fa93 f1a3 	rbit	r1, r3
 8002230:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002234:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002238:	6019      	str	r1, [r3, #0]
  return result;
 800223a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800223e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	fab3 f383 	clz	r3, r3
 8002248:	b2db      	uxtb	r3, r3
 800224a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800224e:	b2db      	uxtb	r3, r3
 8002250:	f003 031f 	and.w	r3, r3, #31
 8002254:	2101      	movs	r1, #1
 8002256:	fa01 f303 	lsl.w	r3, r1, r3
 800225a:	4013      	ands	r3, r2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d09d      	beq.n	800219c <HAL_RCC_OscConfig+0x688>
 8002260:	e08d      	b.n	800237e <HAL_RCC_OscConfig+0x86a>
 8002262:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002266:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800226a:	2201      	movs	r2, #1
 800226c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002272:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	fa93 f2a3 	rbit	r2, r3
 800227c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002280:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002284:	601a      	str	r2, [r3, #0]
  return result;
 8002286:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800228a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800228e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002290:	fab3 f383 	clz	r3, r3
 8002294:	b2db      	uxtb	r3, r3
 8002296:	461a      	mov	r2, r3
 8002298:	4b5d      	ldr	r3, [pc, #372]	@ (8002410 <HAL_RCC_OscConfig+0x8fc>)
 800229a:	4413      	add	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	461a      	mov	r2, r3
 80022a0:	2300      	movs	r3, #0
 80022a2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a4:	f7ff f824 	bl	80012f0 <HAL_GetTick>
 80022a8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022ac:	e00a      	b.n	80022c4 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022ae:	f7ff f81f 	bl	80012f0 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d902      	bls.n	80022c4 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	f000 bc75 	b.w	8002bae <HAL_RCC_OscConfig+0x109a>
 80022c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022c8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80022cc:	2202      	movs	r2, #2
 80022ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022d4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	fa93 f2a3 	rbit	r2, r3
 80022de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022e2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022ec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80022f0:	2202      	movs	r2, #2
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	fa93 f2a3 	rbit	r2, r3
 8002302:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002306:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002310:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002314:	2202      	movs	r2, #2
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800231c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	fa93 f2a3 	rbit	r2, r3
 8002326:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800232a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800232e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002330:	4b36      	ldr	r3, [pc, #216]	@ (800240c <HAL_RCC_OscConfig+0x8f8>)
 8002332:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002334:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002338:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800233c:	2102      	movs	r1, #2
 800233e:	6019      	str	r1, [r3, #0]
 8002340:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002344:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	fa93 f1a3 	rbit	r1, r3
 800234e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002352:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002356:	6019      	str	r1, [r3, #0]
  return result;
 8002358:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800235c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	fab3 f383 	clz	r3, r3
 8002366:	b2db      	uxtb	r3, r3
 8002368:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800236c:	b2db      	uxtb	r3, r3
 800236e:	f003 031f 	and.w	r3, r3, #31
 8002372:	2101      	movs	r1, #1
 8002374:	fa01 f303 	lsl.w	r3, r1, r3
 8002378:	4013      	ands	r3, r2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d197      	bne.n	80022ae <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800237e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002382:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0304 	and.w	r3, r3, #4
 800238e:	2b00      	cmp	r3, #0
 8002390:	f000 81a5 	beq.w	80026de <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002394:	2300      	movs	r3, #0
 8002396:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800239a:	4b1c      	ldr	r3, [pc, #112]	@ (800240c <HAL_RCC_OscConfig+0x8f8>)
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d116      	bne.n	80023d4 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023a6:	4b19      	ldr	r3, [pc, #100]	@ (800240c <HAL_RCC_OscConfig+0x8f8>)
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	4a18      	ldr	r2, [pc, #96]	@ (800240c <HAL_RCC_OscConfig+0x8f8>)
 80023ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023b0:	61d3      	str	r3, [r2, #28]
 80023b2:	4b16      	ldr	r3, [pc, #88]	@ (800240c <HAL_RCC_OscConfig+0x8f8>)
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80023ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023cc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80023ce:	2301      	movs	r3, #1
 80023d0:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002414 <HAL_RCC_OscConfig+0x900>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d121      	bne.n	8002424 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002414 <HAL_RCC_OscConfig+0x900>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a0b      	ldr	r2, [pc, #44]	@ (8002414 <HAL_RCC_OscConfig+0x900>)
 80023e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023ea:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ec:	f7fe ff80 	bl	80012f0 <HAL_GetTick>
 80023f0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f4:	e010      	b.n	8002418 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023f6:	f7fe ff7b 	bl	80012f0 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b64      	cmp	r3, #100	@ 0x64
 8002404:	d908      	bls.n	8002418 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e3d1      	b.n	8002bae <HAL_RCC_OscConfig+0x109a>
 800240a:	bf00      	nop
 800240c:	40021000 	.word	0x40021000
 8002410:	10908120 	.word	0x10908120
 8002414:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002418:	4b8d      	ldr	r3, [pc, #564]	@ (8002650 <HAL_RCC_OscConfig+0xb3c>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002420:	2b00      	cmp	r3, #0
 8002422:	d0e8      	beq.n	80023f6 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002424:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002428:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d106      	bne.n	8002442 <HAL_RCC_OscConfig+0x92e>
 8002434:	4b87      	ldr	r3, [pc, #540]	@ (8002654 <HAL_RCC_OscConfig+0xb40>)
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	4a86      	ldr	r2, [pc, #536]	@ (8002654 <HAL_RCC_OscConfig+0xb40>)
 800243a:	f043 0301 	orr.w	r3, r3, #1
 800243e:	6213      	str	r3, [r2, #32]
 8002440:	e035      	b.n	80024ae <HAL_RCC_OscConfig+0x99a>
 8002442:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002446:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d10c      	bne.n	800246c <HAL_RCC_OscConfig+0x958>
 8002452:	4b80      	ldr	r3, [pc, #512]	@ (8002654 <HAL_RCC_OscConfig+0xb40>)
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	4a7f      	ldr	r2, [pc, #508]	@ (8002654 <HAL_RCC_OscConfig+0xb40>)
 8002458:	f023 0301 	bic.w	r3, r3, #1
 800245c:	6213      	str	r3, [r2, #32]
 800245e:	4b7d      	ldr	r3, [pc, #500]	@ (8002654 <HAL_RCC_OscConfig+0xb40>)
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	4a7c      	ldr	r2, [pc, #496]	@ (8002654 <HAL_RCC_OscConfig+0xb40>)
 8002464:	f023 0304 	bic.w	r3, r3, #4
 8002468:	6213      	str	r3, [r2, #32]
 800246a:	e020      	b.n	80024ae <HAL_RCC_OscConfig+0x99a>
 800246c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002470:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	2b05      	cmp	r3, #5
 800247a:	d10c      	bne.n	8002496 <HAL_RCC_OscConfig+0x982>
 800247c:	4b75      	ldr	r3, [pc, #468]	@ (8002654 <HAL_RCC_OscConfig+0xb40>)
 800247e:	6a1b      	ldr	r3, [r3, #32]
 8002480:	4a74      	ldr	r2, [pc, #464]	@ (8002654 <HAL_RCC_OscConfig+0xb40>)
 8002482:	f043 0304 	orr.w	r3, r3, #4
 8002486:	6213      	str	r3, [r2, #32]
 8002488:	4b72      	ldr	r3, [pc, #456]	@ (8002654 <HAL_RCC_OscConfig+0xb40>)
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	4a71      	ldr	r2, [pc, #452]	@ (8002654 <HAL_RCC_OscConfig+0xb40>)
 800248e:	f043 0301 	orr.w	r3, r3, #1
 8002492:	6213      	str	r3, [r2, #32]
 8002494:	e00b      	b.n	80024ae <HAL_RCC_OscConfig+0x99a>
 8002496:	4b6f      	ldr	r3, [pc, #444]	@ (8002654 <HAL_RCC_OscConfig+0xb40>)
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	4a6e      	ldr	r2, [pc, #440]	@ (8002654 <HAL_RCC_OscConfig+0xb40>)
 800249c:	f023 0301 	bic.w	r3, r3, #1
 80024a0:	6213      	str	r3, [r2, #32]
 80024a2:	4b6c      	ldr	r3, [pc, #432]	@ (8002654 <HAL_RCC_OscConfig+0xb40>)
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	4a6b      	ldr	r2, [pc, #428]	@ (8002654 <HAL_RCC_OscConfig+0xb40>)
 80024a8:	f023 0304 	bic.w	r3, r3, #4
 80024ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024b2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f000 8081 	beq.w	80025c2 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c0:	f7fe ff16 	bl	80012f0 <HAL_GetTick>
 80024c4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c8:	e00b      	b.n	80024e2 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024ca:	f7fe ff11 	bl	80012f0 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024da:	4293      	cmp	r3, r2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e365      	b.n	8002bae <HAL_RCC_OscConfig+0x109a>
 80024e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024e6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80024ea:	2202      	movs	r2, #2
 80024ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024f2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	fa93 f2a3 	rbit	r2, r3
 80024fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002500:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800250a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800250e:	2202      	movs	r2, #2
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002516:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	fa93 f2a3 	rbit	r2, r3
 8002520:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002524:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002528:	601a      	str	r2, [r3, #0]
  return result;
 800252a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800252e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002532:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002534:	fab3 f383 	clz	r3, r3
 8002538:	b2db      	uxtb	r3, r3
 800253a:	095b      	lsrs	r3, r3, #5
 800253c:	b2db      	uxtb	r3, r3
 800253e:	f043 0302 	orr.w	r3, r3, #2
 8002542:	b2db      	uxtb	r3, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d102      	bne.n	800254e <HAL_RCC_OscConfig+0xa3a>
 8002548:	4b42      	ldr	r3, [pc, #264]	@ (8002654 <HAL_RCC_OscConfig+0xb40>)
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	e013      	b.n	8002576 <HAL_RCC_OscConfig+0xa62>
 800254e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002552:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002556:	2202      	movs	r2, #2
 8002558:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800255e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	fa93 f2a3 	rbit	r2, r3
 8002568:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800256c:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	4b38      	ldr	r3, [pc, #224]	@ (8002654 <HAL_RCC_OscConfig+0xb40>)
 8002574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002576:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800257a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800257e:	2102      	movs	r1, #2
 8002580:	6011      	str	r1, [r2, #0]
 8002582:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002586:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800258a:	6812      	ldr	r2, [r2, #0]
 800258c:	fa92 f1a2 	rbit	r1, r2
 8002590:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002594:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002598:	6011      	str	r1, [r2, #0]
  return result;
 800259a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800259e:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80025a2:	6812      	ldr	r2, [r2, #0]
 80025a4:	fab2 f282 	clz	r2, r2
 80025a8:	b2d2      	uxtb	r2, r2
 80025aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80025ae:	b2d2      	uxtb	r2, r2
 80025b0:	f002 021f 	and.w	r2, r2, #31
 80025b4:	2101      	movs	r1, #1
 80025b6:	fa01 f202 	lsl.w	r2, r1, r2
 80025ba:	4013      	ands	r3, r2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d084      	beq.n	80024ca <HAL_RCC_OscConfig+0x9b6>
 80025c0:	e083      	b.n	80026ca <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025c2:	f7fe fe95 	bl	80012f0 <HAL_GetTick>
 80025c6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ca:	e00b      	b.n	80025e4 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025cc:	f7fe fe90 	bl	80012f0 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025dc:	4293      	cmp	r3, r2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e2e4      	b.n	8002bae <HAL_RCC_OscConfig+0x109a>
 80025e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025e8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80025ec:	2202      	movs	r2, #2
 80025ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025f4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	fa93 f2a3 	rbit	r2, r3
 80025fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002602:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800260c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002610:	2202      	movs	r2, #2
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002618:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	fa93 f2a3 	rbit	r2, r3
 8002622:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002626:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800262a:	601a      	str	r2, [r3, #0]
  return result;
 800262c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002630:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002634:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002636:	fab3 f383 	clz	r3, r3
 800263a:	b2db      	uxtb	r3, r3
 800263c:	095b      	lsrs	r3, r3, #5
 800263e:	b2db      	uxtb	r3, r3
 8002640:	f043 0302 	orr.w	r3, r3, #2
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d106      	bne.n	8002658 <HAL_RCC_OscConfig+0xb44>
 800264a:	4b02      	ldr	r3, [pc, #8]	@ (8002654 <HAL_RCC_OscConfig+0xb40>)
 800264c:	6a1b      	ldr	r3, [r3, #32]
 800264e:	e017      	b.n	8002680 <HAL_RCC_OscConfig+0xb6c>
 8002650:	40007000 	.word	0x40007000
 8002654:	40021000 	.word	0x40021000
 8002658:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800265c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002660:	2202      	movs	r2, #2
 8002662:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002664:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002668:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	fa93 f2a3 	rbit	r2, r3
 8002672:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002676:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	4bb3      	ldr	r3, [pc, #716]	@ (800294c <HAL_RCC_OscConfig+0xe38>)
 800267e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002680:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002684:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002688:	2102      	movs	r1, #2
 800268a:	6011      	str	r1, [r2, #0]
 800268c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002690:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002694:	6812      	ldr	r2, [r2, #0]
 8002696:	fa92 f1a2 	rbit	r1, r2
 800269a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800269e:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80026a2:	6011      	str	r1, [r2, #0]
  return result;
 80026a4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80026a8:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80026ac:	6812      	ldr	r2, [r2, #0]
 80026ae:	fab2 f282 	clz	r2, r2
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026b8:	b2d2      	uxtb	r2, r2
 80026ba:	f002 021f 	and.w	r2, r2, #31
 80026be:	2101      	movs	r1, #1
 80026c0:	fa01 f202 	lsl.w	r2, r1, r2
 80026c4:	4013      	ands	r3, r2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d180      	bne.n	80025cc <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026ca:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d105      	bne.n	80026de <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026d2:	4b9e      	ldr	r3, [pc, #632]	@ (800294c <HAL_RCC_OscConfig+0xe38>)
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	4a9d      	ldr	r2, [pc, #628]	@ (800294c <HAL_RCC_OscConfig+0xe38>)
 80026d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026dc:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026e2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f000 825e 	beq.w	8002bac <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026f0:	4b96      	ldr	r3, [pc, #600]	@ (800294c <HAL_RCC_OscConfig+0xe38>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f003 030c 	and.w	r3, r3, #12
 80026f8:	2b08      	cmp	r3, #8
 80026fa:	f000 821f 	beq.w	8002b3c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002702:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	2b02      	cmp	r3, #2
 800270c:	f040 8170 	bne.w	80029f0 <HAL_RCC_OscConfig+0xedc>
 8002710:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002714:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002718:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800271c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002722:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	fa93 f2a3 	rbit	r2, r3
 800272c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002730:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002734:	601a      	str	r2, [r3, #0]
  return result;
 8002736:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800273a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800273e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002740:	fab3 f383 	clz	r3, r3
 8002744:	b2db      	uxtb	r3, r3
 8002746:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800274a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	461a      	mov	r2, r3
 8002752:	2300      	movs	r3, #0
 8002754:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002756:	f7fe fdcb 	bl	80012f0 <HAL_GetTick>
 800275a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800275e:	e009      	b.n	8002774 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002760:	f7fe fdc6 	bl	80012f0 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e21c      	b.n	8002bae <HAL_RCC_OscConfig+0x109a>
 8002774:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002778:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800277c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002780:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002782:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002786:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	fa93 f2a3 	rbit	r2, r3
 8002790:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002794:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002798:	601a      	str	r2, [r3, #0]
  return result;
 800279a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800279e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80027a2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027a4:	fab3 f383 	clz	r3, r3
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	095b      	lsrs	r3, r3, #5
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	f043 0301 	orr.w	r3, r3, #1
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d102      	bne.n	80027be <HAL_RCC_OscConfig+0xcaa>
 80027b8:	4b64      	ldr	r3, [pc, #400]	@ (800294c <HAL_RCC_OscConfig+0xe38>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	e027      	b.n	800280e <HAL_RCC_OscConfig+0xcfa>
 80027be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027c2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80027c6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027d0:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	fa93 f2a3 	rbit	r2, r3
 80027da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027de:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027e8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80027ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027f6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	fa93 f2a3 	rbit	r2, r3
 8002800:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002804:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	4b50      	ldr	r3, [pc, #320]	@ (800294c <HAL_RCC_OscConfig+0xe38>)
 800280c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800280e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002812:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002816:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800281a:	6011      	str	r1, [r2, #0]
 800281c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002820:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002824:	6812      	ldr	r2, [r2, #0]
 8002826:	fa92 f1a2 	rbit	r1, r2
 800282a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800282e:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002832:	6011      	str	r1, [r2, #0]
  return result;
 8002834:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002838:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800283c:	6812      	ldr	r2, [r2, #0]
 800283e:	fab2 f282 	clz	r2, r2
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	f042 0220 	orr.w	r2, r2, #32
 8002848:	b2d2      	uxtb	r2, r2
 800284a:	f002 021f 	and.w	r2, r2, #31
 800284e:	2101      	movs	r1, #1
 8002850:	fa01 f202 	lsl.w	r2, r1, r2
 8002854:	4013      	ands	r3, r2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d182      	bne.n	8002760 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800285a:	4b3c      	ldr	r3, [pc, #240]	@ (800294c <HAL_RCC_OscConfig+0xe38>)
 800285c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800285e:	f023 020f 	bic.w	r2, r3, #15
 8002862:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002866:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286e:	4937      	ldr	r1, [pc, #220]	@ (800294c <HAL_RCC_OscConfig+0xe38>)
 8002870:	4313      	orrs	r3, r2
 8002872:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8002874:	4b35      	ldr	r3, [pc, #212]	@ (800294c <HAL_RCC_OscConfig+0xe38>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 800287c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002880:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6a19      	ldr	r1, [r3, #32]
 8002888:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800288c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	69db      	ldr	r3, [r3, #28]
 8002894:	430b      	orrs	r3, r1
 8002896:	492d      	ldr	r1, [pc, #180]	@ (800294c <HAL_RCC_OscConfig+0xe38>)
 8002898:	4313      	orrs	r3, r2
 800289a:	604b      	str	r3, [r1, #4]
 800289c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028a0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80028a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80028a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028ae:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	fa93 f2a3 	rbit	r2, r3
 80028b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028bc:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80028c0:	601a      	str	r2, [r3, #0]
  return result;
 80028c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028c6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80028ca:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028cc:	fab3 f383 	clz	r3, r3
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80028d6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	461a      	mov	r2, r3
 80028de:	2301      	movs	r3, #1
 80028e0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e2:	f7fe fd05 	bl	80012f0 <HAL_GetTick>
 80028e6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028ea:	e009      	b.n	8002900 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ec:	f7fe fd00 	bl	80012f0 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e156      	b.n	8002bae <HAL_RCC_OscConfig+0x109a>
 8002900:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002904:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002908:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800290c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002912:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	fa93 f2a3 	rbit	r2, r3
 800291c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002920:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002924:	601a      	str	r2, [r3, #0]
  return result;
 8002926:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800292a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800292e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002930:	fab3 f383 	clz	r3, r3
 8002934:	b2db      	uxtb	r3, r3
 8002936:	095b      	lsrs	r3, r3, #5
 8002938:	b2db      	uxtb	r3, r3
 800293a:	f043 0301 	orr.w	r3, r3, #1
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2b01      	cmp	r3, #1
 8002942:	d105      	bne.n	8002950 <HAL_RCC_OscConfig+0xe3c>
 8002944:	4b01      	ldr	r3, [pc, #4]	@ (800294c <HAL_RCC_OscConfig+0xe38>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	e02a      	b.n	80029a0 <HAL_RCC_OscConfig+0xe8c>
 800294a:	bf00      	nop
 800294c:	40021000 	.word	0x40021000
 8002950:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002954:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002958:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800295c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002962:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	fa93 f2a3 	rbit	r2, r3
 800296c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002970:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800297a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800297e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002988:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	fa93 f2a3 	rbit	r2, r3
 8002992:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002996:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	4b86      	ldr	r3, [pc, #536]	@ (8002bb8 <HAL_RCC_OscConfig+0x10a4>)
 800299e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80029a4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80029a8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80029ac:	6011      	str	r1, [r2, #0]
 80029ae:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80029b2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80029b6:	6812      	ldr	r2, [r2, #0]
 80029b8:	fa92 f1a2 	rbit	r1, r2
 80029bc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80029c0:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80029c4:	6011      	str	r1, [r2, #0]
  return result;
 80029c6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80029ca:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80029ce:	6812      	ldr	r2, [r2, #0]
 80029d0:	fab2 f282 	clz	r2, r2
 80029d4:	b2d2      	uxtb	r2, r2
 80029d6:	f042 0220 	orr.w	r2, r2, #32
 80029da:	b2d2      	uxtb	r2, r2
 80029dc:	f002 021f 	and.w	r2, r2, #31
 80029e0:	2101      	movs	r1, #1
 80029e2:	fa01 f202 	lsl.w	r2, r1, r2
 80029e6:	4013      	ands	r3, r2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f43f af7f 	beq.w	80028ec <HAL_RCC_OscConfig+0xdd8>
 80029ee:	e0dd      	b.n	8002bac <HAL_RCC_OscConfig+0x1098>
 80029f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029f4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80029f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80029fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a02:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	fa93 f2a3 	rbit	r2, r3
 8002a0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a10:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002a14:	601a      	str	r2, [r3, #0]
  return result;
 8002a16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a1a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002a1e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a20:	fab3 f383 	clz	r3, r3
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a2a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	461a      	mov	r2, r3
 8002a32:	2300      	movs	r3, #0
 8002a34:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a36:	f7fe fc5b 	bl	80012f0 <HAL_GetTick>
 8002a3a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a3e:	e009      	b.n	8002a54 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a40:	f7fe fc56 	bl	80012f0 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e0ac      	b.n	8002bae <HAL_RCC_OscConfig+0x109a>
 8002a54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a58:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002a5c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a66:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	fa93 f2a3 	rbit	r2, r3
 8002a70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a74:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002a78:	601a      	str	r2, [r3, #0]
  return result;
 8002a7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a7e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002a82:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a84:	fab3 f383 	clz	r3, r3
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	095b      	lsrs	r3, r3, #5
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	f043 0301 	orr.w	r3, r3, #1
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d102      	bne.n	8002a9e <HAL_RCC_OscConfig+0xf8a>
 8002a98:	4b47      	ldr	r3, [pc, #284]	@ (8002bb8 <HAL_RCC_OscConfig+0x10a4>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	e027      	b.n	8002aee <HAL_RCC_OscConfig+0xfda>
 8002a9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002aa2:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002aa6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002aaa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ab0:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	fa93 f2a3 	rbit	r2, r3
 8002aba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002abe:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ac8:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002acc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ad6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	fa93 f2a3 	rbit	r2, r3
 8002ae0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ae4:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	4b33      	ldr	r3, [pc, #204]	@ (8002bb8 <HAL_RCC_OscConfig+0x10a4>)
 8002aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aee:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002af2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002af6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002afa:	6011      	str	r1, [r2, #0]
 8002afc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b00:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002b04:	6812      	ldr	r2, [r2, #0]
 8002b06:	fa92 f1a2 	rbit	r1, r2
 8002b0a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b0e:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002b12:	6011      	str	r1, [r2, #0]
  return result;
 8002b14:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b18:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002b1c:	6812      	ldr	r2, [r2, #0]
 8002b1e:	fab2 f282 	clz	r2, r2
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	f042 0220 	orr.w	r2, r2, #32
 8002b28:	b2d2      	uxtb	r2, r2
 8002b2a:	f002 021f 	and.w	r2, r2, #31
 8002b2e:	2101      	movs	r1, #1
 8002b30:	fa01 f202 	lsl.w	r2, r1, r2
 8002b34:	4013      	ands	r3, r2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d182      	bne.n	8002a40 <HAL_RCC_OscConfig+0xf2c>
 8002b3a:	e037      	b.n	8002bac <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b40:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d101      	bne.n	8002b50 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e02e      	b.n	8002bae <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b50:	4b19      	ldr	r3, [pc, #100]	@ (8002bb8 <HAL_RCC_OscConfig+0x10a4>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002b58:	4b17      	ldr	r3, [pc, #92]	@ (8002bb8 <HAL_RCC_OscConfig+0x10a4>)
 8002b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b5c:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b60:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002b64:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8002b68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b6c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	69db      	ldr	r3, [r3, #28]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d117      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002b78:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002b7c:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002b80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b84:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d10b      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002b90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b94:	f003 020f 	and.w	r2, r3, #15
 8002b98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b9c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d001      	beq.n	8002bac <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e000      	b.n	8002bae <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40021000 	.word	0x40021000

08002bbc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b09e      	sub	sp, #120	@ 0x78
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d101      	bne.n	8002bd4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e162      	b.n	8002e9a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bd4:	4b90      	ldr	r3, [pc, #576]	@ (8002e18 <HAL_RCC_ClockConfig+0x25c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0307 	and.w	r3, r3, #7
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d910      	bls.n	8002c04 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be2:	4b8d      	ldr	r3, [pc, #564]	@ (8002e18 <HAL_RCC_ClockConfig+0x25c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f023 0207 	bic.w	r2, r3, #7
 8002bea:	498b      	ldr	r1, [pc, #556]	@ (8002e18 <HAL_RCC_ClockConfig+0x25c>)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf2:	4b89      	ldr	r3, [pc, #548]	@ (8002e18 <HAL_RCC_ClockConfig+0x25c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d001      	beq.n	8002c04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e14a      	b.n	8002e9a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d008      	beq.n	8002c22 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c10:	4b82      	ldr	r3, [pc, #520]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	497f      	ldr	r1, [pc, #508]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 80dc 	beq.w	8002de8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d13c      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xf6>
 8002c38:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c3c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c40:	fa93 f3a3 	rbit	r3, r3
 8002c44:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002c46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c48:	fab3 f383 	clz	r3, r3
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	095b      	lsrs	r3, r3, #5
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	f043 0301 	orr.w	r3, r3, #1
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d102      	bne.n	8002c62 <HAL_RCC_ClockConfig+0xa6>
 8002c5c:	4b6f      	ldr	r3, [pc, #444]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	e00f      	b.n	8002c82 <HAL_RCC_ClockConfig+0xc6>
 8002c62:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c66:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c6a:	fa93 f3a3 	rbit	r3, r3
 8002c6e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002c70:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c74:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c78:	fa93 f3a3 	rbit	r3, r3
 8002c7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002c7e:	4b67      	ldr	r3, [pc, #412]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c82:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002c86:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002c88:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002c8a:	fa92 f2a2 	rbit	r2, r2
 8002c8e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002c90:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002c92:	fab2 f282 	clz	r2, r2
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	f042 0220 	orr.w	r2, r2, #32
 8002c9c:	b2d2      	uxtb	r2, r2
 8002c9e:	f002 021f 	and.w	r2, r2, #31
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca8:	4013      	ands	r3, r2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d17b      	bne.n	8002da6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e0f3      	b.n	8002e9a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d13c      	bne.n	8002d34 <HAL_RCC_ClockConfig+0x178>
 8002cba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cbe:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002cc2:	fa93 f3a3 	rbit	r3, r3
 8002cc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002cc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cca:	fab3 f383 	clz	r3, r3
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	095b      	lsrs	r3, r3, #5
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	f043 0301 	orr.w	r3, r3, #1
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d102      	bne.n	8002ce4 <HAL_RCC_ClockConfig+0x128>
 8002cde:	4b4f      	ldr	r3, [pc, #316]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	e00f      	b.n	8002d04 <HAL_RCC_ClockConfig+0x148>
 8002ce4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ce8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cec:	fa93 f3a3 	rbit	r3, r3
 8002cf0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cf2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cf6:	643b      	str	r3, [r7, #64]	@ 0x40
 8002cf8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cfa:	fa93 f3a3 	rbit	r3, r3
 8002cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d00:	4b46      	ldr	r3, [pc, #280]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d04:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d08:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002d0a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002d0c:	fa92 f2a2 	rbit	r2, r2
 8002d10:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002d12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d14:	fab2 f282 	clz	r2, r2
 8002d18:	b2d2      	uxtb	r2, r2
 8002d1a:	f042 0220 	orr.w	r2, r2, #32
 8002d1e:	b2d2      	uxtb	r2, r2
 8002d20:	f002 021f 	and.w	r2, r2, #31
 8002d24:	2101      	movs	r1, #1
 8002d26:	fa01 f202 	lsl.w	r2, r1, r2
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d13a      	bne.n	8002da6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e0b2      	b.n	8002e9a <HAL_RCC_ClockConfig+0x2de>
 8002d34:	2302      	movs	r3, #2
 8002d36:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d3a:	fa93 f3a3 	rbit	r3, r3
 8002d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d42:	fab3 f383 	clz	r3, r3
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	095b      	lsrs	r3, r3, #5
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	f043 0301 	orr.w	r3, r3, #1
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d102      	bne.n	8002d5c <HAL_RCC_ClockConfig+0x1a0>
 8002d56:	4b31      	ldr	r3, [pc, #196]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	e00d      	b.n	8002d78 <HAL_RCC_ClockConfig+0x1bc>
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d62:	fa93 f3a3 	rbit	r3, r3
 8002d66:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d68:	2302      	movs	r3, #2
 8002d6a:	623b      	str	r3, [r7, #32]
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	fa93 f3a3 	rbit	r3, r3
 8002d72:	61fb      	str	r3, [r7, #28]
 8002d74:	4b29      	ldr	r3, [pc, #164]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d78:	2202      	movs	r2, #2
 8002d7a:	61ba      	str	r2, [r7, #24]
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	fa92 f2a2 	rbit	r2, r2
 8002d82:	617a      	str	r2, [r7, #20]
  return result;
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	fab2 f282 	clz	r2, r2
 8002d8a:	b2d2      	uxtb	r2, r2
 8002d8c:	f042 0220 	orr.w	r2, r2, #32
 8002d90:	b2d2      	uxtb	r2, r2
 8002d92:	f002 021f 	and.w	r2, r2, #31
 8002d96:	2101      	movs	r1, #1
 8002d98:	fa01 f202 	lsl.w	r2, r1, r2
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e079      	b.n	8002e9a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002da6:	4b1d      	ldr	r3, [pc, #116]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f023 0203 	bic.w	r2, r3, #3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	491a      	ldr	r1, [pc, #104]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002db8:	f7fe fa9a 	bl	80012f0 <HAL_GetTick>
 8002dbc:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dbe:	e00a      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dc0:	f7fe fa96 	bl	80012f0 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e061      	b.n	8002e9a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd6:	4b11      	ldr	r3, [pc, #68]	@ (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f003 020c 	and.w	r2, r3, #12
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d1eb      	bne.n	8002dc0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002de8:	4b0b      	ldr	r3, [pc, #44]	@ (8002e18 <HAL_RCC_ClockConfig+0x25c>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d214      	bcs.n	8002e20 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df6:	4b08      	ldr	r3, [pc, #32]	@ (8002e18 <HAL_RCC_ClockConfig+0x25c>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f023 0207 	bic.w	r2, r3, #7
 8002dfe:	4906      	ldr	r1, [pc, #24]	@ (8002e18 <HAL_RCC_ClockConfig+0x25c>)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e06:	4b04      	ldr	r3, [pc, #16]	@ (8002e18 <HAL_RCC_ClockConfig+0x25c>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0307 	and.w	r3, r3, #7
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d005      	beq.n	8002e20 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e040      	b.n	8002e9a <HAL_RCC_ClockConfig+0x2de>
 8002e18:	40022000 	.word	0x40022000
 8002e1c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d008      	beq.n	8002e3e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e2c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ea4 <HAL_RCC_ClockConfig+0x2e8>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	491a      	ldr	r1, [pc, #104]	@ (8002ea4 <HAL_RCC_ClockConfig+0x2e8>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0308 	and.w	r3, r3, #8
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d009      	beq.n	8002e5e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e4a:	4b16      	ldr	r3, [pc, #88]	@ (8002ea4 <HAL_RCC_ClockConfig+0x2e8>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	4912      	ldr	r1, [pc, #72]	@ (8002ea4 <HAL_RCC_ClockConfig+0x2e8>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002e5e:	f000 f829 	bl	8002eb4 <HAL_RCC_GetSysClockFreq>
 8002e62:	4601      	mov	r1, r0
 8002e64:	4b0f      	ldr	r3, [pc, #60]	@ (8002ea4 <HAL_RCC_ClockConfig+0x2e8>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e6c:	22f0      	movs	r2, #240	@ 0xf0
 8002e6e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	fa92 f2a2 	rbit	r2, r2
 8002e76:	60fa      	str	r2, [r7, #12]
  return result;
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	fab2 f282 	clz	r2, r2
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	40d3      	lsrs	r3, r2
 8002e82:	4a09      	ldr	r2, [pc, #36]	@ (8002ea8 <HAL_RCC_ClockConfig+0x2ec>)
 8002e84:	5cd3      	ldrb	r3, [r2, r3]
 8002e86:	fa21 f303 	lsr.w	r3, r1, r3
 8002e8a:	4a08      	ldr	r2, [pc, #32]	@ (8002eac <HAL_RCC_ClockConfig+0x2f0>)
 8002e8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002e8e:	4b08      	ldr	r3, [pc, #32]	@ (8002eb0 <HAL_RCC_ClockConfig+0x2f4>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7fe f9e8 	bl	8001268 <HAL_InitTick>
  
  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3778      	adds	r7, #120	@ 0x78
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	08004b10 	.word	0x08004b10
 8002eac:	20000128 	.word	0x20000128
 8002eb0:	2000012c 	.word	0x2000012c

08002eb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b08b      	sub	sp, #44	@ 0x2c
 8002eb8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	61fb      	str	r3, [r7, #28]
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	61bb      	str	r3, [r7, #24]
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002ece:	4b2a      	ldr	r3, [pc, #168]	@ (8002f78 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	f003 030c 	and.w	r3, r3, #12
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	d002      	beq.n	8002ee4 <HAL_RCC_GetSysClockFreq+0x30>
 8002ede:	2b08      	cmp	r3, #8
 8002ee0:	d003      	beq.n	8002eea <HAL_RCC_GetSysClockFreq+0x36>
 8002ee2:	e03f      	b.n	8002f64 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ee4:	4b25      	ldr	r3, [pc, #148]	@ (8002f7c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ee6:	623b      	str	r3, [r7, #32]
      break;
 8002ee8:	e03f      	b.n	8002f6a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002ef0:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8002ef4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	fa92 f2a2 	rbit	r2, r2
 8002efc:	607a      	str	r2, [r7, #4]
  return result;
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	fab2 f282 	clz	r2, r2
 8002f04:	b2d2      	uxtb	r2, r2
 8002f06:	40d3      	lsrs	r3, r2
 8002f08:	4a1d      	ldr	r2, [pc, #116]	@ (8002f80 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002f0a:	5cd3      	ldrb	r3, [r2, r3]
 8002f0c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002f0e:	4b1a      	ldr	r3, [pc, #104]	@ (8002f78 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f12:	f003 030f 	and.w	r3, r3, #15
 8002f16:	220f      	movs	r2, #15
 8002f18:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	fa92 f2a2 	rbit	r2, r2
 8002f20:	60fa      	str	r2, [r7, #12]
  return result;
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	fab2 f282 	clz	r2, r2
 8002f28:	b2d2      	uxtb	r2, r2
 8002f2a:	40d3      	lsrs	r3, r2
 8002f2c:	4a15      	ldr	r2, [pc, #84]	@ (8002f84 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002f2e:	5cd3      	ldrb	r3, [r2, r3]
 8002f30:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d008      	beq.n	8002f4e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f3c:	4a0f      	ldr	r2, [pc, #60]	@ (8002f7c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	fb02 f303 	mul.w	r3, r2, r3
 8002f4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f4c:	e007      	b.n	8002f5e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f4e:	4a0e      	ldr	r2, [pc, #56]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	fb02 f303 	mul.w	r3, r2, r3
 8002f5c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f60:	623b      	str	r3, [r7, #32]
      break;
 8002f62:	e002      	b.n	8002f6a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f64:	4b08      	ldr	r3, [pc, #32]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002f66:	623b      	str	r3, [r7, #32]
      break;
 8002f68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f6a:	6a3b      	ldr	r3, [r7, #32]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	372c      	adds	r7, #44	@ 0x2c
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	005b8d80 	.word	0x005b8d80
 8002f80:	08004b28 	.word	0x08004b28
 8002f84:	08004b38 	.word	0x08004b38
 8002f88:	007a1200 	.word	0x007a1200

08002f8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f90:	4b03      	ldr	r3, [pc, #12]	@ (8002fa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f92:	681b      	ldr	r3, [r3, #0]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	20000128 	.word	0x20000128

08002fa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002faa:	f7ff ffef 	bl	8002f8c <HAL_RCC_GetHCLKFreq>
 8002fae:	4601      	mov	r1, r0
 8002fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002fb8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002fbc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	fa92 f2a2 	rbit	r2, r2
 8002fc4:	603a      	str	r2, [r7, #0]
  return result;
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	fab2 f282 	clz	r2, r2
 8002fcc:	b2d2      	uxtb	r2, r2
 8002fce:	40d3      	lsrs	r3, r2
 8002fd0:	4a04      	ldr	r2, [pc, #16]	@ (8002fe4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002fd2:	5cd3      	ldrb	r3, [r2, r3]
 8002fd4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	08004b20 	.word	0x08004b20

08002fe8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002fee:	f7ff ffcd 	bl	8002f8c <HAL_RCC_GetHCLKFreq>
 8002ff2:	4601      	mov	r1, r0
 8002ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8003024 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002ffc:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003000:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	fa92 f2a2 	rbit	r2, r2
 8003008:	603a      	str	r2, [r7, #0]
  return result;
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	fab2 f282 	clz	r2, r2
 8003010:	b2d2      	uxtb	r2, r2
 8003012:	40d3      	lsrs	r3, r2
 8003014:	4a04      	ldr	r2, [pc, #16]	@ (8003028 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003016:	5cd3      	ldrb	r3, [r2, r3]
 8003018:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800301c:	4618      	mov	r0, r3
 800301e:	3708      	adds	r7, #8
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	40021000 	.word	0x40021000
 8003028:	08004b20 	.word	0x08004b20

0800302c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b092      	sub	sp, #72	@ 0x48
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003034:	2300      	movs	r3, #0
 8003036:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003038:	2300      	movs	r3, #0
 800303a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800303c:	2300      	movs	r3, #0
 800303e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800304a:	2b00      	cmp	r3, #0
 800304c:	f000 80d4 	beq.w	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003050:	4b4e      	ldr	r3, [pc, #312]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003052:	69db      	ldr	r3, [r3, #28]
 8003054:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d10e      	bne.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800305c:	4b4b      	ldr	r3, [pc, #300]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800305e:	69db      	ldr	r3, [r3, #28]
 8003060:	4a4a      	ldr	r2, [pc, #296]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003062:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003066:	61d3      	str	r3, [r2, #28]
 8003068:	4b48      	ldr	r3, [pc, #288]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800306a:	69db      	ldr	r3, [r3, #28]
 800306c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003070:	60bb      	str	r3, [r7, #8]
 8003072:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003074:	2301      	movs	r3, #1
 8003076:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800307a:	4b45      	ldr	r3, [pc, #276]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003082:	2b00      	cmp	r3, #0
 8003084:	d118      	bne.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003086:	4b42      	ldr	r3, [pc, #264]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a41      	ldr	r2, [pc, #260]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800308c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003090:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003092:	f7fe f92d 	bl	80012f0 <HAL_GetTick>
 8003096:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003098:	e008      	b.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800309a:	f7fe f929 	bl	80012f0 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b64      	cmp	r3, #100	@ 0x64
 80030a6:	d901      	bls.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e1d6      	b.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ac:	4b38      	ldr	r3, [pc, #224]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d0f0      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030b8:	4b34      	ldr	r3, [pc, #208]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 8084 	beq.w	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030d2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d07c      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030d8:	4b2c      	ldr	r3, [pc, #176]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80030e6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ea:	fa93 f3a3 	rbit	r3, r3
 80030ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80030f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030f2:	fab3 f383 	clz	r3, r3
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	461a      	mov	r2, r3
 80030fa:	4b26      	ldr	r3, [pc, #152]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80030fc:	4413      	add	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	461a      	mov	r2, r3
 8003102:	2301      	movs	r3, #1
 8003104:	6013      	str	r3, [r2, #0]
 8003106:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800310a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800310e:	fa93 f3a3 	rbit	r3, r3
 8003112:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003116:	fab3 f383 	clz	r3, r3
 800311a:	b2db      	uxtb	r3, r3
 800311c:	461a      	mov	r2, r3
 800311e:	4b1d      	ldr	r3, [pc, #116]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003120:	4413      	add	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	461a      	mov	r2, r3
 8003126:	2300      	movs	r3, #0
 8003128:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800312a:	4a18      	ldr	r2, [pc, #96]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800312c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800312e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003130:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d04b      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313a:	f7fe f8d9 	bl	80012f0 <HAL_GetTick>
 800313e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003140:	e00a      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003142:	f7fe f8d5 	bl	80012f0 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003150:	4293      	cmp	r3, r2
 8003152:	d901      	bls.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e180      	b.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003158:	2302      	movs	r3, #2
 800315a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800315e:	fa93 f3a3 	rbit	r3, r3
 8003162:	627b      	str	r3, [r7, #36]	@ 0x24
 8003164:	2302      	movs	r3, #2
 8003166:	623b      	str	r3, [r7, #32]
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	fa93 f3a3 	rbit	r3, r3
 800316e:	61fb      	str	r3, [r7, #28]
  return result;
 8003170:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003172:	fab3 f383 	clz	r3, r3
 8003176:	b2db      	uxtb	r3, r3
 8003178:	095b      	lsrs	r3, r3, #5
 800317a:	b2db      	uxtb	r3, r3
 800317c:	f043 0302 	orr.w	r3, r3, #2
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d108      	bne.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003186:	4b01      	ldr	r3, [pc, #4]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	e00d      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800318c:	40021000 	.word	0x40021000
 8003190:	40007000 	.word	0x40007000
 8003194:	10908100 	.word	0x10908100
 8003198:	2302      	movs	r3, #2
 800319a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	fa93 f3a3 	rbit	r3, r3
 80031a2:	617b      	str	r3, [r7, #20]
 80031a4:	4b9a      	ldr	r3, [pc, #616]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a8:	2202      	movs	r2, #2
 80031aa:	613a      	str	r2, [r7, #16]
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	fa92 f2a2 	rbit	r2, r2
 80031b2:	60fa      	str	r2, [r7, #12]
  return result;
 80031b4:	68fa      	ldr	r2, [r7, #12]
 80031b6:	fab2 f282 	clz	r2, r2
 80031ba:	b2d2      	uxtb	r2, r2
 80031bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80031c0:	b2d2      	uxtb	r2, r2
 80031c2:	f002 021f 	and.w	r2, r2, #31
 80031c6:	2101      	movs	r1, #1
 80031c8:	fa01 f202 	lsl.w	r2, r1, r2
 80031cc:	4013      	ands	r3, r2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d0b7      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80031d2:	4b8f      	ldr	r3, [pc, #572]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	498c      	ldr	r1, [pc, #560]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031e4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d105      	bne.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ec:	4b88      	ldr	r3, [pc, #544]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031ee:	69db      	ldr	r3, [r3, #28]
 80031f0:	4a87      	ldr	r2, [pc, #540]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031f6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	d008      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003204:	4b82      	ldr	r3, [pc, #520]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003208:	f023 0203 	bic.w	r2, r3, #3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	497f      	ldr	r1, [pc, #508]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003212:	4313      	orrs	r3, r2
 8003214:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d008      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003222:	4b7b      	ldr	r3, [pc, #492]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003226:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	4978      	ldr	r1, [pc, #480]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003230:	4313      	orrs	r3, r2
 8003232:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	2b00      	cmp	r3, #0
 800323e:	d008      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003240:	4b73      	ldr	r3, [pc, #460]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003244:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	4970      	ldr	r1, [pc, #448]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800324e:	4313      	orrs	r3, r2
 8003250:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0320 	and.w	r3, r3, #32
 800325a:	2b00      	cmp	r3, #0
 800325c:	d008      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800325e:	4b6c      	ldr	r3, [pc, #432]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003262:	f023 0210 	bic.w	r2, r3, #16
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	4969      	ldr	r1, [pc, #420]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800326c:	4313      	orrs	r3, r2
 800326e:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d008      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800327c:	4b64      	ldr	r3, [pc, #400]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003288:	4961      	ldr	r1, [pc, #388]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800328a:	4313      	orrs	r3, r2
 800328c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003296:	2b00      	cmp	r3, #0
 8003298:	d008      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800329a:	4b5d      	ldr	r3, [pc, #372]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800329c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800329e:	f023 0220 	bic.w	r2, r3, #32
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	495a      	ldr	r1, [pc, #360]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d008      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032b8:	4b55      	ldr	r3, [pc, #340]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032bc:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c4:	4952      	ldr	r1, [pc, #328]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0308 	and.w	r3, r3, #8
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d008      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032d6:	4b4e      	ldr	r3, [pc, #312]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	494b      	ldr	r1, [pc, #300]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0310 	and.w	r3, r3, #16
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d008      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032f4:	4b46      	ldr	r3, [pc, #280]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	4943      	ldr	r1, [pc, #268]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003302:	4313      	orrs	r3, r2
 8003304:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800330e:	2b00      	cmp	r3, #0
 8003310:	d008      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003312:	4b3f      	ldr	r3, [pc, #252]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331e:	493c      	ldr	r1, [pc, #240]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003320:	4313      	orrs	r3, r2
 8003322:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800332c:	2b00      	cmp	r3, #0
 800332e:	d008      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003330:	4b37      	ldr	r3, [pc, #220]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003334:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800333c:	4934      	ldr	r1, [pc, #208]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800333e:	4313      	orrs	r3, r2
 8003340:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800334a:	2b00      	cmp	r3, #0
 800334c:	d008      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800334e:	4b30      	ldr	r3, [pc, #192]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003352:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800335a:	492d      	ldr	r1, [pc, #180]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800335c:	4313      	orrs	r3, r2
 800335e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d008      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800336c:	4b28      	ldr	r3, [pc, #160]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800336e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003370:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003378:	4925      	ldr	r1, [pc, #148]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800337a:	4313      	orrs	r3, r2
 800337c:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d008      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800338a:	4b21      	ldr	r3, [pc, #132]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800338c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338e:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003396:	491e      	ldr	r1, [pc, #120]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003398:	4313      	orrs	r3, r2
 800339a:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d008      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80033a8:	4b19      	ldr	r3, [pc, #100]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ac:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033b4:	4916      	ldr	r1, [pc, #88]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d008      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80033c6:	4b12      	ldr	r3, [pc, #72]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ca:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033d2:	490f      	ldr	r1, [pc, #60]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d008      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80033e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e8:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033f0:	4907      	ldr	r1, [pc, #28]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00c      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003402:	4b03      	ldr	r3, [pc, #12]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003406:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	e002      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800340e:	bf00      	nop
 8003410:	40021000 	.word	0x40021000
 8003414:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003416:	4913      	ldr	r1, [pc, #76]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003418:	4313      	orrs	r3, r2
 800341a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d008      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003428:	4b0e      	ldr	r3, [pc, #56]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800342a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800342c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003434:	490b      	ldr	r1, [pc, #44]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003436:	4313      	orrs	r3, r2
 8003438:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d008      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003446:	4b07      	ldr	r3, [pc, #28]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800344a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003452:	4904      	ldr	r1, [pc, #16]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003454:	4313      	orrs	r3, r2
 8003456:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3748      	adds	r7, #72	@ 0x48
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	40021000 	.word	0x40021000

08003468 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e09d      	b.n	80035b6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347e:	2b00      	cmp	r3, #0
 8003480:	d108      	bne.n	8003494 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800348a:	d009      	beq.n	80034a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	61da      	str	r2, [r3, #28]
 8003492:	e005      	b.n	80034a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d106      	bne.n	80034c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7fd fdba 	bl	8001034 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2202      	movs	r2, #2
 80034c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80034e0:	d902      	bls.n	80034e8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80034e2:	2300      	movs	r3, #0
 80034e4:	60fb      	str	r3, [r7, #12]
 80034e6:	e002      	b.n	80034ee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80034e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034ec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80034f6:	d007      	beq.n	8003508 <HAL_SPI_Init+0xa0>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003500:	d002      	beq.n	8003508 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003518:	431a      	orrs	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	431a      	orrs	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	431a      	orrs	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003536:	431a      	orrs	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	69db      	ldr	r3, [r3, #28]
 800353c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003540:	431a      	orrs	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800354a:	ea42 0103 	orr.w	r1, r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003552:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	0c1b      	lsrs	r3, r3, #16
 8003564:	f003 0204 	and.w	r2, r3, #4
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800356c:	f003 0310 	and.w	r3, r3, #16
 8003570:	431a      	orrs	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003576:	f003 0308 	and.w	r3, r3, #8
 800357a:	431a      	orrs	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003584:	ea42 0103 	orr.w	r1, r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	69da      	ldr	r2, [r3, #28]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
	...

080035c0 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	4613      	mov	r3, r2
 80035cc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80035ce:	2300      	movs	r3, #0
 80035d0:	75fb      	strb	r3, [r7, #23]


  if (hspi->State != HAL_SPI_STATE_READY)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d002      	beq.n	80035e4 <HAL_SPI_Receive_IT+0x24>
  {
    errorcode = HAL_BUSY;
 80035de:	2302      	movs	r3, #2
 80035e0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80035e2:	e090      	b.n	8003706 <HAL_SPI_Receive_IT+0x146>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d110      	bne.n	800360e <HAL_SPI_Receive_IT+0x4e>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035f4:	d10b      	bne.n	800360e <HAL_SPI_Receive_IT+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2204      	movs	r2, #4
 80035fa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80035fe:	88fb      	ldrh	r3, [r7, #6]
 8003600:	68ba      	ldr	r2, [r7, #8]
 8003602:	68b9      	ldr	r1, [r7, #8]
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f000 f88b 	bl	8003720 <HAL_SPI_TransmitReceive_IT>
 800360a:	4603      	mov	r3, r0
 800360c:	e080      	b.n	8003710 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003614:	2b01      	cmp	r3, #1
 8003616:	d101      	bne.n	800361c <HAL_SPI_Receive_IT+0x5c>
 8003618:	2302      	movs	r3, #2
 800361a:	e079      	b.n	8003710 <HAL_SPI_Receive_IT+0x150>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if ((pData == NULL) || (Size == 0U))
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d002      	beq.n	8003630 <HAL_SPI_Receive_IT+0x70>
 800362a:	88fb      	ldrh	r3, [r7, #6]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d102      	bne.n	8003636 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003634:	e067      	b.n	8003706 <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2204      	movs	r2, #4
 800363a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	88fa      	ldrh	r2, [r7, #6]
 800364e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	88fa      	ldrh	r2, [r7, #6]
 8003656:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800367a:	d90b      	bls.n	8003694 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800368a:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	4a22      	ldr	r2, [pc, #136]	@ (8003718 <HAL_SPI_Receive_IT+0x158>)
 8003690:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003692:	e00a      	b.n	80036aa <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	685a      	ldr	r2, [r3, #4]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80036a2:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	4a1d      	ldr	r2, [pc, #116]	@ (800371c <HAL_SPI_Receive_IT+0x15c>)
 80036a8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036b2:	d10f      	bne.n	80036d4 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036c2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80036d2:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	685a      	ldr	r2, [r3, #4]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80036e2:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ee:	2b40      	cmp	r3, #64	@ 0x40
 80036f0:	d008      	beq.n	8003704 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	e000      	b.n	8003706 <HAL_SPI_Receive_IT+0x146>
  }

error :
 8003704:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800370e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003710:	4618      	mov	r0, r3
 8003712:	3718      	adds	r7, #24
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	08003d21 	.word	0x08003d21
 800371c:	08003cd1 	.word	0x08003cd1

08003720 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8003720:	b480      	push	{r7}
 8003722:	b087      	sub	sp, #28
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
 800372c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800372e:	2300      	movs	r3, #0
 8003730:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003738:	2b01      	cmp	r3, #1
 800373a:	d101      	bne.n	8003740 <HAL_SPI_TransmitReceive_IT+0x20>
 800373c:	2302      	movs	r3, #2
 800373e:	e091      	b.n	8003864 <HAL_SPI_TransmitReceive_IT+0x144>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800374e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003756:	7dbb      	ldrb	r3, [r7, #22]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d00d      	beq.n	8003778 <HAL_SPI_TransmitReceive_IT+0x58>
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003762:	d106      	bne.n	8003772 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d102      	bne.n	8003772 <HAL_SPI_TransmitReceive_IT+0x52>
 800376c:	7dbb      	ldrb	r3, [r7, #22]
 800376e:	2b04      	cmp	r3, #4
 8003770:	d002      	beq.n	8003778 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8003772:	2302      	movs	r3, #2
 8003774:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003776:	e070      	b.n	800385a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d005      	beq.n	800378a <HAL_SPI_TransmitReceive_IT+0x6a>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d002      	beq.n	800378a <HAL_SPI_TransmitReceive_IT+0x6a>
 8003784:	887b      	ldrh	r3, [r7, #2]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d102      	bne.n	8003790 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800378e:	e064      	b.n	800385a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003796:	b2db      	uxtb	r3, r3
 8003798:	2b04      	cmp	r3, #4
 800379a:	d003      	beq.n	80037a4 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2205      	movs	r2, #5
 80037a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	68ba      	ldr	r2, [r7, #8]
 80037ae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	887a      	ldrh	r2, [r7, #2]
 80037b4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	887a      	ldrh	r2, [r7, #2]
 80037ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	887a      	ldrh	r2, [r7, #2]
 80037c6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	887a      	ldrh	r2, [r7, #2]
 80037ce:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80037da:	d906      	bls.n	80037ea <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	4a24      	ldr	r2, [pc, #144]	@ (8003870 <HAL_SPI_TransmitReceive_IT+0x150>)
 80037e0:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	4a23      	ldr	r2, [pc, #140]	@ (8003874 <HAL_SPI_TransmitReceive_IT+0x154>)
 80037e6:	651a      	str	r2, [r3, #80]	@ 0x50
 80037e8:	e005      	b.n	80037f6 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	4a22      	ldr	r2, [pc, #136]	@ (8003878 <HAL_SPI_TransmitReceive_IT+0x158>)
 80037ee:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4a22      	ldr	r2, [pc, #136]	@ (800387c <HAL_SPI_TransmitReceive_IT+0x15c>)
 80037f4:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80037fe:	d802      	bhi.n	8003806 <HAL_SPI_TransmitReceive_IT+0xe6>
 8003800:	887b      	ldrh	r3, [r7, #2]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d908      	bls.n	8003818 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	685a      	ldr	r2, [r3, #4]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003814:	605a      	str	r2, [r3, #4]
 8003816:	e007      	b.n	8003828 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003826:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685a      	ldr	r2, [r3, #4]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8003836:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003842:	2b40      	cmp	r3, #64	@ 0x40
 8003844:	d008      	beq.n	8003858 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003854:	601a      	str	r2, [r3, #0]
 8003856:	e000      	b.n	800385a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8003858:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003862:	7dfb      	ldrb	r3, [r7, #23]
}
 8003864:	4618      	mov	r0, r3
 8003866:	371c      	adds	r7, #28
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr
 8003870:	08003c0b 	.word	0x08003c0b
 8003874:	08003c71 	.word	0x08003c71
 8003878:	08003abb 	.word	0x08003abb
 800387c:	08003b79 	.word	0x08003b79

08003880 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b088      	sub	sp, #32
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10e      	bne.n	80038c0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d009      	beq.n	80038c0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d004      	beq.n	80038c0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	4798      	blx	r3
    return;
 80038be:	e0ce      	b.n	8003a5e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d009      	beq.n	80038de <HAL_SPI_IRQHandler+0x5e>
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d004      	beq.n	80038de <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	4798      	blx	r3
    return;
 80038dc:	e0bf      	b.n	8003a5e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	f003 0320 	and.w	r3, r3, #32
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d10a      	bne.n	80038fe <HAL_SPI_IRQHandler+0x7e>
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d105      	bne.n	80038fe <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f000 80b0 	beq.w	8003a5e <HAL_SPI_IRQHandler+0x1de>
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	f003 0320 	and.w	r3, r3, #32
 8003904:	2b00      	cmp	r3, #0
 8003906:	f000 80aa 	beq.w	8003a5e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003910:	2b00      	cmp	r3, #0
 8003912:	d023      	beq.n	800395c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b03      	cmp	r3, #3
 800391e:	d011      	beq.n	8003944 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003924:	f043 0204 	orr.w	r2, r3, #4
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800392c:	2300      	movs	r3, #0
 800392e:	617b      	str	r3, [r7, #20]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	617b      	str	r3, [r7, #20]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	617b      	str	r3, [r7, #20]
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	e00b      	b.n	800395c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003944:	2300      	movs	r3, #0
 8003946:	613b      	str	r3, [r7, #16]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	613b      	str	r3, [r7, #16]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	613b      	str	r3, [r7, #16]
 8003958:	693b      	ldr	r3, [r7, #16]
        return;
 800395a:	e080      	b.n	8003a5e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	f003 0320 	and.w	r3, r3, #32
 8003962:	2b00      	cmp	r3, #0
 8003964:	d014      	beq.n	8003990 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800396a:	f043 0201 	orr.w	r2, r3, #1
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003972:	2300      	movs	r3, #0
 8003974:	60fb      	str	r3, [r7, #12]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	60fb      	str	r3, [r7, #12]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800398c:	601a      	str	r2, [r3, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00c      	beq.n	80039b4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800399e:	f043 0208 	orr.w	r2, r3, #8
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80039a6:	2300      	movs	r3, #0
 80039a8:	60bb      	str	r3, [r7, #8]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	60bb      	str	r3, [r7, #8]
 80039b2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d04f      	beq.n	8003a5c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685a      	ldr	r2, [r3, #4]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80039ca:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d104      	bne.n	80039e8 <HAL_SPI_IRQHandler+0x168>
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d034      	beq.n	8003a52 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	685a      	ldr	r2, [r3, #4]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f022 0203 	bic.w	r2, r2, #3
 80039f6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d011      	beq.n	8003a24 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a04:	4a17      	ldr	r2, [pc, #92]	@ (8003a64 <HAL_SPI_IRQHandler+0x1e4>)
 8003a06:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7fd fea0 	bl	8001752 <HAL_DMA_Abort_IT>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d005      	beq.n	8003a24 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a1c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d016      	beq.n	8003a5a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a30:	4a0c      	ldr	r2, [pc, #48]	@ (8003a64 <HAL_SPI_IRQHandler+0x1e4>)
 8003a32:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7fd fe8a 	bl	8001752 <HAL_DMA_Abort_IT>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00a      	beq.n	8003a5a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a48:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8003a50:	e003      	b.n	8003a5a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f812 	bl	8003a7c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003a58:	e000      	b.n	8003a5c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8003a5a:	bf00      	nop
    return;
 8003a5c:	bf00      	nop
  }
}
 8003a5e:	3720      	adds	r7, #32
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	08003a91 	.word	0x08003a91

08003a68 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f7ff ffe5 	bl	8003a7c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003ab2:	bf00      	nop
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b082      	sub	sp, #8
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d923      	bls.n	8003b16 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68da      	ldr	r2, [r3, #12]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad8:	b292      	uxth	r2, r2
 8003ada:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae0:	1c9a      	adds	r2, r3, #2
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	3b02      	subs	r3, #2
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d11f      	bne.n	8003b44 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003b12:	605a      	str	r2, [r3, #4]
 8003b14:	e016      	b.n	8003b44 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f103 020c 	add.w	r2, r3, #12
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b22:	7812      	ldrb	r2, [r2, #0]
 8003b24:	b2d2      	uxtb	r2, r2
 8003b26:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b2c:	1c5a      	adds	r2, r3, #1
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10f      	bne.n	8003b70 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	685a      	ldr	r2, [r3, #4]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003b5e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d102      	bne.n	8003b70 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 faba 	bl	80040e4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003b70:	bf00      	nop
 8003b72:	3708      	adds	r7, #8
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d912      	bls.n	8003bb0 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b8e:	881a      	ldrh	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b9a:	1c9a      	adds	r2, r3, #2
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	3b02      	subs	r3, #2
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003bae:	e012      	b.n	8003bd6 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	330c      	adds	r3, #12
 8003bba:	7812      	ldrb	r2, [r2, #0]
 8003bbc:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bc2:	1c5a      	adds	r2, r3, #1
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d110      	bne.n	8003c02 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	685a      	ldr	r2, [r3, #4]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003bee:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d102      	bne.n	8003c02 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 fa71 	bl	80040e4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003c02:	bf00      	nop
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b082      	sub	sp, #8
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68da      	ldr	r2, [r3, #12]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1c:	b292      	uxth	r2, r2
 8003c1e:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c24:	1c9a      	adds	r2, r3, #2
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	3b01      	subs	r3, #1
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10f      	bne.n	8003c68 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	685a      	ldr	r2, [r3, #4]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c56:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d102      	bne.n	8003c68 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 fa3e 	bl	80040e4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003c68:	bf00      	nop
 8003c6a:	3708      	adds	r7, #8
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c7c:	881a      	ldrh	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c88:	1c9a      	adds	r2, r3, #2
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	3b01      	subs	r3, #1
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d110      	bne.n	8003cc8 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	685a      	ldr	r2, [r3, #4]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003cb4:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d102      	bne.n	8003cc8 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 fa0e 	bl	80040e4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003cc8:	bf00      	nop
 8003cca:	3708      	adds	r7, #8
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f103 020c 	add.w	r2, r3, #12
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce4:	7812      	ldrb	r2, [r2, #0]
 8003ce6:	b2d2      	uxtb	r2, r2
 8003ce8:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cee:	1c5a      	adds	r2, r3, #1
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d102      	bne.n	8003d18 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 fa28 	bl	8004168 <SPI_CloseRx_ISR>
  }
}
 8003d18:	bf00      	nop
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68da      	ldr	r2, [r3, #12]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d32:	b292      	uxth	r2, r2
 8003d34:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3a:	1c9a      	adds	r2, r3, #2
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d102      	bne.n	8003d64 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 fa02 	bl	8004168 <SPI_CloseRx_ISR>
  }
}
 8003d64:	bf00      	nop
 8003d66:	3708      	adds	r7, #8
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b088      	sub	sp, #32
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	603b      	str	r3, [r7, #0]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d7c:	f7fd fab8 	bl	80012f0 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d84:	1a9b      	subs	r3, r3, r2
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	4413      	add	r3, r2
 8003d8a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d8c:	f7fd fab0 	bl	80012f0 <HAL_GetTick>
 8003d90:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d92:	4b39      	ldr	r3, [pc, #228]	@ (8003e78 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	015b      	lsls	r3, r3, #5
 8003d98:	0d1b      	lsrs	r3, r3, #20
 8003d9a:	69fa      	ldr	r2, [r7, #28]
 8003d9c:	fb02 f303 	mul.w	r3, r2, r3
 8003da0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003da2:	e054      	b.n	8003e4e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003daa:	d050      	beq.n	8003e4e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003dac:	f7fd faa0 	bl	80012f0 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	69fa      	ldr	r2, [r7, #28]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d902      	bls.n	8003dc2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d13d      	bne.n	8003e3e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	685a      	ldr	r2, [r3, #4]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003dd0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003dda:	d111      	bne.n	8003e00 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003de4:	d004      	beq.n	8003df0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dee:	d107      	bne.n	8003e00 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003dfe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e08:	d10f      	bne.n	8003e2a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e017      	b.n	8003e6e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d101      	bne.n	8003e48 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e44:	2300      	movs	r3, #0
 8003e46:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	689a      	ldr	r2, [r3, #8]
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	4013      	ands	r3, r2
 8003e58:	68ba      	ldr	r2, [r7, #8]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	bf0c      	ite	eq
 8003e5e:	2301      	moveq	r3, #1
 8003e60:	2300      	movne	r3, #0
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	461a      	mov	r2, r3
 8003e66:	79fb      	ldrb	r3, [r7, #7]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d19b      	bne.n	8003da4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3720      	adds	r7, #32
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	20000128 	.word	0x20000128

08003e7c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b08a      	sub	sp, #40	@ 0x28
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
 8003e88:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003e8e:	f7fd fa2f 	bl	80012f0 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e96:	1a9b      	subs	r3, r3, r2
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003e9e:	f7fd fa27 	bl	80012f0 <HAL_GetTick>
 8003ea2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	330c      	adds	r3, #12
 8003eaa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003eac:	4b3d      	ldr	r3, [pc, #244]	@ (8003fa4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4413      	add	r3, r2
 8003eb6:	00da      	lsls	r2, r3, #3
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	0d1b      	lsrs	r3, r3, #20
 8003ebc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ebe:	fb02 f303 	mul.w	r3, r2, r3
 8003ec2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003ec4:	e060      	b.n	8003f88 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003ecc:	d107      	bne.n	8003ede <SPI_WaitFifoStateUntilTimeout+0x62>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d104      	bne.n	8003ede <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003edc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee4:	d050      	beq.n	8003f88 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ee6:	f7fd fa03 	bl	80012f0 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	6a3b      	ldr	r3, [r7, #32]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d902      	bls.n	8003efc <SPI_WaitFifoStateUntilTimeout+0x80>
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d13d      	bne.n	8003f78 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003f0a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f14:	d111      	bne.n	8003f3a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f1e:	d004      	beq.n	8003f2a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f28:	d107      	bne.n	8003f3a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f38:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f42:	d10f      	bne.n	8003f64 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f52:	601a      	str	r2, [r3, #0]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f62:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e010      	b.n	8003f9a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	3b01      	subs	r3, #1
 8003f86:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689a      	ldr	r2, [r3, #8]
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	4013      	ands	r3, r2
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d196      	bne.n	8003ec6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3728      	adds	r7, #40	@ 0x28
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	20000128 	.word	0x20000128

08003fa8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af02      	add	r7, sp, #8
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003fbc:	d111      	bne.n	8003fe2 <SPI_EndRxTransaction+0x3a>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fc6:	d004      	beq.n	8003fd2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fd0:	d107      	bne.n	8003fe2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fe0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	2180      	movs	r1, #128	@ 0x80
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f7ff febd 	bl	8003d6c <SPI_WaitFlagStateUntilTimeout>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d007      	beq.n	8004008 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ffc:	f043 0220 	orr.w	r2, r3, #32
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e023      	b.n	8004050 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004010:	d11d      	bne.n	800404e <SPI_EndRxTransaction+0xa6>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800401a:	d004      	beq.n	8004026 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004024:	d113      	bne.n	800404e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	9300      	str	r3, [sp, #0]
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	2200      	movs	r2, #0
 800402e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f7ff ff22 	bl	8003e7c <SPI_WaitFifoStateUntilTimeout>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d007      	beq.n	800404e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004042:	f043 0220 	orr.w	r2, r3, #32
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e000      	b.n	8004050 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	3710      	adds	r7, #16
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b086      	sub	sp, #24
 800405c:	af02      	add	r7, sp, #8
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	9300      	str	r3, [sp, #0]
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	2200      	movs	r2, #0
 800406c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f7ff ff03 	bl	8003e7c <SPI_WaitFifoStateUntilTimeout>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d007      	beq.n	800408c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004080:	f043 0220 	orr.w	r2, r3, #32
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e027      	b.n	80040dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	9300      	str	r3, [sp, #0]
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	2200      	movs	r2, #0
 8004094:	2180      	movs	r1, #128	@ 0x80
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	f7ff fe68 	bl	8003d6c <SPI_WaitFlagStateUntilTimeout>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d007      	beq.n	80040b2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040a6:	f043 0220 	orr.w	r2, r3, #32
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e014      	b.n	80040dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f7ff fedc 	bl	8003e7c <SPI_WaitFifoStateUntilTimeout>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d007      	beq.n	80040da <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040ce:	f043 0220 	orr.w	r2, r3, #32
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e000      	b.n	80040dc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3710      	adds	r7, #16
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040ec:	f7fd f900 	bl	80012f0 <HAL_GetTick>
 80040f0:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 0220 	bic.w	r2, r2, #32
 8004100:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	2164      	movs	r1, #100	@ 0x64
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f7ff ffa6 	bl	8004058 <SPI_EndRxTxTransaction>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d005      	beq.n	800411e <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004116:	f043 0220 	orr.w	r2, r3, #32
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	661a      	str	r2, [r3, #96]	@ 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004122:	2b00      	cmp	r3, #0
 8004124:	d115      	bne.n	8004152 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b04      	cmp	r3, #4
 8004130:	d107      	bne.n	8004142 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f7fc fdd6 	bl	8000cec <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8004140:	e00e      	b.n	8004160 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7ff fc8c 	bl	8003a68 <HAL_SPI_TxRxCpltCallback>
}
 8004150:	e006      	b.n	8004160 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f7ff fc8e 	bl	8003a7c <HAL_SPI_ErrorCallback>
}
 8004160:	bf00      	nop
 8004162:	3710      	adds	r7, #16
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685a      	ldr	r2, [r3, #4]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800417e:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8004180:	f7fd f8b6 	bl	80012f0 <HAL_GetTick>
 8004184:	4603      	mov	r3, r0
 8004186:	461a      	mov	r2, r3
 8004188:	2164      	movs	r1, #100	@ 0x64
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f7ff ff0c 	bl	8003fa8 <SPI_EndRxTransaction>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d005      	beq.n	80041a2 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800419a:	f043 0220 	orr.w	r2, r3, #32
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	661a      	str	r2, [r3, #96]	@ 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d103      	bne.n	80041ba <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f7fc fd9a 	bl	8000cec <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80041b8:	e002      	b.n	80041c0 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f7ff fc5e 	bl	8003a7c <HAL_SPI_ErrorCallback>
}
 80041c0:	bf00      	nop
 80041c2:	3708      	adds	r7, #8
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e040      	b.n	800425c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d106      	bne.n	80041f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7fc ff6e 	bl	80010cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2224      	movs	r2, #36	@ 0x24
 80041f4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f022 0201 	bic.w	r2, r2, #1
 8004204:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f82c 	bl	8004264 <UART_SetConfig>
 800420c:	4603      	mov	r3, r0
 800420e:	2b01      	cmp	r3, #1
 8004210:	d101      	bne.n	8004216 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e022      	b.n	800425c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421a:	2b00      	cmp	r3, #0
 800421c:	d002      	beq.n	8004224 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 f9f4 	bl	800460c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004232:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	689a      	ldr	r2, [r3, #8]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004242:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0201 	orr.w	r2, r2, #1
 8004252:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 fa7b 	bl	8004750 <UART_CheckIdleState>
 800425a:	4603      	mov	r3, r0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3708      	adds	r7, #8
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b088      	sub	sp, #32
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800426c:	2300      	movs	r3, #0
 800426e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689a      	ldr	r2, [r3, #8]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	431a      	orrs	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	431a      	orrs	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	69db      	ldr	r3, [r3, #28]
 8004284:	4313      	orrs	r3, r2
 8004286:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	4b92      	ldr	r3, [pc, #584]	@ (80044d8 <UART_SetConfig+0x274>)
 8004290:	4013      	ands	r3, r2
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	6812      	ldr	r2, [r2, #0]
 8004296:	6979      	ldr	r1, [r7, #20]
 8004298:	430b      	orrs	r3, r1
 800429a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	68da      	ldr	r2, [r3, #12]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	430a      	orrs	r2, r1
 80042b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a1b      	ldr	r3, [r3, #32]
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	4313      	orrs	r3, r2
 80042c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a80      	ldr	r2, [pc, #512]	@ (80044dc <UART_SetConfig+0x278>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d120      	bne.n	8004322 <UART_SetConfig+0xbe>
 80042e0:	4b7f      	ldr	r3, [pc, #508]	@ (80044e0 <UART_SetConfig+0x27c>)
 80042e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042e4:	f003 0303 	and.w	r3, r3, #3
 80042e8:	2b03      	cmp	r3, #3
 80042ea:	d817      	bhi.n	800431c <UART_SetConfig+0xb8>
 80042ec:	a201      	add	r2, pc, #4	@ (adr r2, 80042f4 <UART_SetConfig+0x90>)
 80042ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f2:	bf00      	nop
 80042f4:	08004305 	.word	0x08004305
 80042f8:	08004311 	.word	0x08004311
 80042fc:	08004317 	.word	0x08004317
 8004300:	0800430b 	.word	0x0800430b
 8004304:	2301      	movs	r3, #1
 8004306:	77fb      	strb	r3, [r7, #31]
 8004308:	e0b5      	b.n	8004476 <UART_SetConfig+0x212>
 800430a:	2302      	movs	r3, #2
 800430c:	77fb      	strb	r3, [r7, #31]
 800430e:	e0b2      	b.n	8004476 <UART_SetConfig+0x212>
 8004310:	2304      	movs	r3, #4
 8004312:	77fb      	strb	r3, [r7, #31]
 8004314:	e0af      	b.n	8004476 <UART_SetConfig+0x212>
 8004316:	2308      	movs	r3, #8
 8004318:	77fb      	strb	r3, [r7, #31]
 800431a:	e0ac      	b.n	8004476 <UART_SetConfig+0x212>
 800431c:	2310      	movs	r3, #16
 800431e:	77fb      	strb	r3, [r7, #31]
 8004320:	e0a9      	b.n	8004476 <UART_SetConfig+0x212>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a6f      	ldr	r2, [pc, #444]	@ (80044e4 <UART_SetConfig+0x280>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d124      	bne.n	8004376 <UART_SetConfig+0x112>
 800432c:	4b6c      	ldr	r3, [pc, #432]	@ (80044e0 <UART_SetConfig+0x27c>)
 800432e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004330:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004334:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004338:	d011      	beq.n	800435e <UART_SetConfig+0xfa>
 800433a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800433e:	d817      	bhi.n	8004370 <UART_SetConfig+0x10c>
 8004340:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004344:	d011      	beq.n	800436a <UART_SetConfig+0x106>
 8004346:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800434a:	d811      	bhi.n	8004370 <UART_SetConfig+0x10c>
 800434c:	2b00      	cmp	r3, #0
 800434e:	d003      	beq.n	8004358 <UART_SetConfig+0xf4>
 8004350:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004354:	d006      	beq.n	8004364 <UART_SetConfig+0x100>
 8004356:	e00b      	b.n	8004370 <UART_SetConfig+0x10c>
 8004358:	2300      	movs	r3, #0
 800435a:	77fb      	strb	r3, [r7, #31]
 800435c:	e08b      	b.n	8004476 <UART_SetConfig+0x212>
 800435e:	2302      	movs	r3, #2
 8004360:	77fb      	strb	r3, [r7, #31]
 8004362:	e088      	b.n	8004476 <UART_SetConfig+0x212>
 8004364:	2304      	movs	r3, #4
 8004366:	77fb      	strb	r3, [r7, #31]
 8004368:	e085      	b.n	8004476 <UART_SetConfig+0x212>
 800436a:	2308      	movs	r3, #8
 800436c:	77fb      	strb	r3, [r7, #31]
 800436e:	e082      	b.n	8004476 <UART_SetConfig+0x212>
 8004370:	2310      	movs	r3, #16
 8004372:	77fb      	strb	r3, [r7, #31]
 8004374:	e07f      	b.n	8004476 <UART_SetConfig+0x212>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a5b      	ldr	r2, [pc, #364]	@ (80044e8 <UART_SetConfig+0x284>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d124      	bne.n	80043ca <UART_SetConfig+0x166>
 8004380:	4b57      	ldr	r3, [pc, #348]	@ (80044e0 <UART_SetConfig+0x27c>)
 8004382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004384:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004388:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800438c:	d011      	beq.n	80043b2 <UART_SetConfig+0x14e>
 800438e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004392:	d817      	bhi.n	80043c4 <UART_SetConfig+0x160>
 8004394:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004398:	d011      	beq.n	80043be <UART_SetConfig+0x15a>
 800439a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800439e:	d811      	bhi.n	80043c4 <UART_SetConfig+0x160>
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d003      	beq.n	80043ac <UART_SetConfig+0x148>
 80043a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80043a8:	d006      	beq.n	80043b8 <UART_SetConfig+0x154>
 80043aa:	e00b      	b.n	80043c4 <UART_SetConfig+0x160>
 80043ac:	2300      	movs	r3, #0
 80043ae:	77fb      	strb	r3, [r7, #31]
 80043b0:	e061      	b.n	8004476 <UART_SetConfig+0x212>
 80043b2:	2302      	movs	r3, #2
 80043b4:	77fb      	strb	r3, [r7, #31]
 80043b6:	e05e      	b.n	8004476 <UART_SetConfig+0x212>
 80043b8:	2304      	movs	r3, #4
 80043ba:	77fb      	strb	r3, [r7, #31]
 80043bc:	e05b      	b.n	8004476 <UART_SetConfig+0x212>
 80043be:	2308      	movs	r3, #8
 80043c0:	77fb      	strb	r3, [r7, #31]
 80043c2:	e058      	b.n	8004476 <UART_SetConfig+0x212>
 80043c4:	2310      	movs	r3, #16
 80043c6:	77fb      	strb	r3, [r7, #31]
 80043c8:	e055      	b.n	8004476 <UART_SetConfig+0x212>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a47      	ldr	r2, [pc, #284]	@ (80044ec <UART_SetConfig+0x288>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d124      	bne.n	800441e <UART_SetConfig+0x1ba>
 80043d4:	4b42      	ldr	r3, [pc, #264]	@ (80044e0 <UART_SetConfig+0x27c>)
 80043d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80043dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80043e0:	d011      	beq.n	8004406 <UART_SetConfig+0x1a2>
 80043e2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80043e6:	d817      	bhi.n	8004418 <UART_SetConfig+0x1b4>
 80043e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80043ec:	d011      	beq.n	8004412 <UART_SetConfig+0x1ae>
 80043ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80043f2:	d811      	bhi.n	8004418 <UART_SetConfig+0x1b4>
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d003      	beq.n	8004400 <UART_SetConfig+0x19c>
 80043f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043fc:	d006      	beq.n	800440c <UART_SetConfig+0x1a8>
 80043fe:	e00b      	b.n	8004418 <UART_SetConfig+0x1b4>
 8004400:	2300      	movs	r3, #0
 8004402:	77fb      	strb	r3, [r7, #31]
 8004404:	e037      	b.n	8004476 <UART_SetConfig+0x212>
 8004406:	2302      	movs	r3, #2
 8004408:	77fb      	strb	r3, [r7, #31]
 800440a:	e034      	b.n	8004476 <UART_SetConfig+0x212>
 800440c:	2304      	movs	r3, #4
 800440e:	77fb      	strb	r3, [r7, #31]
 8004410:	e031      	b.n	8004476 <UART_SetConfig+0x212>
 8004412:	2308      	movs	r3, #8
 8004414:	77fb      	strb	r3, [r7, #31]
 8004416:	e02e      	b.n	8004476 <UART_SetConfig+0x212>
 8004418:	2310      	movs	r3, #16
 800441a:	77fb      	strb	r3, [r7, #31]
 800441c:	e02b      	b.n	8004476 <UART_SetConfig+0x212>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a33      	ldr	r2, [pc, #204]	@ (80044f0 <UART_SetConfig+0x28c>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d124      	bne.n	8004472 <UART_SetConfig+0x20e>
 8004428:	4b2d      	ldr	r3, [pc, #180]	@ (80044e0 <UART_SetConfig+0x27c>)
 800442a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800442c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004430:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004434:	d011      	beq.n	800445a <UART_SetConfig+0x1f6>
 8004436:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800443a:	d817      	bhi.n	800446c <UART_SetConfig+0x208>
 800443c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004440:	d011      	beq.n	8004466 <UART_SetConfig+0x202>
 8004442:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004446:	d811      	bhi.n	800446c <UART_SetConfig+0x208>
 8004448:	2b00      	cmp	r3, #0
 800444a:	d003      	beq.n	8004454 <UART_SetConfig+0x1f0>
 800444c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004450:	d006      	beq.n	8004460 <UART_SetConfig+0x1fc>
 8004452:	e00b      	b.n	800446c <UART_SetConfig+0x208>
 8004454:	2300      	movs	r3, #0
 8004456:	77fb      	strb	r3, [r7, #31]
 8004458:	e00d      	b.n	8004476 <UART_SetConfig+0x212>
 800445a:	2302      	movs	r3, #2
 800445c:	77fb      	strb	r3, [r7, #31]
 800445e:	e00a      	b.n	8004476 <UART_SetConfig+0x212>
 8004460:	2304      	movs	r3, #4
 8004462:	77fb      	strb	r3, [r7, #31]
 8004464:	e007      	b.n	8004476 <UART_SetConfig+0x212>
 8004466:	2308      	movs	r3, #8
 8004468:	77fb      	strb	r3, [r7, #31]
 800446a:	e004      	b.n	8004476 <UART_SetConfig+0x212>
 800446c:	2310      	movs	r3, #16
 800446e:	77fb      	strb	r3, [r7, #31]
 8004470:	e001      	b.n	8004476 <UART_SetConfig+0x212>
 8004472:	2310      	movs	r3, #16
 8004474:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800447e:	d16b      	bne.n	8004558 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8004480:	7ffb      	ldrb	r3, [r7, #31]
 8004482:	2b08      	cmp	r3, #8
 8004484:	d838      	bhi.n	80044f8 <UART_SetConfig+0x294>
 8004486:	a201      	add	r2, pc, #4	@ (adr r2, 800448c <UART_SetConfig+0x228>)
 8004488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800448c:	080044b1 	.word	0x080044b1
 8004490:	080044b9 	.word	0x080044b9
 8004494:	080044c1 	.word	0x080044c1
 8004498:	080044f9 	.word	0x080044f9
 800449c:	080044c7 	.word	0x080044c7
 80044a0:	080044f9 	.word	0x080044f9
 80044a4:	080044f9 	.word	0x080044f9
 80044a8:	080044f9 	.word	0x080044f9
 80044ac:	080044cf 	.word	0x080044cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044b0:	f7fe fd78 	bl	8002fa4 <HAL_RCC_GetPCLK1Freq>
 80044b4:	61b8      	str	r0, [r7, #24]
        break;
 80044b6:	e024      	b.n	8004502 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044b8:	f7fe fd96 	bl	8002fe8 <HAL_RCC_GetPCLK2Freq>
 80044bc:	61b8      	str	r0, [r7, #24]
        break;
 80044be:	e020      	b.n	8004502 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044c0:	4b0c      	ldr	r3, [pc, #48]	@ (80044f4 <UART_SetConfig+0x290>)
 80044c2:	61bb      	str	r3, [r7, #24]
        break;
 80044c4:	e01d      	b.n	8004502 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044c6:	f7fe fcf5 	bl	8002eb4 <HAL_RCC_GetSysClockFreq>
 80044ca:	61b8      	str	r0, [r7, #24]
        break;
 80044cc:	e019      	b.n	8004502 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044d2:	61bb      	str	r3, [r7, #24]
        break;
 80044d4:	e015      	b.n	8004502 <UART_SetConfig+0x29e>
 80044d6:	bf00      	nop
 80044d8:	efff69f3 	.word	0xefff69f3
 80044dc:	40013800 	.word	0x40013800
 80044e0:	40021000 	.word	0x40021000
 80044e4:	40004400 	.word	0x40004400
 80044e8:	40004800 	.word	0x40004800
 80044ec:	40004c00 	.word	0x40004c00
 80044f0:	40005000 	.word	0x40005000
 80044f4:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80044f8:	2300      	movs	r3, #0
 80044fa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	77bb      	strb	r3, [r7, #30]
        break;
 8004500:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d073      	beq.n	80045f0 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	005a      	lsls	r2, r3, #1
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	085b      	lsrs	r3, r3, #1
 8004512:	441a      	add	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	fbb2 f3f3 	udiv	r3, r2, r3
 800451c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	2b0f      	cmp	r3, #15
 8004522:	d916      	bls.n	8004552 <UART_SetConfig+0x2ee>
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800452a:	d212      	bcs.n	8004552 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	b29b      	uxth	r3, r3
 8004530:	f023 030f 	bic.w	r3, r3, #15
 8004534:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	085b      	lsrs	r3, r3, #1
 800453a:	b29b      	uxth	r3, r3
 800453c:	f003 0307 	and.w	r3, r3, #7
 8004540:	b29a      	uxth	r2, r3
 8004542:	89fb      	ldrh	r3, [r7, #14]
 8004544:	4313      	orrs	r3, r2
 8004546:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	89fa      	ldrh	r2, [r7, #14]
 800454e:	60da      	str	r2, [r3, #12]
 8004550:	e04e      	b.n	80045f0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	77bb      	strb	r3, [r7, #30]
 8004556:	e04b      	b.n	80045f0 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004558:	7ffb      	ldrb	r3, [r7, #31]
 800455a:	2b08      	cmp	r3, #8
 800455c:	d827      	bhi.n	80045ae <UART_SetConfig+0x34a>
 800455e:	a201      	add	r2, pc, #4	@ (adr r2, 8004564 <UART_SetConfig+0x300>)
 8004560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004564:	08004589 	.word	0x08004589
 8004568:	08004591 	.word	0x08004591
 800456c:	08004599 	.word	0x08004599
 8004570:	080045af 	.word	0x080045af
 8004574:	0800459f 	.word	0x0800459f
 8004578:	080045af 	.word	0x080045af
 800457c:	080045af 	.word	0x080045af
 8004580:	080045af 	.word	0x080045af
 8004584:	080045a7 	.word	0x080045a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004588:	f7fe fd0c 	bl	8002fa4 <HAL_RCC_GetPCLK1Freq>
 800458c:	61b8      	str	r0, [r7, #24]
        break;
 800458e:	e013      	b.n	80045b8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004590:	f7fe fd2a 	bl	8002fe8 <HAL_RCC_GetPCLK2Freq>
 8004594:	61b8      	str	r0, [r7, #24]
        break;
 8004596:	e00f      	b.n	80045b8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004598:	4b1b      	ldr	r3, [pc, #108]	@ (8004608 <UART_SetConfig+0x3a4>)
 800459a:	61bb      	str	r3, [r7, #24]
        break;
 800459c:	e00c      	b.n	80045b8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800459e:	f7fe fc89 	bl	8002eb4 <HAL_RCC_GetSysClockFreq>
 80045a2:	61b8      	str	r0, [r7, #24]
        break;
 80045a4:	e008      	b.n	80045b8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045aa:	61bb      	str	r3, [r7, #24]
        break;
 80045ac:	e004      	b.n	80045b8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80045ae:	2300      	movs	r3, #0
 80045b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	77bb      	strb	r3, [r7, #30]
        break;
 80045b6:	bf00      	nop
    }

    if (pclk != 0U)
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d018      	beq.n	80045f0 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	085a      	lsrs	r2, r3, #1
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	441a      	add	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	2b0f      	cmp	r3, #15
 80045d6:	d909      	bls.n	80045ec <UART_SetConfig+0x388>
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045de:	d205      	bcs.n	80045ec <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	60da      	str	r2, [r3, #12]
 80045ea:	e001      	b.n	80045f0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80045fc:	7fbb      	ldrb	r3, [r7, #30]
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3720      	adds	r7, #32
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	007a1200 	.word	0x007a1200

0800460c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00a      	beq.n	8004636 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	430a      	orrs	r2, r1
 8004634:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00a      	beq.n	8004658 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	430a      	orrs	r2, r1
 8004656:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800465c:	f003 0304 	and.w	r3, r3, #4
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00a      	beq.n	800467a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	430a      	orrs	r2, r1
 8004678:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800467e:	f003 0308 	and.w	r3, r3, #8
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00a      	beq.n	800469c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	430a      	orrs	r2, r1
 800469a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a0:	f003 0310 	and.w	r3, r3, #16
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00a      	beq.n	80046be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c2:	f003 0320 	and.w	r3, r3, #32
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00a      	beq.n	80046e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	430a      	orrs	r2, r1
 80046de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d01a      	beq.n	8004722 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	430a      	orrs	r2, r1
 8004700:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004706:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800470a:	d10a      	bne.n	8004722 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	430a      	orrs	r2, r1
 8004720:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00a      	beq.n	8004744 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	430a      	orrs	r2, r1
 8004742:	605a      	str	r2, [r3, #4]
  }
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b098      	sub	sp, #96	@ 0x60
 8004754:	af02      	add	r7, sp, #8
 8004756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004760:	f7fc fdc6 	bl	80012f0 <HAL_GetTick>
 8004764:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0308 	and.w	r3, r3, #8
 8004770:	2b08      	cmp	r3, #8
 8004772:	d12e      	bne.n	80047d2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004774:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800477c:	2200      	movs	r2, #0
 800477e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 f88c 	bl	80048a0 <UART_WaitOnFlagUntilTimeout>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d021      	beq.n	80047d2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004796:	e853 3f00 	ldrex	r3, [r3]
 800479a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800479c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800479e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	461a      	mov	r2, r3
 80047aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80047ae:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80047b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047b4:	e841 2300 	strex	r3, r2, [r1]
 80047b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80047ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1e6      	bne.n	800478e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2220      	movs	r2, #32
 80047c4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e062      	b.n	8004898 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0304 	and.w	r3, r3, #4
 80047dc:	2b04      	cmp	r3, #4
 80047de:	d149      	bne.n	8004874 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80047e4:	9300      	str	r3, [sp, #0]
 80047e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047e8:	2200      	movs	r2, #0
 80047ea:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f856 	bl	80048a0 <UART_WaitOnFlagUntilTimeout>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d03c      	beq.n	8004874 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004802:	e853 3f00 	ldrex	r3, [r3]
 8004806:	623b      	str	r3, [r7, #32]
   return(result);
 8004808:	6a3b      	ldr	r3, [r7, #32]
 800480a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800480e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	461a      	mov	r2, r3
 8004816:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004818:	633b      	str	r3, [r7, #48]	@ 0x30
 800481a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800481e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004820:	e841 2300 	strex	r3, r2, [r1]
 8004824:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004828:	2b00      	cmp	r3, #0
 800482a:	d1e6      	bne.n	80047fa <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	3308      	adds	r3, #8
 8004832:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	e853 3f00 	ldrex	r3, [r3]
 800483a:	60fb      	str	r3, [r7, #12]
   return(result);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f023 0301 	bic.w	r3, r3, #1
 8004842:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	3308      	adds	r3, #8
 800484a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800484c:	61fa      	str	r2, [r7, #28]
 800484e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004850:	69b9      	ldr	r1, [r7, #24]
 8004852:	69fa      	ldr	r2, [r7, #28]
 8004854:	e841 2300 	strex	r3, r2, [r1]
 8004858:	617b      	str	r3, [r7, #20]
   return(result);
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1e5      	bne.n	800482c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2220      	movs	r2, #32
 8004864:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	e011      	b.n	8004898 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2220      	movs	r2, #32
 8004878:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2220      	movs	r2, #32
 800487e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3758      	adds	r7, #88	@ 0x58
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	603b      	str	r3, [r7, #0]
 80048ac:	4613      	mov	r3, r2
 80048ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048b0:	e049      	b.n	8004946 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b8:	d045      	beq.n	8004946 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ba:	f7fc fd19 	bl	80012f0 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d302      	bcc.n	80048d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d101      	bne.n	80048d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e048      	b.n	8004966 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0304 	and.w	r3, r3, #4
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d031      	beq.n	8004946 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	69db      	ldr	r3, [r3, #28]
 80048e8:	f003 0308 	and.w	r3, r3, #8
 80048ec:	2b08      	cmp	r3, #8
 80048ee:	d110      	bne.n	8004912 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2208      	movs	r2, #8
 80048f6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	f000 f838 	bl	800496e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2208      	movs	r2, #8
 8004902:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e029      	b.n	8004966 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	69db      	ldr	r3, [r3, #28]
 8004918:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800491c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004920:	d111      	bne.n	8004946 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800492a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	f000 f81e 	bl	800496e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2220      	movs	r2, #32
 8004936:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e00f      	b.n	8004966 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	69da      	ldr	r2, [r3, #28]
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	4013      	ands	r3, r2
 8004950:	68ba      	ldr	r2, [r7, #8]
 8004952:	429a      	cmp	r2, r3
 8004954:	bf0c      	ite	eq
 8004956:	2301      	moveq	r3, #1
 8004958:	2300      	movne	r3, #0
 800495a:	b2db      	uxtb	r3, r3
 800495c:	461a      	mov	r2, r3
 800495e:	79fb      	ldrb	r3, [r7, #7]
 8004960:	429a      	cmp	r2, r3
 8004962:	d0a6      	beq.n	80048b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800496e:	b480      	push	{r7}
 8004970:	b095      	sub	sp, #84	@ 0x54
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800497e:	e853 3f00 	ldrex	r3, [r3]
 8004982:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004986:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800498a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	461a      	mov	r2, r3
 8004992:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004994:	643b      	str	r3, [r7, #64]	@ 0x40
 8004996:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004998:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800499a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800499c:	e841 2300 	strex	r3, r2, [r1]
 80049a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80049a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1e6      	bne.n	8004976 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	3308      	adds	r3, #8
 80049ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b0:	6a3b      	ldr	r3, [r7, #32]
 80049b2:	e853 3f00 	ldrex	r3, [r3]
 80049b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	f023 0301 	bic.w	r3, r3, #1
 80049be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	3308      	adds	r3, #8
 80049c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049d0:	e841 2300 	strex	r3, r2, [r1]
 80049d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80049d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1e5      	bne.n	80049a8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d118      	bne.n	8004a16 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	e853 3f00 	ldrex	r3, [r3]
 80049f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	f023 0310 	bic.w	r3, r3, #16
 80049f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	461a      	mov	r2, r3
 8004a00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a02:	61bb      	str	r3, [r7, #24]
 8004a04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a06:	6979      	ldr	r1, [r7, #20]
 8004a08:	69ba      	ldr	r2, [r7, #24]
 8004a0a:	e841 2300 	strex	r3, r2, [r1]
 8004a0e:	613b      	str	r3, [r7, #16]
   return(result);
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1e6      	bne.n	80049e4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2220      	movs	r2, #32
 8004a1a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004a2a:	bf00      	nop
 8004a2c:	3754      	adds	r7, #84	@ 0x54
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr

08004a36 <memcmp>:
 8004a36:	b510      	push	{r4, lr}
 8004a38:	3901      	subs	r1, #1
 8004a3a:	4402      	add	r2, r0
 8004a3c:	4290      	cmp	r0, r2
 8004a3e:	d101      	bne.n	8004a44 <memcmp+0xe>
 8004a40:	2000      	movs	r0, #0
 8004a42:	e005      	b.n	8004a50 <memcmp+0x1a>
 8004a44:	7803      	ldrb	r3, [r0, #0]
 8004a46:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004a4a:	42a3      	cmp	r3, r4
 8004a4c:	d001      	beq.n	8004a52 <memcmp+0x1c>
 8004a4e:	1b18      	subs	r0, r3, r4
 8004a50:	bd10      	pop	{r4, pc}
 8004a52:	3001      	adds	r0, #1
 8004a54:	e7f2      	b.n	8004a3c <memcmp+0x6>

08004a56 <memset>:
 8004a56:	4402      	add	r2, r0
 8004a58:	4603      	mov	r3, r0
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d100      	bne.n	8004a60 <memset+0xa>
 8004a5e:	4770      	bx	lr
 8004a60:	f803 1b01 	strb.w	r1, [r3], #1
 8004a64:	e7f9      	b.n	8004a5a <memset+0x4>
	...

08004a68 <__libc_init_array>:
 8004a68:	b570      	push	{r4, r5, r6, lr}
 8004a6a:	4d0d      	ldr	r5, [pc, #52]	@ (8004aa0 <__libc_init_array+0x38>)
 8004a6c:	4c0d      	ldr	r4, [pc, #52]	@ (8004aa4 <__libc_init_array+0x3c>)
 8004a6e:	1b64      	subs	r4, r4, r5
 8004a70:	10a4      	asrs	r4, r4, #2
 8004a72:	2600      	movs	r6, #0
 8004a74:	42a6      	cmp	r6, r4
 8004a76:	d109      	bne.n	8004a8c <__libc_init_array+0x24>
 8004a78:	4d0b      	ldr	r5, [pc, #44]	@ (8004aa8 <__libc_init_array+0x40>)
 8004a7a:	4c0c      	ldr	r4, [pc, #48]	@ (8004aac <__libc_init_array+0x44>)
 8004a7c:	f000 f826 	bl	8004acc <_init>
 8004a80:	1b64      	subs	r4, r4, r5
 8004a82:	10a4      	asrs	r4, r4, #2
 8004a84:	2600      	movs	r6, #0
 8004a86:	42a6      	cmp	r6, r4
 8004a88:	d105      	bne.n	8004a96 <__libc_init_array+0x2e>
 8004a8a:	bd70      	pop	{r4, r5, r6, pc}
 8004a8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a90:	4798      	blx	r3
 8004a92:	3601      	adds	r6, #1
 8004a94:	e7ee      	b.n	8004a74 <__libc_init_array+0xc>
 8004a96:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a9a:	4798      	blx	r3
 8004a9c:	3601      	adds	r6, #1
 8004a9e:	e7f2      	b.n	8004a86 <__libc_init_array+0x1e>
 8004aa0:	08004b48 	.word	0x08004b48
 8004aa4:	08004b48 	.word	0x08004b48
 8004aa8:	08004b48 	.word	0x08004b48
 8004aac:	08004b4c 	.word	0x08004b4c

08004ab0 <memcpy>:
 8004ab0:	440a      	add	r2, r1
 8004ab2:	4291      	cmp	r1, r2
 8004ab4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ab8:	d100      	bne.n	8004abc <memcpy+0xc>
 8004aba:	4770      	bx	lr
 8004abc:	b510      	push	{r4, lr}
 8004abe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ac2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ac6:	4291      	cmp	r1, r2
 8004ac8:	d1f9      	bne.n	8004abe <memcpy+0xe>
 8004aca:	bd10      	pop	{r4, pc}

08004acc <_init>:
 8004acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ace:	bf00      	nop
 8004ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ad2:	bc08      	pop	{r3}
 8004ad4:	469e      	mov	lr, r3
 8004ad6:	4770      	bx	lr

08004ad8 <_fini>:
 8004ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ada:	bf00      	nop
 8004adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ade:	bc08      	pop	{r3}
 8004ae0:	469e      	mov	lr, r3
 8004ae2:	4770      	bx	lr
