
BrakingECU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a6c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000400  08007c10  08007c10  00008c10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008010  08008010  0000a2fc  2**0
                  CONTENTS
  4 .ARM          00000008  08008010  08008010  00009010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008018  08008018  0000a2fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008018  08008018  00009018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800801c  0800801c  0000901c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002fc  20000000  08008020  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a2fc  2**0
                  CONTENTS
 10 .bss          000002a8  200002fc  200002fc  0000a2fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005a4  200005a4  0000a2fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a2fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d902  00000000  00000000  0000a32c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022fb  00000000  00000000  00017c2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000980  00000000  00000000  00019f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000727  00000000  00000000  0001a8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000217c7  00000000  00000000  0001afd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d4c7  00000000  00000000  0003c79e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c63c1  00000000  00000000  00049c65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00110026  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003604  00000000  00000000  0011006c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  00113670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002fc 	.word	0x200002fc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007bf4 	.word	0x08007bf4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000300 	.word	0x20000300
 80001dc:	08007bf4 	.word	0x08007bf4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <Com_Init>:
static Com_StatusType initStatus = COM_UNINIT;
static const uint32 endian_test  = 0xDEADBEEFu;


/* Startup and Control Services*/
void Com_Init(const Com_ConfigType *config){
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08a      	sub	sp, #40	@ 0x28
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
	/* @req COM128 */ /* Com_Init shall initialize all internal data that is not yet initialized by the start-up code*/
	/* @req COM217 */ /* COM module shall initialize each I-PDU during execution of Com_Init, firstly byte wise with the ComTxIPduUnusedAreasDefault value 
	and then bit wise according to initial values (ComSignalInitValue) of the contained signals and the update-bits */
	/* @req COM772 */ /* If timeout set to 0 */

	uint8 err = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* @req COM433 */
	if(config == NULL) {
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d104      	bne.n	8000bd6 <Com_Init+0x1e>
		Det_ReportError(COM_INIT_ID, COM_E_PARAM_POINTER);
 8000bcc:	216c      	movs	r1, #108	@ 0x6c
 8000bce:	2001      	movs	r0, #1
 8000bd0:	f000 fd1c 	bl	800160c <Det_ReportError>
 8000bd4:	e104      	b.n	8000de0 <Com_Init+0x228>
		return;
	}
	uint32 firstTimeout;
	boolean dataChanged = FALSE;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60bb      	str	r3, [r7, #8]
	ComConfig = config;
 8000bda:	4a83      	ldr	r2, [pc, #524]	@ (8000de8 <Com_Init+0x230>)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6013      	str	r3, [r2, #0]
	uint8 endian_byte = *(const uint8 *)&endian_test; /* Get last byte*/
 8000be0:	4b82      	ldr	r3, [pc, #520]	@ (8000dec <Com_Init+0x234>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	76fb      	strb	r3, [r7, #27]
	if(endian_byte == 0xEF ){ 
 8000be6:	7efb      	ldrb	r3, [r7, #27]
 8000be8:	2bef      	cmp	r3, #239	@ 0xef
 8000bea:	d103      	bne.n	8000bf4 <Com_Init+0x3c>
		Com_SystemEndianness = COM_LITTLE_ENDIAN; 
 8000bec:	4b80      	ldr	r3, [pc, #512]	@ (8000df0 <Com_Init+0x238>)
 8000bee:	2201      	movs	r2, #1
 8000bf0:	701a      	strb	r2, [r3, #0]
 8000bf2:	e009      	b.n	8000c08 <Com_Init+0x50>
	}
	else if(endian_byte == 0xDE){ 
 8000bf4:	7efb      	ldrb	r3, [r7, #27]
 8000bf6:	2bde      	cmp	r3, #222	@ 0xde
 8000bf8:	d103      	bne.n	8000c02 <Com_Init+0x4a>
		Com_SystemEndianness = COM_BIG_ENDIAN;
 8000bfa:	4b7d      	ldr	r3, [pc, #500]	@ (8000df0 <Com_Init+0x238>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	701a      	strb	r2, [r3, #0]
 8000c00:	e002      	b.n	8000c08 <Com_Init+0x50>
	}
	else {
		Com_SystemEndianness = COM_OPAQUE; /* Check */
 8000c02:	4b7b      	ldr	r3, [pc, #492]	@ (8000df0 <Com_Init+0x238>)
 8000c04:	2202      	movs	r2, #2
 8000c06:	701a      	strb	r2, [r3, #0]
	}
	const ComSignal_type *Signal;
	uint16 bufferIndex = 0, i, j;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	833b      	strh	r3, [r7, #24]
	for (i = 0; !ComConfig->ComIPdu[i].Com_EOL; i++) {
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	83fb      	strh	r3, [r7, #30]
 8000c10:	e0bc      	b.n	8000d8c <Com_Init+0x1d4>
	    boolean pduHasGroupSignal = FALSE;
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
		ComIPdu_type *IPdu = Com_GetIPDU(i);
 8000c16:	4b74      	ldr	r3, [pc, #464]	@ (8000de8 <Com_Init+0x230>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	8bfb      	ldrh	r3, [r7, #30]
 8000c1e:	019b      	lsls	r3, r3, #6
 8000c20:	4413      	add	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]

		if (ComConfig->ComNumOfIPDUs <= i) {
 8000c24:	4b70      	ldr	r3, [pc, #448]	@ (8000de8 <Com_Init+0x230>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	7a5b      	ldrb	r3, [r3, #9]
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	8bfb      	ldrh	r3, [r7, #30]
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d307      	bcc.n	8000c42 <Com_Init+0x8a>
			Det_ReportError(COM_INIT_ID ,COM_E_TOO_MANY_IPDU);
 8000c32:	216a      	movs	r1, #106	@ 0x6a
 8000c34:	2001      	movs	r0, #1
 8000c36:	f000 fce9 	bl	800160c <Det_ReportError>
			err = 1;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000c40:	e0af      	b.n	8000da2 <Com_Init+0x1ea>
		}
		/* Set the data pointer for this PDU */
		/* IPdu->ComIPduDataPtr = (void *)&Data_Buffer[bufferIndex];
		bufferIndex += IPdu->ComIPduSize; */
		/* If this is a TX and cyclic I-PDU, configure the first deadline. */
		if ((IPdu->ComIPduDirection == SEND) &&
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	79db      	ldrb	r3, [r3, #7]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d10b      	bne.n	8000c62 <Com_Init+0xaa>
				((IPdu->ComTxIPdu.ComTxModeTrue.ComTxModeMode == PERIODIC) || (IPdu->ComTxIPdu.ComTxModeTrue.ComTxModeMode == MIXED))){
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	7c1b      	ldrb	r3, [r3, #16]
		if ((IPdu->ComIPduDirection == SEND) &&
 8000c4e:	2b03      	cmp	r3, #3
 8000c50:	d003      	beq.n	8000c5a <Com_Init+0xa2>
				((IPdu->ComTxIPdu.ComTxModeTrue.ComTxModeMode == PERIODIC) || (IPdu->ComTxIPdu.ComTxModeTrue.ComTxModeMode == MIXED))){
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	7c1b      	ldrb	r3, [r3, #16]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d103      	bne.n	8000c62 <Com_Init+0xaa>
			IPdu->ComTxIPdu.ComTxModeTrue.ComTxModeTimePeriod = IPdu->ComTxIPdu.ComTxModeTrue.ComTxModeTimeOffset;
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	699a      	ldr	r2, [r3, #24]
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	61da      	str	r2, [r3, #28]
		}

		/* Reset timeout. */
		firstTimeout = 0xFFFFFFFFu;
 8000c62:	f04f 33ff 	mov.w	r3, #4294967295
 8000c66:	623b      	str	r3, [r7, #32]

		/* Initialize the memory with the default value. */
		/* @req COM015 */
		if (IPdu->ComIPduDirection == SEND) {
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	79db      	ldrb	r3, [r3, #7]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d109      	bne.n	8000c84 <Com_Init+0xcc>
			memset((void *)IPdu->ComIPduDataPtr, IPdu->ComTxIPdu.ComTxIPduUnusedAreasDefault, IPdu->ComIPduSize);
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8000c74:	693b      	ldr	r3, [r7, #16]
 8000c76:	7b1b      	ldrb	r3, [r3, #12]
 8000c78:	4619      	mov	r1, r3
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	799b      	ldrb	r3, [r3, #6]
 8000c7e:	461a      	mov	r2, r3
 8000c80:	f004 feed 	bl	8005a5e <memset>
		}

		/* For each signal in this PDU. */
		for (j = 0; (IPdu->ComIPduSignalRef != NULL) && (IPdu->ComIPduSignalRef[j] != NULL) ; j++) {
 8000c84:	2300      	movs	r3, #0
 8000c86:	83bb      	strh	r3, [r7, #28]
 8000c88:	e044      	b.n	8000d14 <Com_Init+0x15c>
			Signal = IPdu->ComIPduSignalRef[j];
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000c8e:	8bbb      	ldrh	r3, [r7, #28]
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	4413      	add	r3, r2
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	60fb      	str	r3, [r7, #12]
			/* Configure signal deadline monitoring if used. */
			/* @req COM333 */ /* If timeout set to 0 */
			if (Signal->ComTimeoutFactor > 0) {
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d00c      	beq.n	8000cba <Com_Init+0x102>
				if (Signal->ComSignalUseUpdateBit) {
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d107      	bne.n	8000cba <Com_Init+0x102>
					/* @req COM292 */ /* Signals with update bit shall have their own deadline monitoring */
					/* DeadlineCounter = Signal->ComFirstTimeoutFactor; /* Configure the deadline counter */

				} else {
					/* This signal does not use an update bit, and should therefore use per I-PDU deadline monitoring. */
					if (Signal->ComFirstTimeoutFactor < firstTimeout) {
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	68db      	ldr	r3, [r3, #12]
 8000cae:	6a3a      	ldr	r2, [r7, #32]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d902      	bls.n	8000cba <Com_Init+0x102>
						firstTimeout = Signal->ComFirstTimeoutFactor;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	623b      	str	r3, [r7, #32]
					}
				}
			}

			/* @req COM117 */ /* COM module shall clear all update-bits during initialization */
			if (Signal->ComSignalUseUpdateBit) {
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d01b      	beq.n	8000cfc <Com_Init+0x144>
				Com_ClearBit(IPdu->ComIPduDataPtr, Signal->ComUpdateBitPosition);
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc8:	68fa      	ldr	r2, [r7, #12]
 8000cca:	8dd2      	ldrh	r2, [r2, #46]	@ 0x2e
 8000ccc:	08d2      	lsrs	r2, r2, #3
 8000cce:	b292      	uxth	r2, r2
 8000cd0:	4413      	add	r3, r2
 8000cd2:	7819      	ldrb	r1, [r3, #0]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8000cd8:	f003 0307 	and.w	r3, r3, #7
 8000cdc:	2201      	movs	r2, #1
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cec:	68f8      	ldr	r0, [r7, #12]
 8000cee:	8dc0      	ldrh	r0, [r0, #46]	@ 0x2e
 8000cf0:	08c0      	lsrs	r0, r0, #3
 8000cf2:	b280      	uxth	r0, r0
 8000cf4:	4403      	add	r3, r0
 8000cf6:	400a      	ands	r2, r1
 8000cf8:	b2d2      	uxtb	r2, r2
 8000cfa:	701a      	strb	r2, [r3, #0]
			}
				/* Initialize signal data. */
				/* @req COM098 */
				Com_WriteToPDU(Signal->ComHandleId, Signal->ComSignalInitValue, &dataChanged);
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	8a18      	ldrh	r0, [r3, #16]
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	69db      	ldr	r3, [r3, #28]
 8000d04:	f107 0208 	add.w	r2, r7, #8
 8000d08:	4619      	mov	r1, r3
 8000d0a:	f000 fa39 	bl	8001180 <Com_WriteToPDU>
		for (j = 0; (IPdu->ComIPduSignalRef != NULL) && (IPdu->ComIPduSignalRef[j] != NULL) ; j++) {
 8000d0e:	8bbb      	ldrh	r3, [r7, #28]
 8000d10:	3301      	adds	r3, #1
 8000d12:	83bb      	strh	r3, [r7, #28]
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d007      	beq.n	8000d2c <Com_Init+0x174>
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000d20:	8bbb      	ldrh	r3, [r7, #28]
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	4413      	add	r3, r2
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d1ae      	bne.n	8000c8a <Com_Init+0xd2>
			}
		if (IPdu->ComIPduDirection == RECEIVE && IPdu->ComIPduSignalProcessing == DEFERRED) {
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	79db      	ldrb	r3, [r3, #7]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d10c      	bne.n	8000d4e <Com_Init+0x196>
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	795b      	ldrb	r3, [r3, #5]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d108      	bne.n	8000d4e <Com_Init+0x196>
			/* Copy the initialized I-PDU to deferred buffer */
			memcpy(IPdu->ComIPduDeferredDataPtr, IPdu->ComIPduDataPtr,IPdu->ComIPduSize);
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	799b      	ldrb	r3, [r3, #6]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	f004 ff08 	bl	8005b5e <memcpy>
		}
		/* Configure per I-PDU based deadline monitoring. */
		for (j = 0; (IPdu->ComIPduSignalRef != NULL) && (IPdu->ComIPduSignalRef[j] != NULL); j++) {
 8000d4e:	2300      	movs	r3, #0
 8000d50:	83bb      	strh	r3, [r7, #28]
 8000d52:	e00c      	b.n	8000d6e <Com_Init+0x1b6>
			Signal = IPdu->ComIPduSignalRef[j];
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000d58:	8bbb      	ldrh	r3, [r7, #28]
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	4413      	add	r3, r2
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	60fb      	str	r3, [r7, #12]

			/* @req COM333 */ /* If timeout set to 0 */
			if ( (Signal->ComTimeoutFactor > 0) && (!Signal->ComSignalUseUpdateBit) ) {
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d66:	2b00      	cmp	r3, #0
		for (j = 0; (IPdu->ComIPduSignalRef != NULL) && (IPdu->ComIPduSignalRef[j] != NULL); j++) {
 8000d68:	8bbb      	ldrh	r3, [r7, #28]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	83bb      	strh	r3, [r7, #28]
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d007      	beq.n	8000d86 <Com_Init+0x1ce>
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000d7a:	8bbb      	ldrh	r3, [r7, #28]
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	4413      	add	r3, r2
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d1e6      	bne.n	8000d54 <Com_Init+0x19c>
	for (i = 0; !ComConfig->ComIPdu[i].Com_EOL; i++) {
 8000d86:	8bfb      	ldrh	r3, [r7, #30]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	83fb      	strh	r3, [r7, #30]
 8000d8c:	4b16      	ldr	r3, [pc, #88]	@ (8000de8 <Com_Init+0x230>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	8bfb      	ldrh	r3, [r7, #30]
 8000d94:	019b      	lsls	r3, r3, #6
 8000d96:	4413      	add	r3, r2
 8000d98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	f43f af38 	beq.w	8000c12 <Com_Init+0x5a>
				/* @req COM290 */
				/* DeadlineCounter = firstTimeout; */
			}
		}
	}
	for (i = 0; i < ComConfig->ComNumOfIPDUs; i++) {
 8000da2:	2300      	movs	r3, #0
 8000da4:	83fb      	strh	r3, [r7, #30]
 8000da6:	e00d      	b.n	8000dc4 <Com_Init+0x20c>
		Com_BufferPduState[i].index = 0;
 8000da8:	8bfb      	ldrh	r3, [r7, #30]
 8000daa:	4a12      	ldr	r2, [pc, #72]	@ (8000df4 <Com_Init+0x23c>)
 8000dac:	2100      	movs	r1, #0
 8000dae:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		Com_BufferPduState[i].isLocked = FALSE;
 8000db2:	8bfb      	ldrh	r3, [r7, #30]
 8000db4:	4a0f      	ldr	r2, [pc, #60]	@ (8000df4 <Com_Init+0x23c>)
 8000db6:	00db      	lsls	r3, r3, #3
 8000db8:	4413      	add	r3, r2
 8000dba:	2200      	movs	r2, #0
 8000dbc:	605a      	str	r2, [r3, #4]
	for (i = 0; i < ComConfig->ComNumOfIPDUs; i++) {
 8000dbe:	8bfb      	ldrh	r3, [r7, #30]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	83fb      	strh	r3, [r7, #30]
 8000dc4:	4b08      	ldr	r3, [pc, #32]	@ (8000de8 <Com_Init+0x230>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	7a5b      	ldrb	r3, [r3, #9]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	8bfb      	ldrh	r3, [r7, #30]
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d3ea      	bcc.n	8000da8 <Com_Init+0x1f0>
	}
	/* Check if an error has occurred. */
	if (err) {
 8000dd2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d102      	bne.n	8000de0 <Com_Init+0x228>
		/* */
	} else {
		initStatus = COM_INIT;
 8000dda:	4b07      	ldr	r3, [pc, #28]	@ (8000df8 <Com_Init+0x240>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	701a      	strb	r2, [r3, #0]
	}
} /*SID 0x01*/
 8000de0:	3728      	adds	r7, #40	@ 0x28
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000318 	.word	0x20000318
 8000dec:	08007c38 	.word	0x08007c38
 8000df0:	2000032c 	.word	0x2000032c
 8000df4:	2000031c 	.word	0x2000031c
 8000df8:	2000032d 	.word	0x2000032d

08000dfc <Com_GetStatus>:
	}
	initStatus = COM_UNINIT;
} /*SID 0x02*/


Com_StatusType Com_GetStatus(void){ 
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
	return initStatus;
 8000e00:	4b03      	ldr	r3, [pc, #12]	@ (8000e10 <Com_GetStatus+0x14>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
}/*SID 0x07, returns COM_INIT or COM_UNINIT*/
 8000e04:	4618      	mov	r0, r3
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	2000032d 	.word	0x2000032d

08000e14 <Com_RxIndication>:



/* Callback functions and Notifications */

void Com_RxIndication(PduIdType RxPduId, const PduInfoType* PduInfoPtr){
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	6039      	str	r1, [r7, #0]
 8000e1e:	80fb      	strh	r3, [r7, #6]
	if(Com_GetStatus() != COM_INIT) {
 8000e20:	f7ff ffec 	bl	8000dfc <Com_GetStatus>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d004      	beq.n	8000e34 <Com_RxIndication+0x20>
		Det_ReportError(COM_RXINDICATION_ID, COM_E_UNINIT);
 8000e2a:	216f      	movs	r1, #111	@ 0x6f
 8000e2c:	2003      	movs	r0, #3
 8000e2e:	f000 fbed 	bl	800160c <Det_ReportError>
		return;
 8000e32:	e032      	b.n	8000e9a <Com_RxIndication+0x86>
	}
	if(ComConfig->ComNumOfIPDUs <= RxPduId) {
 8000e34:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea0 <Com_RxIndication+0x8c>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	7a5b      	ldrb	r3, [r3, #9]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	88fb      	ldrh	r3, [r7, #6]
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d304      	bcc.n	8000e4c <Com_RxIndication+0x38>
		Det_ReportError(COM_RXINDICATION_ID, COM_INVALID_PDU_ID);
 8000e42:	2168      	movs	r1, #104	@ 0x68
 8000e44:	2003      	movs	r0, #3
 8000e46:	f000 fbe1 	bl	800160c <Det_ReportError>
		return;
 8000e4a:	e026      	b.n	8000e9a <Com_RxIndication+0x86>
	}
	ComIPdu_type *IPdu = Com_GetIPDU(RxPduId);
 8000e4c:	4b14      	ldr	r3, [pc, #80]	@ (8000ea0 <Com_RxIndication+0x8c>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	88fb      	ldrh	r3, [r7, #6]
 8000e54:	019b      	lsls	r3, r3, #6
 8000e56:	4413      	add	r3, r2
 8000e58:	60fb      	str	r3, [r7, #12]
	/* @req COM381 */ /* COM shall not support that other AUTOSAR COM module’s APIs than Com_TriggerIPDUSend, Com_TriggerIPDUSendWithMetaData called out of an I-PDU callout */
	/* ComRetryFailedTransmitRequests */
	/* @req COM780 */ /* Retry of failed transmission requests is enabled */
	/*if ((IPdu->ComIPduCallout != COM_NO_FUNCTION_CALLOUT) && (ComRxIPduCallouts[IPdu->ComIPduCallout] != NULL)) {
		if (!ComRxIPduCallouts[IPdu->ComIPduCallout](RxPduId, PduInfoPtr->SduDataPtr)) { */
    if ((IPdu->ComIPduCallout != COM_NO_FUNCTION_CALLOUT) && (ComRxIPduCallouts[0] != NULL)) {
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d00d      	beq.n	8000e7e <Com_RxIndication+0x6a>
 8000e62:	4b10      	ldr	r3, [pc, #64]	@ (8000ea4 <Com_RxIndication+0x90>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d009      	beq.n	8000e7e <Com_RxIndication+0x6a>
        if (!ComRxIPduCallouts[0](RxPduId, PduInfoPtr->SduDataPtr)) {
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea4 <Com_RxIndication+0x90>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	683a      	ldr	r2, [r7, #0]
 8000e70:	6811      	ldr	r1, [r2, #0]
 8000e72:	88fa      	ldrh	r2, [r7, #6]
 8000e74:	4610      	mov	r0, r2
 8000e76:	4798      	blx	r3
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d00c      	beq.n	8000e98 <Com_RxIndication+0x84>
			return;
		}
	}
	/* !req COM574 */ /* When unpacking an I-PDU, COM module shall check the received data length (PduInfoPtr->SduLength) and unpack and notify only completely received signals via ComNotification. */
	/* Copy IPDU data */
	memcpy(IPdu->ComIPduDataPtr, PduInfoPtr->SduDataPtr, IPdu->ComIPduSize);
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	6819      	ldr	r1, [r3, #0]
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	799b      	ldrb	r3, [r3, #6]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	f004 fe67 	bl	8005b5e <memcpy>
	Com_RxSignalProcess(IPdu);
 8000e90:	68f8      	ldr	r0, [r7, #12]
 8000e92:	f000 f913 	bl	80010bc <Com_RxSignalProcess>
	//Irq_Restore(state);
	return;
 8000e96:	e000      	b.n	8000e9a <Com_RxIndication+0x86>
			return;
 8000e98:	bf00      	nop
} /*SID 0x42*/
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000318 	.word	0x20000318
 8000ea4:	08007c44 	.word	0x08007c44

08000ea8 <Com_WriteData>:

/* Scheduled Functions*/

/* Helper functions */
void Com_WriteData(uint8 *pdu, uint8 *pduSignalMask, const uint8 *signalDataPtr, uint8 destByteLength,
	Com_BitPositionType segmStartBitOffset, uint8 segmBitLength) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b088      	sub	sp, #32
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
 8000eb4:	70fb      	strb	r3, [r7, #3]
	Com_BitPositionType pduEndBitOffset = segmStartBitOffset + segmBitLength - 1;
 8000eb6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000eba:	b29a      	uxth	r2, r3
 8000ebc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000ebe:	4413      	add	r3, r2
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	833b      	strh	r3, [r7, #24]
	uint8 pduStartByte = segmStartBitOffset / 8;
 8000ec6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000ec8:	08db      	lsrs	r3, r3, #3
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	75fb      	strb	r3, [r7, #23]
	uint8 pduEndByte = (pduEndBitOffset) / 8;
 8000ece:	8b3b      	ldrh	r3, [r7, #24]
 8000ed0:	08db      	lsrs	r3, r3, #3
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	75bb      	strb	r3, [r7, #22]
	uint8 pduByteLength = pduEndByte - pduStartByte;
 8000ed6:	7dba      	ldrb	r2, [r7, #22]
 8000ed8:	7dfb      	ldrb	r3, [r7, #23]
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	757b      	strb	r3, [r7, #21]

	uint8 segmStartBitOffsetInsideByte = segmStartBitOffset % 8;
 8000ede:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	753b      	strb	r3, [r7, #20]
	uint8 pduStartByteMask = (0xFFu >> segmStartBitOffsetInsideByte);
 8000ee8:	7d3b      	ldrb	r3, [r7, #20]
 8000eea:	22ff      	movs	r2, #255	@ 0xff
 8000eec:	fa22 f303 	lsr.w	r3, r2, r3
 8000ef0:	74fb      	strb	r3, [r7, #19]

	uint8 pduAlignmentShift = 7 - (pduEndBitOffset % 8);
 8000ef2:	8b3b      	ldrh	r3, [r7, #24]
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	74bb      	strb	r3, [r7, #18]
	uint8 segmByteLength = 1 + (segmBitLength - 1) / 8;
 8000f00:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000f04:	3b01      	subs	r3, #1
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	da00      	bge.n	8000f0c <Com_WriteData+0x64>
 8000f0a:	3307      	adds	r3, #7
 8000f0c:	10db      	asrs	r3, r3, #3
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	3301      	adds	r3, #1
 8000f12:	747b      	strb	r3, [r7, #17]
	uint8 pduByteNr = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	77fb      	strb	r3, [r7, #31]
	uint8 signalByteNr = 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	77bb      	strb	r3, [r7, #30]

	uint16 shiftReg = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	83bb      	strh	r3, [r7, #28]
	uint16 clearReg = 0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	837b      	strh	r3, [r7, #26]

	/* clear pduSignalMask all the way from 0 */
	memset(pduSignalMask, 0x00, pduEndByte);
 8000f24:	7dbb      	ldrb	r3, [r7, #22]
 8000f26:	461a      	mov	r2, r3
 8000f28:	2100      	movs	r1, #0
 8000f2a:	68b8      	ldr	r0, [r7, #8]
 8000f2c:	f004 fd97 	bl	8005a5e <memset>

	/* setup to point to end (LSB) of buffers */
	pdu += pduEndByte;
 8000f30:	7dbb      	ldrb	r3, [r7, #22]
 8000f32:	68fa      	ldr	r2, [r7, #12]
 8000f34:	4413      	add	r3, r2
 8000f36:	60fb      	str	r3, [r7, #12]
	pduSignalMask += pduEndByte;
 8000f38:	7dbb      	ldrb	r3, [r7, #22]
 8000f3a:	68ba      	ldr	r2, [r7, #8]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	60bb      	str	r3, [r7, #8]
	signalDataPtr += destByteLength - 1;
 8000f40:	78fb      	ldrb	r3, [r7, #3]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	4413      	add	r3, r2
 8000f48:	607b      	str	r3, [r7, #4]

	/* Process one byte (source) on per iteration */
	do {
		shiftReg = *(signalDataPtr - signalByteNr) & 0x00FFu;
 8000f4a:	7fbb      	ldrb	r3, [r7, #30]
 8000f4c:	425b      	negs	r3, r3
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	4413      	add	r3, r2
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	83bb      	strh	r3, [r7, #28]
		clearReg = 0x00FF;
 8000f56:	23ff      	movs	r3, #255	@ 0xff
 8000f58:	837b      	strh	r3, [r7, #26]
		shiftReg <<= pduAlignmentShift;
 8000f5a:	8bba      	ldrh	r2, [r7, #28]
 8000f5c:	7cbb      	ldrb	r3, [r7, #18]
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	83bb      	strh	r3, [r7, #28]
		clearReg <<= pduAlignmentShift;
 8000f64:	8b7a      	ldrh	r2, [r7, #26]
 8000f66:	7cbb      	ldrb	r3, [r7, #18]
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	837b      	strh	r3, [r7, #26]
		if (pduByteNr == pduByteLength) {
 8000f6e:	7ffa      	ldrb	r2, [r7, #31]
 8000f70:	7d7b      	ldrb	r3, [r7, #21]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d109      	bne.n	8000f8a <Com_WriteData+0xe2>
			shiftReg &= pduStartByteMask;
 8000f76:	7cfb      	ldrb	r3, [r7, #19]
 8000f78:	b29a      	uxth	r2, r3
 8000f7a:	8bbb      	ldrh	r3, [r7, #28]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	83bb      	strh	r3, [r7, #28]
			clearReg &= pduStartByteMask;
 8000f80:	7cfb      	ldrb	r3, [r7, #19]
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	8b7b      	ldrh	r3, [r7, #26]
 8000f86:	4013      	ands	r3, r2
 8000f88:	837b      	strh	r3, [r7, #26]
		}
		*(pdu - pduByteNr) &= (uint16)(~clearReg | ~0x00FFu);
 8000f8a:	7ffb      	ldrb	r3, [r7, #31]
 8000f8c:	425b      	negs	r3, r3
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	4413      	add	r3, r2
 8000f92:	7819      	ldrb	r1, [r3, #0]
 8000f94:	8b7b      	ldrh	r3, [r7, #26]
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	7ffb      	ldrb	r3, [r7, #31]
 8000f9e:	425b      	negs	r3, r3
 8000fa0:	68f8      	ldr	r0, [r7, #12]
 8000fa2:	4403      	add	r3, r0
 8000fa4:	400a      	ands	r2, r1
 8000fa6:	b2d2      	uxtb	r2, r2
 8000fa8:	701a      	strb	r2, [r3, #0]
		*(pduSignalMask - pduByteNr) |= (uint16) (clearReg & 0x00FFu);
 8000faa:	7ffb      	ldrb	r3, [r7, #31]
 8000fac:	425b      	negs	r3, r3
 8000fae:	68ba      	ldr	r2, [r7, #8]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	b25a      	sxtb	r2, r3
 8000fb6:	8b7b      	ldrh	r3, [r7, #26]
 8000fb8:	b25b      	sxtb	r3, r3
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	b259      	sxtb	r1, r3
 8000fbe:	7ffb      	ldrb	r3, [r7, #31]
 8000fc0:	425b      	negs	r3, r3
 8000fc2:	68ba      	ldr	r2, [r7, #8]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	b2ca      	uxtb	r2, r1
 8000fc8:	701a      	strb	r2, [r3, #0]
		*(pdu - pduByteNr) |= shiftReg & 0x00FFu;
 8000fca:	7ffb      	ldrb	r3, [r7, #31]
 8000fcc:	425b      	negs	r3, r3
 8000fce:	68fa      	ldr	r2, [r7, #12]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	7819      	ldrb	r1, [r3, #0]
 8000fd4:	8bbb      	ldrh	r3, [r7, #28]
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	7ffb      	ldrb	r3, [r7, #31]
 8000fda:	425b      	negs	r3, r3
 8000fdc:	68f8      	ldr	r0, [r7, #12]
 8000fde:	4403      	add	r3, r0
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	b2d2      	uxtb	r2, r2
 8000fe4:	701a      	strb	r2, [r3, #0]

		pduByteNr++;
 8000fe6:	7ffb      	ldrb	r3, [r7, #31]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	77fb      	strb	r3, [r7, #31]
		if ((pduAlignmentShift != 0) && (pduByteNr <= pduByteLength)) {
 8000fec:	7cbb      	ldrb	r3, [r7, #18]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d057      	beq.n	80010a2 <Com_WriteData+0x1fa>
 8000ff2:	7ffa      	ldrb	r2, [r7, #31]
 8000ff4:	7d7b      	ldrb	r3, [r7, #21]
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d853      	bhi.n	80010a2 <Com_WriteData+0x1fa>
			shiftReg = *(signalDataPtr - signalByteNr) & 0x00FFu;
 8000ffa:	7fbb      	ldrb	r3, [r7, #30]
 8000ffc:	425b      	negs	r3, r3
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	83bb      	strh	r3, [r7, #28]
			clearReg = 0x00FF;
 8001006:	23ff      	movs	r3, #255	@ 0xff
 8001008:	837b      	strh	r3, [r7, #26]
			shiftReg <<= pduAlignmentShift;
 800100a:	8bba      	ldrh	r2, [r7, #28]
 800100c:	7cbb      	ldrb	r3, [r7, #18]
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	83bb      	strh	r3, [r7, #28]
			clearReg <<= pduAlignmentShift;
 8001014:	8b7a      	ldrh	r2, [r7, #26]
 8001016:	7cbb      	ldrb	r3, [r7, #18]
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	837b      	strh	r3, [r7, #26]
			shiftReg >>= 8;
 800101e:	8bbb      	ldrh	r3, [r7, #28]
 8001020:	0a1b      	lsrs	r3, r3, #8
 8001022:	83bb      	strh	r3, [r7, #28]
			clearReg >>= 8;
 8001024:	8b7b      	ldrh	r3, [r7, #26]
 8001026:	0a1b      	lsrs	r3, r3, #8
 8001028:	837b      	strh	r3, [r7, #26]
			if (pduByteNr == pduByteLength) {
 800102a:	7ffa      	ldrb	r2, [r7, #31]
 800102c:	7d7b      	ldrb	r3, [r7, #21]
 800102e:	429a      	cmp	r2, r3
 8001030:	d109      	bne.n	8001046 <Com_WriteData+0x19e>
				shiftReg &= pduStartByteMask;
 8001032:	7cfb      	ldrb	r3, [r7, #19]
 8001034:	b29a      	uxth	r2, r3
 8001036:	8bbb      	ldrh	r3, [r7, #28]
 8001038:	4013      	ands	r3, r2
 800103a:	83bb      	strh	r3, [r7, #28]
				clearReg &= pduStartByteMask;
 800103c:	7cfb      	ldrb	r3, [r7, #19]
 800103e:	b29a      	uxth	r2, r3
 8001040:	8b7b      	ldrh	r3, [r7, #26]
 8001042:	4013      	ands	r3, r2
 8001044:	837b      	strh	r3, [r7, #26]
			}
			*(pdu - pduByteNr) &= (uint16)(~clearReg | ~0x00FFu);
 8001046:	7ffb      	ldrb	r3, [r7, #31]
 8001048:	425b      	negs	r3, r3
 800104a:	68fa      	ldr	r2, [r7, #12]
 800104c:	4413      	add	r3, r2
 800104e:	7819      	ldrb	r1, [r3, #0]
 8001050:	8b7b      	ldrh	r3, [r7, #26]
 8001052:	b2db      	uxtb	r3, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	b2da      	uxtb	r2, r3
 8001058:	7ffb      	ldrb	r3, [r7, #31]
 800105a:	425b      	negs	r3, r3
 800105c:	68f8      	ldr	r0, [r7, #12]
 800105e:	4403      	add	r3, r0
 8001060:	400a      	ands	r2, r1
 8001062:	b2d2      	uxtb	r2, r2
 8001064:	701a      	strb	r2, [r3, #0]
			*(pduSignalMask - pduByteNr) |= (uint16) (clearReg & 0x00FFu);
 8001066:	7ffb      	ldrb	r3, [r7, #31]
 8001068:	425b      	negs	r3, r3
 800106a:	68ba      	ldr	r2, [r7, #8]
 800106c:	4413      	add	r3, r2
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	b25a      	sxtb	r2, r3
 8001072:	8b7b      	ldrh	r3, [r7, #26]
 8001074:	b25b      	sxtb	r3, r3
 8001076:	4313      	orrs	r3, r2
 8001078:	b259      	sxtb	r1, r3
 800107a:	7ffb      	ldrb	r3, [r7, #31]
 800107c:	425b      	negs	r3, r3
 800107e:	68ba      	ldr	r2, [r7, #8]
 8001080:	4413      	add	r3, r2
 8001082:	b2ca      	uxtb	r2, r1
 8001084:	701a      	strb	r2, [r3, #0]
			*(pdu - pduByteNr) |= shiftReg & 0x00FFu;
 8001086:	7ffb      	ldrb	r3, [r7, #31]
 8001088:	425b      	negs	r3, r3
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	4413      	add	r3, r2
 800108e:	7819      	ldrb	r1, [r3, #0]
 8001090:	8bbb      	ldrh	r3, [r7, #28]
 8001092:	b2da      	uxtb	r2, r3
 8001094:	7ffb      	ldrb	r3, [r7, #31]
 8001096:	425b      	negs	r3, r3
 8001098:	68f8      	ldr	r0, [r7, #12]
 800109a:	4403      	add	r3, r0
 800109c:	430a      	orrs	r2, r1
 800109e:	b2d2      	uxtb	r2, r2
 80010a0:	701a      	strb	r2, [r3, #0]
		}
		signalByteNr++;
 80010a2:	7fbb      	ldrb	r3, [r7, #30]
 80010a4:	3301      	adds	r3, #1
 80010a6:	77bb      	strb	r3, [r7, #30]
	} while (signalByteNr < segmByteLength);
 80010a8:	7fba      	ldrb	r2, [r7, #30]
 80010aa:	7c7b      	ldrb	r3, [r7, #17]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	f4ff af4c 	bcc.w	8000f4a <Com_WriteData+0xa2>
}
 80010b2:	bf00      	nop
 80010b4:	bf00      	nop
 80010b6:	3720      	adds	r7, #32
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <Com_RxSignalProcess>:
		return FALSE;
	}
}


void Com_RxSignalProcess(ComIPdu_type *IPdu){
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
	/* !req COM053 */
	/* @req COM055 */
	/* !req COM396 */ /* Neither invalidation nor filtering supported */
	/* !req COM352 */
	const ComSignal_type *Signal;
	for (uint8 i = 0; IPdu->ComIPduSignalRef[i] != NULL; i++) {
 80010c4:	2300      	movs	r3, #0
 80010c6:	73fb      	strb	r3, [r7, #15]
 80010c8:	e04b      	b.n	8001162 <Com_RxSignalProcess+0xa6>
		Signal = IPdu->ComIPduSignalRef[i];
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	4413      	add	r3, r2
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	60bb      	str	r3, [r7, #8]
		/* Signal = Signal->ComHandleId*/

		/* If this signal uses an update bit, then it is only considered if this bit is set. */
		/* @req COM324 */
		/* @req COM067 */
		if ((!Signal->ComSignalUseUpdateBit) ||
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d018      	beq.n	8001114 <Com_RxSignalProcess+0x58>
			((Signal->ComSignalUseUpdateBit) && (Com_TestBit(IPdu->ComIPduDataPtr, Signal->ComUpdateBitPosition)) ) ) {
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
		if ((!Signal->ComSignalUseUpdateBit) ||
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d037      	beq.n	800115c <Com_RxSignalProcess+0xa0>
			((Signal->ComSignalUseUpdateBit) && (Com_TestBit(IPdu->ComIPduDataPtr, Signal->ComUpdateBitPosition)) ) ) {
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f0:	68ba      	ldr	r2, [r7, #8]
 80010f2:	8dd2      	ldrh	r2, [r2, #46]	@ 0x2e
 80010f4:	08d2      	lsrs	r2, r2, #3
 80010f6:	b292      	uxth	r2, r2
 80010f8:	4413      	add	r3, r2
 80010fa:	781a      	ldrb	r2, [r3, #0]
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001100:	f003 0307 	and.w	r3, r3, #7
 8001104:	2101      	movs	r1, #1
 8001106:	fa01 f303 	lsl.w	r3, r1, r3
 800110a:	b2db      	uxtb	r3, r3
 800110c:	4013      	ands	r3, r2
 800110e:	b2db      	uxtb	r3, r3
 8001110:	2b00      	cmp	r3, #0
 8001112:	d023      	beq.n	800115c <Com_RxSignalProcess+0xa0>
				/* @req COM715 */
				/* DeadlineCounter = Signal->ComTimeoutFactor; */
			}

			/* Check signal processing mode. */
			if (IPdu->ComIPduSignalProcessing == IMMEDIATE) {
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	795b      	ldrb	r3, [r3, #5]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d11f      	bne.n	800115c <Com_RxSignalProcess+0xa0>
				/* If signal processing mode is IMMEDIATE, notify the signal callback. */
				/* @req COM300 */
				/* @req COM301 */
				if ((IPdu->ComIPduSignalRef[i]->ComNotification != COM_NO_FUNCTION_CALLOUT) &&
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001120:	7bfb      	ldrb	r3, [r7, #15]
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	4413      	add	r3, r2
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	695b      	ldr	r3, [r3, #20]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d016      	beq.n	800115c <Com_RxSignalProcess+0xa0>
					(ComNotificationCallouts[IPdu->ComIPduSignalRef[i]->ComNotification] != NULL) ) {
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001132:	7bfb      	ldrb	r3, [r7, #15]
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4413      	add	r3, r2
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	695b      	ldr	r3, [r3, #20]
 800113c:	4a0f      	ldr	r2, [pc, #60]	@ (800117c <Com_RxSignalProcess+0xc0>)
 800113e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				if ((IPdu->ComIPduSignalRef[i]->ComNotification != COM_NO_FUNCTION_CALLOUT) &&
 8001142:	2b00      	cmp	r3, #0
 8001144:	d00a      	beq.n	800115c <Com_RxSignalProcess+0xa0>
					ComNotificationCallouts[IPdu->ComIPduSignalRef[i]->ComNotification]();
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	4413      	add	r3, r2
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	695b      	ldr	r3, [r3, #20]
 8001154:	4a09      	ldr	r2, [pc, #36]	@ (800117c <Com_RxSignalProcess+0xc0>)
 8001156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800115a:	4798      	blx	r3
	for (uint8 i = 0; IPdu->ComIPduSignalRef[i] != NULL; i++) {
 800115c:	7bfb      	ldrb	r3, [r7, #15]
 800115e:	3301      	adds	r3, #1
 8001160:	73fb      	strb	r3, [r7, #15]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001166:	7bfb      	ldrb	r3, [r7, #15]
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4413      	add	r3, r2
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d1ab      	bne.n	80010ca <Com_RxSignalProcess+0xe>

		} else {
			/* Nothing? */
		}
	}
}
 8001172:	bf00      	nop
 8001174:	bf00      	nop
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	08007c3c 	.word	0x08007c3c

08001180 <Com_WriteToPDU>:

void Com_WriteToPDU(Com_SignalIdType signalId, const void *signalData, boolean *dataChanged){
 8001180:	b5b0      	push	{r4, r5, r7, lr}
 8001182:	b098      	sub	sp, #96	@ 0x60
 8001184:	af02      	add	r7, sp, #8
 8001186:	4603      	mov	r3, r0
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
 800118c:	81fb      	strh	r3, [r7, #14]
	/* @req COM221 */ /* COM module shall perform endianness conversion before the I-PDU callout on sender side. */
	ComSignal_type * Signal =  Com_GetSignal(signalId);
 800118e:	4ba7      	ldr	r3, [pc, #668]	@ (800142c <Com_WriteToPDU+0x2ac>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	6859      	ldr	r1, [r3, #4]
 8001194:	89fa      	ldrh	r2, [r7, #14]
 8001196:	4613      	mov	r3, r2
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	1a9b      	subs	r3, r3, r2
 800119c:	00db      	lsls	r3, r3, #3
 800119e:	440b      	add	r3, r1
 80011a0:	653b      	str	r3, [r7, #80]	@ 0x50
	Com_SignalType signalType = Signal->ComSignalType;
 80011a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80011a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011a8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	uint8 signalLength = Signal->ComBitSize / 8;
 80011ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80011ae:	791b      	ldrb	r3, [r3, #4]
 80011b0:	08db      	lsrs	r3, r3, #3
 80011b2:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
	Com_BitPositionType bitPosition = Signal->ComBitPosition;
 80011b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80011b8:	881b      	ldrh	r3, [r3, #0]
 80011ba:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	uint8 bitSize = Signal->ComBitSize;
 80011be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80011c0:	791b      	ldrb	r3, [r3, #4]
 80011c2:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	ComSignalEndianess_type endianness = Signal->ComSignalEndianess;
 80011c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80011c8:	7e5b      	ldrb	r3, [r3, #25]
 80011ca:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

	uint8 signalBufferSize = Com_SignalTypeToSize(signalType, signalLength);
 80011ce:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80011d2:	2b0a      	cmp	r3, #10
 80011d4:	d020      	beq.n	8001218 <Com_WriteToPDU+0x98>
 80011d6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80011da:	2b07      	cmp	r3, #7
 80011dc:	d01a      	beq.n	8001214 <Com_WriteToPDU+0x94>
 80011de:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80011e2:	2b08      	cmp	r3, #8
 80011e4:	d014      	beq.n	8001210 <Com_WriteToPDU+0x90>
 80011e6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80011ea:	2b0c      	cmp	r3, #12
 80011ec:	d00d      	beq.n	800120a <Com_WriteToPDU+0x8a>
 80011ee:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80011f2:	2b06      	cmp	r3, #6
 80011f4:	d007      	beq.n	8001206 <Com_WriteToPDU+0x86>
 80011f6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80011fa:	2b03      	cmp	r3, #3
 80011fc:	d101      	bne.n	8001202 <Com_WriteToPDU+0x82>
 80011fe:	2302      	movs	r3, #2
 8001200:	e00b      	b.n	800121a <Com_WriteToPDU+0x9a>
 8001202:	2304      	movs	r3, #4
 8001204:	e009      	b.n	800121a <Com_WriteToPDU+0x9a>
 8001206:	2301      	movs	r3, #1
 8001208:	e007      	b.n	800121a <Com_WriteToPDU+0x9a>
 800120a:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800120e:	e004      	b.n	800121a <Com_WriteToPDU+0x9a>
 8001210:	2304      	movs	r3, #4
 8001212:	e002      	b.n	800121a <Com_WriteToPDU+0x9a>
 8001214:	2302      	movs	r3, #2
 8001216:	e000      	b.n	800121a <Com_WriteToPDU+0x9a>
 8001218:	2301      	movs	r3, #1
 800121a:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
	uint8 pduSignalMask[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800121e:	4a84      	ldr	r2, [pc, #528]	@ (8001430 <Com_WriteToPDU+0x2b0>)
 8001220:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001224:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001228:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8 signalDataBytesArray[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800122c:	4a80      	ldr	r2, [pc, #512]	@ (8001430 <Com_WriteToPDU+0x2b0>)
 800122e:	f107 031c 	add.w	r3, r7, #28
 8001232:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001236:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8 *signalDataBytes = (uint8 *)signalData;
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	647b      	str	r3, [r7, #68]	@ 0x44
	//imask_t irq_state;

	//Irq_Save(irq_state);
	if (endianness == COM_OPAQUE || signalType == UINT8_N){
 800123e:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8001242:	2b02      	cmp	r3, #2
 8001244:	d003      	beq.n	800124e <Com_WriteToPDU+0xce>
 8001246:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800124a:	2b0c      	cmp	r3, #12
 800124c:	d12a      	bne.n	80012a4 <Com_WriteToPDU+0x124>
		/* @req COM472 */
		/* COM interprets opaque data as uint8[n] and shall always map it to an n-bytes sized signal */
		uint8 *pduBufferBytes = (uint8 *)pduBuffer;
 800124e:	4b77      	ldr	r3, [pc, #476]	@ (800142c <Com_WriteToPDU+0x2ac>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001256:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001258:	019b      	lsls	r3, r3, #6
 800125a:	4413      	add	r3, r2
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	633b      	str	r3, [r7, #48]	@ 0x30
		uint8 startFromPduByte = bitPosition / 8;
 8001260:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001264:	08db      	lsrs	r3, r3, #3
 8001266:	b29b      	uxth	r3, r3
 8001268:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if(memcmp(pduBufferBytes + startFromPduByte, signalDataBytes, signalLength) != 0){
 800126c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001270:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001272:	4413      	add	r3, r2
 8001274:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 8001278:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800127a:	4618      	mov	r0, r3
 800127c:	f004 fbdf 	bl	8005a3e <memcmp>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d002      	beq.n	800128c <Com_WriteToPDU+0x10c>
		    *dataChanged = TRUE;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2201      	movs	r2, #1
 800128a:	601a      	str	r2, [r3, #0]
		}
		memcpy(pduBufferBytes + startFromPduByte, signalDataBytes, signalLength);
 800128c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001290:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001292:	4413      	add	r3, r2
 8001294:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 8001298:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800129a:	4618      	mov	r0, r3
 800129c:	f004 fc5f 	bl	8005b5e <memcpy>
	if (endianness == COM_OPAQUE || signalType == UINT8_N){
 80012a0:	bf00      	nop
                pduBufferBytes[i] |= pduBufferByteEnd[7 - i];
            }
        }
	}
	//Irq_Restore(irq_state);
}
 80012a2:	e14e      	b.n	8001542 <Com_WriteToPDU+0x3c2>
		if (Com_SystemEndianness == COM_BIG_ENDIAN){
 80012a4:	4b63      	ldr	r3, [pc, #396]	@ (8001434 <Com_WriteToPDU+0x2b4>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d11a      	bne.n	80012e2 <Com_WriteToPDU+0x162>
			for (i = 0; i < signalBufferSize; i++){
 80012ac:	2300      	movs	r3, #0
 80012ae:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80012b2:	e00f      	b.n	80012d4 <Com_WriteToPDU+0x154>
				signalDataBytesArray[i] = signalDataBytes[i];
 80012b4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80012b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80012ba:	441a      	add	r2, r3
 80012bc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80012c0:	7812      	ldrb	r2, [r2, #0]
 80012c2:	3358      	adds	r3, #88	@ 0x58
 80012c4:	443b      	add	r3, r7
 80012c6:	f803 2c3c 	strb.w	r2, [r3, #-60]
			for (i = 0; i < signalBufferSize; i++){
 80012ca:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80012ce:	3301      	adds	r3, #1
 80012d0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80012d4:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80012d8:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80012dc:	429a      	cmp	r2, r3
 80012de:	d3e9      	bcc.n	80012b4 <Com_WriteToPDU+0x134>
 80012e0:	e021      	b.n	8001326 <Com_WriteToPDU+0x1a6>
		} else if (Com_SystemEndianness == COM_LITTLE_ENDIAN){
 80012e2:	4b54      	ldr	r3, [pc, #336]	@ (8001434 <Com_WriteToPDU+0x2b4>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d11d      	bne.n	8001326 <Com_WriteToPDU+0x1a6>
			for (i = 0; i < signalBufferSize; i++){
 80012ea:	2300      	movs	r3, #0
 80012ec:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 80012f0:	e013      	b.n	800131a <Com_WriteToPDU+0x19a>
				signalDataBytesArray[(signalBufferSize - 1) - i] = signalDataBytes[i];
 80012f2:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 80012f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80012f8:	441a      	add	r2, r3
 80012fa:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80012fe:	1e59      	subs	r1, r3, #1
 8001300:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8001304:	1acb      	subs	r3, r1, r3
 8001306:	7812      	ldrb	r2, [r2, #0]
 8001308:	3358      	adds	r3, #88	@ 0x58
 800130a:	443b      	add	r3, r7
 800130c:	f803 2c3c 	strb.w	r2, [r3, #-60]
			for (i = 0; i < signalBufferSize; i++){
 8001310:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8001314:	3301      	adds	r3, #1
 8001316:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 800131a:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 800131e:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8001322:	429a      	cmp	r2, r3
 8001324:	d3e5      	bcc.n	80012f2 <Com_WriteToPDU+0x172>
		uint8 pduBufferByteEnd[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8001326:	4a42      	ldr	r2, [pc, #264]	@ (8001430 <Com_WriteToPDU+0x2b0>)
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001330:	e883 0003 	stmia.w	r3, {r0, r1}
        if (endianness == COM_BIG_ENDIAN){
 8001334:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8001338:	2b00      	cmp	r3, #0
 800133a:	d17d      	bne.n	8001438 <Com_WriteToPDU+0x2b8>
            Com_BitPositionType startBitOffset = Com_GetByteOffset(bitPosition % 8);
 800133c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001340:	f003 0307 	and.w	r3, r3, #7
 8001344:	b29b      	uxth	r3, r3
 8001346:	4618      	mov	r0, r3
 8001348:	f000 f902 	bl	8001550 <Com_GetByteOffset>
 800134c:	4603      	mov	r3, r0
 800134e:	877b      	strh	r3, [r7, #58]	@ 0x3a
			Com_WriteData(pduBufferByteEnd, pduSignalMask, signalDataBytesArray, signalBufferSize, startBitOffset, bitSize);
 8001350:	f897 4049 	ldrb.w	r4, [r7, #73]	@ 0x49
 8001354:	f107 021c 	add.w	r2, r7, #28
 8001358:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800135c:	f107 0014 	add.w	r0, r7, #20
 8001360:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001364:	9301      	str	r3, [sp, #4]
 8001366:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	4623      	mov	r3, r4
 800136c:	f7ff fd9c 	bl	8000ea8 <Com_WriteData>
            uint8 *pduBufferBytes = ((uint8 *)pduBuffer) + (bitPosition/8);
 8001370:	4b2e      	ldr	r3, [pc, #184]	@ (800142c <Com_WriteToPDU+0x2ac>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001378:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800137a:	019b      	lsls	r3, r3, #6
 800137c:	4413      	add	r3, r2
 800137e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001380:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8001384:	08d2      	lsrs	r2, r2, #3
 8001386:	b292      	uxth	r2, r2
 8001388:	4413      	add	r3, r2
 800138a:	637b      	str	r3, [r7, #52]	@ 0x34
            for (i = 0; i < 8; i++) {
 800138c:	2300      	movs	r3, #0
 800138e:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 8001392:	e045      	b.n	8001420 <Com_WriteToPDU+0x2a0>
                if(pduBufferByteEnd[i] != (pduBufferBytes[i]  & pduSignalMask[i])){
 8001394:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001398:	3358      	adds	r3, #88	@ 0x58
 800139a:	443b      	add	r3, r7
 800139c:	f813 2c44 	ldrb.w	r2, [r3, #-68]
 80013a0:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80013a4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80013a6:	440b      	add	r3, r1
 80013a8:	7819      	ldrb	r1, [r3, #0]
 80013aa:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80013ae:	3358      	adds	r3, #88	@ 0x58
 80013b0:	443b      	add	r3, r7
 80013b2:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 80013b6:	400b      	ands	r3, r1
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d002      	beq.n	80013c4 <Com_WriteToPDU+0x244>
                    *dataChanged = TRUE;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2201      	movs	r2, #1
 80013c2:	601a      	str	r2, [r3, #0]
                pduBufferBytes[i] &= ~pduSignalMask[i];
 80013c4:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80013c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80013ca:	4413      	add	r3, r2
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	b25a      	sxtb	r2, r3
 80013d0:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80013d4:	3358      	adds	r3, #88	@ 0x58
 80013d6:	443b      	add	r3, r7
 80013d8:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 80013dc:	b25b      	sxtb	r3, r3
 80013de:	43db      	mvns	r3, r3
 80013e0:	b25b      	sxtb	r3, r3
 80013e2:	4013      	ands	r3, r2
 80013e4:	b259      	sxtb	r1, r3
 80013e6:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80013ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80013ec:	4413      	add	r3, r2
 80013ee:	b2ca      	uxtb	r2, r1
 80013f0:	701a      	strb	r2, [r3, #0]
                pduBufferBytes[i] |= pduBufferByteEnd[i];
 80013f2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80013f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80013f8:	4413      	add	r3, r2
 80013fa:	7819      	ldrb	r1, [r3, #0]
 80013fc:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001400:	3358      	adds	r3, #88	@ 0x58
 8001402:	443b      	add	r3, r7
 8001404:	f813 2c44 	ldrb.w	r2, [r3, #-68]
 8001408:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800140c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800140e:	4403      	add	r3, r0
 8001410:	430a      	orrs	r2, r1
 8001412:	b2d2      	uxtb	r2, r2
 8001414:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < 8; i++) {
 8001416:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800141a:	3301      	adds	r3, #1
 800141c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 8001420:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001424:	2b07      	cmp	r3, #7
 8001426:	d9b5      	bls.n	8001394 <Com_WriteToPDU+0x214>
}
 8001428:	e08b      	b.n	8001542 <Com_WriteToPDU+0x3c2>
 800142a:	bf00      	nop
 800142c:	20000318 	.word	0x20000318
 8001430:	08007c10 	.word	0x08007c10
 8001434:	2000032c 	.word	0x2000032c
            uint8 startBitOffset = 64 - ((bitPosition % 8) + bitSize); /* 8 bytes = 64 bit*/
 8001438:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800143c:	b2db      	uxtb	r3, r3
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	b2da      	uxtb	r2, r3
 8001444:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001448:	4413      	add	r3, r2
 800144a:	b2db      	uxtb	r3, r3
 800144c:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8001450:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
            Com_WriteData(pduBufferByteEnd, pduSignalMask, signalDataBytesArray, signalBufferSize, startBitOffset, bitSize);
 8001454:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001458:	b29b      	uxth	r3, r3
 800145a:	f897 5049 	ldrb.w	r5, [r7, #73]	@ 0x49
 800145e:	f107 041c 	add.w	r4, r7, #28
 8001462:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001466:	f107 0014 	add.w	r0, r7, #20
 800146a:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800146e:	9201      	str	r2, [sp, #4]
 8001470:	9300      	str	r3, [sp, #0]
 8001472:	462b      	mov	r3, r5
 8001474:	4622      	mov	r2, r4
 8001476:	f7ff fd17 	bl	8000ea8 <Com_WriteData>
            uint8 *pduBufferBytes = ((uint8 *)pduBuffer) + (bitPosition / 8);
 800147a:	4b34      	ldr	r3, [pc, #208]	@ (800154c <Com_WriteToPDU+0x3cc>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001482:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001484:	019b      	lsls	r3, r3, #6
 8001486:	4413      	add	r3, r2
 8001488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 800148e:	08d2      	lsrs	r2, r2, #3
 8001490:	b292      	uxth	r2, r2
 8001492:	4413      	add	r3, r2
 8001494:	63fb      	str	r3, [r7, #60]	@ 0x3c
            for (i = 0; i < 8; i++){
 8001496:	2300      	movs	r3, #0
 8001498:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 800149c:	e04d      	b.n	800153a <Com_WriteToPDU+0x3ba>
                if(pduBufferByteEnd[7 - i] != (pduBufferBytes[i] & (pduSignalMask[7 - i]))){
 800149e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80014a2:	f1c3 0307 	rsb	r3, r3, #7
 80014a6:	3358      	adds	r3, #88	@ 0x58
 80014a8:	443b      	add	r3, r7
 80014aa:	f813 2c44 	ldrb.w	r2, [r3, #-68]
 80014ae:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80014b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80014b4:	440b      	add	r3, r1
 80014b6:	7819      	ldrb	r1, [r3, #0]
 80014b8:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80014bc:	f1c3 0307 	rsb	r3, r3, #7
 80014c0:	3358      	adds	r3, #88	@ 0x58
 80014c2:	443b      	add	r3, r7
 80014c4:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 80014c8:	400b      	ands	r3, r1
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d002      	beq.n	80014d6 <Com_WriteToPDU+0x356>
                    *dataChanged = TRUE;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2201      	movs	r2, #1
 80014d4:	601a      	str	r2, [r3, #0]
                pduBufferBytes[i] &= ~pduSignalMask[7 - i];
 80014d6:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80014da:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80014dc:	4413      	add	r3, r2
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	b25a      	sxtb	r2, r3
 80014e2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80014e6:	f1c3 0307 	rsb	r3, r3, #7
 80014ea:	3358      	adds	r3, #88	@ 0x58
 80014ec:	443b      	add	r3, r7
 80014ee:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 80014f2:	b25b      	sxtb	r3, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	b25b      	sxtb	r3, r3
 80014f8:	4013      	ands	r3, r2
 80014fa:	b259      	sxtb	r1, r3
 80014fc:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001500:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001502:	4413      	add	r3, r2
 8001504:	b2ca      	uxtb	r2, r1
 8001506:	701a      	strb	r2, [r3, #0]
                pduBufferBytes[i] |= pduBufferByteEnd[7 - i];
 8001508:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800150c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800150e:	4413      	add	r3, r2
 8001510:	7819      	ldrb	r1, [r3, #0]
 8001512:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001516:	f1c3 0307 	rsb	r3, r3, #7
 800151a:	3358      	adds	r3, #88	@ 0x58
 800151c:	443b      	add	r3, r7
 800151e:	f813 2c44 	ldrb.w	r2, [r3, #-68]
 8001522:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001526:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001528:	4403      	add	r3, r0
 800152a:	430a      	orrs	r2, r1
 800152c:	b2d2      	uxtb	r2, r2
 800152e:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < 8; i++){
 8001530:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001534:	3301      	adds	r3, #1
 8001536:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 800153a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800153e:	2b07      	cmp	r3, #7
 8001540:	d9ad      	bls.n	800149e <Com_WriteToPDU+0x31e>
}
 8001542:	bf00      	nop
 8001544:	3758      	adds	r7, #88	@ 0x58
 8001546:	46bd      	mov	sp, r7
 8001548:	bdb0      	pop	{r4, r5, r7, pc}
 800154a:	bf00      	nop
 800154c:	20000318 	.word	0x20000318

08001550 <Com_GetByteOffset>:

Com_BitPositionType Com_GetByteOffset(Com_BitPositionType BitNumber){
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	80fb      	strh	r3, [r7, #6]
	uint8 byte = BitNumber / 8;
 800155a:	88fb      	ldrh	r3, [r7, #6]
 800155c:	08db      	lsrs	r3, r3, #3
 800155e:	b29b      	uxth	r3, r3
 8001560:	73fb      	strb	r3, [r7, #15]
	Com_BitPositionType byteStartOffset = (Com_BitPositionType) (byte * 8u);
 8001562:	7bfb      	ldrb	r3, [r7, #15]
 8001564:	b29b      	uxth	r3, r3
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	81bb      	strh	r3, [r7, #12]
	Com_BitPositionType byteOffset = BitNumber % 8;
 800156a:	88fb      	ldrh	r3, [r7, #6]
 800156c:	f003 0307 	and.w	r3, r3, #7
 8001570:	817b      	strh	r3, [r7, #10]
	return (Com_BitPositionType) (byteStartOffset + (7u - byteOffset));
 8001572:	89ba      	ldrh	r2, [r7, #12]
 8001574:	897b      	ldrh	r3, [r7, #10]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	b29b      	uxth	r3, r3
 800157a:	3307      	adds	r3, #7
 800157c:	b29b      	uxth	r3, r3
}
 800157e:	4618      	mov	r0, r3
 8001580:	3714      	adds	r7, #20
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
	...

0800158c <Com_ReceiveSignal>:

uint8 Com_ReceiveSignal(Com_SignalIdType SignalId, void* SignalDataPtr) {
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	6039      	str	r1, [r7, #0]
 8001596:	80fb      	strh	r3, [r7, #6]
	if(Com_GetStatus() != COM_INIT){
 8001598:	f7ff fc30 	bl	8000dfc <Com_GetStatus>
 800159c:	4603      	mov	r3, r0
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d005      	beq.n	80015ae <Com_ReceiveSignal+0x22>
		Det_ReportError(COM_SENDSIGNAL_ID, COM_E_UNINIT);
 80015a2:	216f      	movs	r1, #111	@ 0x6f
 80015a4:	2002      	movs	r0, #2
 80015a6:	f000 f831 	bl	800160c <Det_ReportError>
		return COM_SERVICE_NOT_AVAILABLE;
 80015aa:	2380      	movs	r3, #128	@ 0x80
 80015ac:	e027      	b.n	80015fe <Com_ReceiveSignal+0x72>
	}

	if(ComConfig->ComNumOfSignals <= SignalId){
 80015ae:	4b16      	ldr	r3, [pc, #88]	@ (8001608 <Com_ReceiveSignal+0x7c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	7a1b      	ldrb	r3, [r3, #8]
 80015b4:	461a      	mov	r2, r3
 80015b6:	88fb      	ldrh	r3, [r7, #6]
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d305      	bcc.n	80015c8 <Com_ReceiveSignal+0x3c>
		Det_ReportError(COM_SENDSIGNAL_ID, COM_INVALID_SIGNAL_ID);
 80015bc:	216d      	movs	r1, #109	@ 0x6d
 80015be:	2002      	movs	r0, #2
 80015c0:	f000 f824 	bl	800160c <Det_ReportError>
		return COM_SERVICE_NOT_AVAILABLE;
 80015c4:	2380      	movs	r3, #128	@ 0x80
 80015c6:	e01a      	b.n	80015fe <Com_ReceiveSignal+0x72>
	}
	ComSignal_type * Signal = Com_GetSignal(SignalId);
 80015c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001608 <Com_ReceiveSignal+0x7c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6859      	ldr	r1, [r3, #4]
 80015ce:	88fa      	ldrh	r2, [r7, #6]
 80015d0:	4613      	mov	r3, r2
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	1a9b      	subs	r3, r3, r2
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	440b      	add	r3, r1
 80015da:	60fb      	str	r3, [r7, #12]

	ComIPdu_type *IPdu = Com_GetIPDU(Signal->ComIPduHandleId);
 80015dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001608 <Com_ReceiveSignal+0x7c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80015e6:	019b      	lsls	r3, r3, #6
 80015e8:	4413      	add	r3, r2
 80015ea:	60bb      	str	r3, [r7, #8]
	memcpy(SignalDataPtr, IPdu->ComIPduDataPtr, IPdu->ComIPduSize);
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	799b      	ldrb	r3, [r3, #6]
 80015f4:	461a      	mov	r2, r3
 80015f6:	6838      	ldr	r0, [r7, #0]
 80015f8:	f004 fab1 	bl	8005b5e <memcpy>

	return E_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000318 	.word	0x20000318

0800160c <Det_ReportError>:
#include "Std_Types.h"

void Det_ReportError(int a, ...){
 800160c:	b40f      	push	{r0, r1, r2, r3}
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0

}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	b004      	add	sp, #16
 800161c:	4770      	bx	lr
	...

08001620 <Can_Init>:
	TxHeader.StdId = PduInfo->id;
	return HAL_CAN_AddTxMessage(&hcan, &TxHeader, PduInfo->sdu, &TxMailbox) == HAL_OK ? CAN_OK : CAN_NOT_OK;
}


void Can_Init(const Can_ConfigType *Config) {
 8001620:	b580      	push	{r7, lr}
 8001622:	b08c      	sub	sp, #48	@ 0x30
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
    /* Do initial configuration of layer here */
	hcan.Instance = CAN;
 8001628:	4b25      	ldr	r3, [pc, #148]	@ (80016c0 <Can_Init+0xa0>)
 800162a:	4a26      	ldr	r2, [pc, #152]	@ (80016c4 <Can_Init+0xa4>)
 800162c:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 12;
 800162e:	4b24      	ldr	r3, [pc, #144]	@ (80016c0 <Can_Init+0xa0>)
 8001630:	220c      	movs	r2, #12
 8001632:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8001634:	4b22      	ldr	r3, [pc, #136]	@ (80016c0 <Can_Init+0xa0>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800163a:	4b21      	ldr	r3, [pc, #132]	@ (80016c0 <Can_Init+0xa0>)
 800163c:	2200      	movs	r2, #0
 800163e:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001640:	4b1f      	ldr	r3, [pc, #124]	@ (80016c0 <Can_Init+0xa0>)
 8001642:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001646:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001648:	4b1d      	ldr	r3, [pc, #116]	@ (80016c0 <Can_Init+0xa0>)
 800164a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800164e:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8001650:	4b1b      	ldr	r3, [pc, #108]	@ (80016c0 <Can_Init+0xa0>)
 8001652:	2200      	movs	r2, #0
 8001654:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8001656:	4b1a      	ldr	r3, [pc, #104]	@ (80016c0 <Can_Init+0xa0>)
 8001658:	2200      	movs	r2, #0
 800165a:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 800165c:	4b18      	ldr	r3, [pc, #96]	@ (80016c0 <Can_Init+0xa0>)
 800165e:	2200      	movs	r2, #0
 8001660:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8001662:	4b17      	ldr	r3, [pc, #92]	@ (80016c0 <Can_Init+0xa0>)
 8001664:	2200      	movs	r2, #0
 8001666:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8001668:	4b15      	ldr	r3, [pc, #84]	@ (80016c0 <Can_Init+0xa0>)
 800166a:	2200      	movs	r2, #0
 800166c:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 800166e:	4b14      	ldr	r3, [pc, #80]	@ (80016c0 <Can_Init+0xa0>)
 8001670:	2200      	movs	r2, #0
 8001672:	775a      	strb	r2, [r3, #29]

	CAN_FilterTypeDef canFilterConfig= {
 8001674:	f107 0308 	add.w	r3, r7, #8
 8001678:	2228      	movs	r2, #40	@ 0x28
 800167a:	2100      	movs	r1, #0
 800167c:	4618      	mov	r0, r3
 800167e:	f004 f9ee 	bl	8005a5e <memset>
 8001682:	f248 6360 	movw	r3, #34400	@ 0x8660
 8001686:	60bb      	str	r3, [r7, #8]
 8001688:	230a      	movs	r3, #10
 800168a:	61fb      	str	r3, [r7, #28]
 800168c:	2301      	movs	r3, #1
 800168e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001690:	2301      	movs	r3, #1
 8001692:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001694:	2314      	movs	r3, #20
 8001696:	62fb      	str	r3, [r7, #44]	@ 0x2c
		.FilterMode = CAN_FILTERMODE_IDMASK,
		.FilterScale = CAN_FILTERSCALE_32BIT,
		.SlaveStartFilterBank = 20,
	};

	HAL_CAN_ConfigFilter(&hcan, &canFilterConfig);
 8001698:	f107 0308 	add.w	r3, r7, #8
 800169c:	4619      	mov	r1, r3
 800169e:	4808      	ldr	r0, [pc, #32]	@ (80016c0 <Can_Init+0xa0>)
 80016a0:	f000 fbd8 	bl	8001e54 <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan);
 80016a4:	4806      	ldr	r0, [pc, #24]	@ (80016c0 <Can_Init+0xa0>)
 80016a6:	f000 fc9f 	bl	8001fe8 <HAL_CAN_Start>

	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80016aa:	2102      	movs	r1, #2
 80016ac:	4804      	ldr	r0, [pc, #16]	@ (80016c0 <Can_Init+0xa0>)
 80016ae:	f000 fe01 	bl	80022b4 <HAL_CAN_ActivateNotification>
	Can_state = CAN_READY;
 80016b2:	4b05      	ldr	r3, [pc, #20]	@ (80016c8 <Can_Init+0xa8>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	701a      	strb	r2, [r3, #0]

}
 80016b8:	bf00      	nop
 80016ba:	3730      	adds	r7, #48	@ 0x30
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000338 	.word	0x20000338
 80016c4:	40006400 	.word	0x40006400
 80016c8:	20000360 	.word	0x20000360

080016cc <Can_MainFunction_Read>:

void Can_MainFunction_Read(void) {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08c      	sub	sp, #48	@ 0x30
 80016d0:	af00      	add	r7, sp, #0
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];
	HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80016d2:	f107 030c 	add.w	r3, r7, #12
 80016d6:	f107 0214 	add.w	r2, r7, #20
 80016da:	2100      	movs	r1, #0
 80016dc:	4808      	ldr	r0, [pc, #32]	@ (8001700 <Can_MainFunction_Read+0x34>)
 80016de:	f000 fcc7 	bl	8002070 <HAL_CAN_GetRxMessage>

	PduInfoType pduInfo = {
 80016e2:	f107 030c 	add.w	r3, r7, #12
 80016e6:	607b      	str	r3, [r7, #4]
		.SduDataPtr = RxData,
		.SduLength = RxHeader.DLC,
 80016e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	PduInfoType pduInfo = {
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	723b      	strb	r3, [r7, #8]
	};

	Com_RxIndication(COM_PDU_ID_READINGSPDU, &pduInfo);
 80016ee:	1d3b      	adds	r3, r7, #4
 80016f0:	4619      	mov	r1, r3
 80016f2:	2000      	movs	r0, #0
 80016f4:	f7ff fb8e 	bl	8000e14 <Com_RxIndication>
}
 80016f8:	bf00      	nop
 80016fa:	3730      	adds	r7, #48	@ 0x30
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000338 	.word	0x20000338

08001704 <brake_safely>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t buffer[100];
void brake_safely(float speed, float distance) {
 8001704:	b580      	push	{r7, lr}
 8001706:	b088      	sub	sp, #32
 8001708:	af00      	add	r7, sp, #0
 800170a:	ed87 0a01 	vstr	s0, [r7, #4]
 800170e:	edc7 0a00 	vstr	s1, [r7]
	const float TWO_SECONDS = 2.0, MIN_SAFE_DISTANCE = 2.0;
 8001712:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001716:	61fb      	str	r3, [r7, #28]
 8001718:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800171c:	61bb      	str	r3, [r7, #24]
	float two_seconds_dist = TWO_SECONDS * speed;
 800171e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001722:	edd7 7a01 	vldr	s15, [r7, #4]
 8001726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800172a:	edc7 7a05 	vstr	s15, [r7, #20]
	float desired_gap_distance = MIN_SAFE_DISTANCE > two_seconds_dist? MIN_SAFE_DISTANCE : two_seconds_dist;
 800172e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001732:	edd7 7a05 	vldr	s15, [r7, #20]
 8001736:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800173a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800173e:	dd01      	ble.n	8001744 <brake_safely+0x40>
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	e000      	b.n	8001746 <brake_safely+0x42>
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	613b      	str	r3, [r7, #16]
	float distance_diff = distance - desired_gap_distance;
 8001748:	ed97 7a00 	vldr	s14, [r7]
 800174c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001750:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001754:	edc7 7a03 	vstr	s15, [r7, #12]
	if (distance_diff < 0 && speed  > 0) {
 8001758:	edd7 7a03 	vldr	s15, [r7, #12]
 800175c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001764:	d400      	bmi.n	8001768 <brake_safely+0x64>
		float necessary_deceleration = (2*(MIN_SAFE_DISTANCE - speed * TWO_SECONDS)) / (TWO_SECONDS*TWO_SECONDS);
		sprintf(buffer, "Braking deceleration: %.2f\n\r", necessary_deceleration);
		// Apply brakes here
		HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 100);
	}
}
 8001766:	e02e      	b.n	80017c6 <brake_safely+0xc2>
	if (distance_diff < 0 && speed  > 0) {
 8001768:	edd7 7a01 	vldr	s15, [r7, #4]
 800176c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001774:	dc00      	bgt.n	8001778 <brake_safely+0x74>
}
 8001776:	e026      	b.n	80017c6 <brake_safely+0xc2>
		float necessary_deceleration = (2*(MIN_SAFE_DISTANCE - speed * TWO_SECONDS)) / (TWO_SECONDS*TWO_SECONDS);
 8001778:	ed97 7a01 	vldr	s14, [r7, #4]
 800177c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001780:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001784:	ed97 7a06 	vldr	s14, [r7, #24]
 8001788:	ee77 7a67 	vsub.f32	s15, s14, s15
 800178c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001790:	edd7 7a07 	vldr	s15, [r7, #28]
 8001794:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001798:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800179c:	edc7 7a02 	vstr	s15, [r7, #8]
		sprintf(buffer, "Braking deceleration: %.2f\n\r", necessary_deceleration);
 80017a0:	68b8      	ldr	r0, [r7, #8]
 80017a2:	f7fe fed9 	bl	8000558 <__aeabi_f2d>
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	4909      	ldr	r1, [pc, #36]	@ (80017d0 <brake_safely+0xcc>)
 80017ac:	4809      	ldr	r0, [pc, #36]	@ (80017d4 <brake_safely+0xd0>)
 80017ae:	f004 f8e3 	bl	8005978 <siprintf>
		HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 100);
 80017b2:	4808      	ldr	r0, [pc, #32]	@ (80017d4 <brake_safely+0xd0>)
 80017b4:	f7fe fd64 	bl	8000280 <strlen>
 80017b8:	4603      	mov	r3, r0
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	2364      	movs	r3, #100	@ 0x64
 80017be:	4905      	ldr	r1, [pc, #20]	@ (80017d4 <brake_safely+0xd0>)
 80017c0:	4805      	ldr	r0, [pc, #20]	@ (80017d8 <brake_safely+0xd4>)
 80017c2:	f002 ff4d 	bl	8004660 <HAL_UART_Transmit>
}
 80017c6:	bf00      	nop
 80017c8:	3720      	adds	r7, #32
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	08007c18 	.word	0x08007c18
 80017d4:	200003ec 	.word	0x200003ec
 80017d8:	20000364 	.word	0x20000364

080017dc <signal_callback>:

void signal_callback(void) {
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
	// com receive signal for both of them
	float speed, distance;
	Com_ReceiveSignal(COM_SIGNAL_ID_SPEEDSIGNAL, &speed);
 80017e2:	1d3b      	adds	r3, r7, #4
 80017e4:	4619      	mov	r1, r3
 80017e6:	2000      	movs	r0, #0
 80017e8:	f7ff fed0 	bl	800158c <Com_ReceiveSignal>
	Com_ReceiveSignal(COM_SIGNAL_ID_DISTSIGNAL, &distance);
 80017ec:	463b      	mov	r3, r7
 80017ee:	4619      	mov	r1, r3
 80017f0:	2001      	movs	r0, #1
 80017f2:	f7ff fecb 	bl	800158c <Com_ReceiveSignal>
	brake_safely(speed, distance);
 80017f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80017fa:	ed97 7a00 	vldr	s14, [r7]
 80017fe:	eef0 0a47 	vmov.f32	s1, s14
 8001802:	eeb0 0a67 	vmov.f32	s0, s15
 8001806:	f7ff ff7d 	bl	8001704 <brake_safely>
}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
	Can_MainFunction_Read();
 800181a:	f7ff ff57 	bl	80016cc <Can_MainFunction_Read>
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800182c:	f000 faac 	bl	8001d88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001830:	f000 f80e 	bl	8001850 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001834:	f000 f89a 	bl	800196c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001838:	f000 f868 	bl	800190c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  Com_Init(&ComConfiguration);
 800183c:	4803      	ldr	r0, [pc, #12]	@ (800184c <main+0x24>)
 800183e:	f7ff f9bb 	bl	8000bb8 <Com_Init>
  Can_ConfigType CanConfig;
  Can_Init(&CanConfig);
 8001842:	4638      	mov	r0, r7
 8001844:	f7ff feec 	bl	8001620 <Can_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001848:	bf00      	nop
 800184a:	e7fd      	b.n	8001848 <main+0x20>
 800184c:	08007c5c 	.word	0x08007c5c

08001850 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b0a6      	sub	sp, #152	@ 0x98
 8001854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001856:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800185a:	2228      	movs	r2, #40	@ 0x28
 800185c:	2100      	movs	r1, #0
 800185e:	4618      	mov	r0, r3
 8001860:	f004 f8fd 	bl	8005a5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001864:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001874:	1d3b      	adds	r3, r7, #4
 8001876:	2258      	movs	r2, #88	@ 0x58
 8001878:	2100      	movs	r1, #0
 800187a:	4618      	mov	r0, r3
 800187c:	f004 f8ef 	bl	8005a5e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001880:	2301      	movs	r3, #1
 8001882:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001884:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001888:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800188a:	2301      	movs	r3, #1
 800188c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800188e:	2302      	movs	r3, #2
 8001890:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001894:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001898:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 800189c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80018a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80018a4:	2300      	movs	r3, #0
 80018a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018aa:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80018ae:	4618      	mov	r0, r3
 80018b0:	f001 f9de 	bl	8002c70 <HAL_RCC_OscConfig>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80018ba:	f000 f8bd 	bl	8001a38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018be:	230f      	movs	r3, #15
 80018c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018c2:	2302      	movs	r3, #2
 80018c4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018c6:	2300      	movs	r3, #0
 80018c8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018ce:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018d0:	2300      	movs	r3, #0
 80018d2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018d4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80018d8:	2102      	movs	r1, #2
 80018da:	4618      	mov	r0, r3
 80018dc:	f002 fa1c 	bl	8003d18 <HAL_RCC_ClockConfig>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80018e6:	f000 f8a7 	bl	8001a38 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80018ea:	2302      	movs	r3, #2
 80018ec:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80018ee:	2300      	movs	r3, #0
 80018f0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018f2:	1d3b      	adds	r3, r7, #4
 80018f4:	4618      	mov	r0, r3
 80018f6:	f002 fc47 	bl	8004188 <HAL_RCCEx_PeriphCLKConfig>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001900:	f000 f89a 	bl	8001a38 <Error_Handler>
  }
}
 8001904:	bf00      	nop
 8001906:	3798      	adds	r7, #152	@ 0x98
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001910:	4b14      	ldr	r3, [pc, #80]	@ (8001964 <MX_USART2_UART_Init+0x58>)
 8001912:	4a15      	ldr	r2, [pc, #84]	@ (8001968 <MX_USART2_UART_Init+0x5c>)
 8001914:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001916:	4b13      	ldr	r3, [pc, #76]	@ (8001964 <MX_USART2_UART_Init+0x58>)
 8001918:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800191c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800191e:	4b11      	ldr	r3, [pc, #68]	@ (8001964 <MX_USART2_UART_Init+0x58>)
 8001920:	2200      	movs	r2, #0
 8001922:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001924:	4b0f      	ldr	r3, [pc, #60]	@ (8001964 <MX_USART2_UART_Init+0x58>)
 8001926:	2200      	movs	r2, #0
 8001928:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800192a:	4b0e      	ldr	r3, [pc, #56]	@ (8001964 <MX_USART2_UART_Init+0x58>)
 800192c:	2200      	movs	r2, #0
 800192e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001930:	4b0c      	ldr	r3, [pc, #48]	@ (8001964 <MX_USART2_UART_Init+0x58>)
 8001932:	220c      	movs	r2, #12
 8001934:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001936:	4b0b      	ldr	r3, [pc, #44]	@ (8001964 <MX_USART2_UART_Init+0x58>)
 8001938:	2200      	movs	r2, #0
 800193a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800193c:	4b09      	ldr	r3, [pc, #36]	@ (8001964 <MX_USART2_UART_Init+0x58>)
 800193e:	2200      	movs	r2, #0
 8001940:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001942:	4b08      	ldr	r3, [pc, #32]	@ (8001964 <MX_USART2_UART_Init+0x58>)
 8001944:	2200      	movs	r2, #0
 8001946:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001948:	4b06      	ldr	r3, [pc, #24]	@ (8001964 <MX_USART2_UART_Init+0x58>)
 800194a:	2200      	movs	r2, #0
 800194c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800194e:	4805      	ldr	r0, [pc, #20]	@ (8001964 <MX_USART2_UART_Init+0x58>)
 8001950:	f002 fe38 	bl	80045c4 <HAL_UART_Init>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800195a:	f000 f86d 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000364 	.word	0x20000364
 8001968:	40004400 	.word	0x40004400

0800196c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08a      	sub	sp, #40	@ 0x28
 8001970:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001972:	f107 0314 	add.w	r3, r7, #20
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	605a      	str	r2, [r3, #4]
 800197c:	609a      	str	r2, [r3, #8]
 800197e:	60da      	str	r2, [r3, #12]
 8001980:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001982:	4b2b      	ldr	r3, [pc, #172]	@ (8001a30 <MX_GPIO_Init+0xc4>)
 8001984:	695b      	ldr	r3, [r3, #20]
 8001986:	4a2a      	ldr	r2, [pc, #168]	@ (8001a30 <MX_GPIO_Init+0xc4>)
 8001988:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800198c:	6153      	str	r3, [r2, #20]
 800198e:	4b28      	ldr	r3, [pc, #160]	@ (8001a30 <MX_GPIO_Init+0xc4>)
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001996:	613b      	str	r3, [r7, #16]
 8001998:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800199a:	4b25      	ldr	r3, [pc, #148]	@ (8001a30 <MX_GPIO_Init+0xc4>)
 800199c:	695b      	ldr	r3, [r3, #20]
 800199e:	4a24      	ldr	r2, [pc, #144]	@ (8001a30 <MX_GPIO_Init+0xc4>)
 80019a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80019a4:	6153      	str	r3, [r2, #20]
 80019a6:	4b22      	ldr	r3, [pc, #136]	@ (8001a30 <MX_GPIO_Init+0xc4>)
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001a30 <MX_GPIO_Init+0xc4>)
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	4a1e      	ldr	r2, [pc, #120]	@ (8001a30 <MX_GPIO_Init+0xc4>)
 80019b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019bc:	6153      	str	r3, [r2, #20]
 80019be:	4b1c      	ldr	r3, [pc, #112]	@ (8001a30 <MX_GPIO_Init+0xc4>)
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019c6:	60bb      	str	r3, [r7, #8]
 80019c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ca:	4b19      	ldr	r3, [pc, #100]	@ (8001a30 <MX_GPIO_Init+0xc4>)
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	4a18      	ldr	r2, [pc, #96]	@ (8001a30 <MX_GPIO_Init+0xc4>)
 80019d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019d4:	6153      	str	r3, [r2, #20]
 80019d6:	4b16      	ldr	r3, [pc, #88]	@ (8001a30 <MX_GPIO_Init+0xc4>)
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019de:	607b      	str	r3, [r7, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80019e2:	2200      	movs	r2, #0
 80019e4:	2120      	movs	r1, #32
 80019e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019ea:	f001 f929 	bl	8002c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019f4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80019f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019fe:	f107 0314 	add.w	r3, r7, #20
 8001a02:	4619      	mov	r1, r3
 8001a04:	480b      	ldr	r0, [pc, #44]	@ (8001a34 <MX_GPIO_Init+0xc8>)
 8001a06:	f000 ff91 	bl	800292c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001a0a:	2320      	movs	r3, #32
 8001a0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a16:	2300      	movs	r3, #0
 8001a18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001a1a:	f107 0314 	add.w	r3, r7, #20
 8001a1e:	4619      	mov	r1, r3
 8001a20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a24:	f000 ff82 	bl	800292c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a28:	bf00      	nop
 8001a2a:	3728      	adds	r7, #40	@ 0x28
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40021000 	.word	0x40021000
 8001a34:	48000800 	.word	0x48000800

08001a38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a3c:	b672      	cpsid	i
}
 8001a3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a40:	bf00      	nop
 8001a42:	e7fd      	b.n	8001a40 <Error_Handler+0x8>

08001a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a88 <HAL_MspInit+0x44>)
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	4a0e      	ldr	r2, [pc, #56]	@ (8001a88 <HAL_MspInit+0x44>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	6193      	str	r3, [r2, #24]
 8001a56:	4b0c      	ldr	r3, [pc, #48]	@ (8001a88 <HAL_MspInit+0x44>)
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	607b      	str	r3, [r7, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a62:	4b09      	ldr	r3, [pc, #36]	@ (8001a88 <HAL_MspInit+0x44>)
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	4a08      	ldr	r2, [pc, #32]	@ (8001a88 <HAL_MspInit+0x44>)
 8001a68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a6c:	61d3      	str	r3, [r2, #28]
 8001a6e:	4b06      	ldr	r3, [pc, #24]	@ (8001a88 <HAL_MspInit+0x44>)
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a76:	603b      	str	r3, [r7, #0]
 8001a78:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a7a:	2007      	movs	r0, #7
 8001a7c:	f000 ff22 	bl	80028c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a80:	bf00      	nop
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40021000 	.word	0x40021000

08001a8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08a      	sub	sp, #40	@ 0x28
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a94:	f107 0314 	add.w	r3, r7, #20
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
 8001aa2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a17      	ldr	r2, [pc, #92]	@ (8001b08 <HAL_UART_MspInit+0x7c>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d128      	bne.n	8001b00 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001aae:	4b17      	ldr	r3, [pc, #92]	@ (8001b0c <HAL_UART_MspInit+0x80>)
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	4a16      	ldr	r2, [pc, #88]	@ (8001b0c <HAL_UART_MspInit+0x80>)
 8001ab4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ab8:	61d3      	str	r3, [r2, #28]
 8001aba:	4b14      	ldr	r3, [pc, #80]	@ (8001b0c <HAL_UART_MspInit+0x80>)
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ac2:	613b      	str	r3, [r7, #16]
 8001ac4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac6:	4b11      	ldr	r3, [pc, #68]	@ (8001b0c <HAL_UART_MspInit+0x80>)
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	4a10      	ldr	r2, [pc, #64]	@ (8001b0c <HAL_UART_MspInit+0x80>)
 8001acc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ad0:	6153      	str	r3, [r2, #20]
 8001ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8001b0c <HAL_UART_MspInit+0x80>)
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ade:	230c      	movs	r3, #12
 8001ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aea:	2300      	movs	r3, #0
 8001aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001aee:	2307      	movs	r3, #7
 8001af0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af2:	f107 0314 	add.w	r3, r7, #20
 8001af6:	4619      	mov	r1, r3
 8001af8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001afc:	f000 ff16 	bl	800292c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b00:	bf00      	nop
 8001b02:	3728      	adds	r7, #40	@ 0x28
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40004400 	.word	0x40004400
 8001b0c:	40021000 	.word	0x40021000

08001b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b14:	bf00      	nop
 8001b16:	e7fd      	b.n	8001b14 <NMI_Handler+0x4>

08001b18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b1c:	bf00      	nop
 8001b1e:	e7fd      	b.n	8001b1c <HardFault_Handler+0x4>

08001b20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b24:	bf00      	nop
 8001b26:	e7fd      	b.n	8001b24 <MemManage_Handler+0x4>

08001b28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b2c:	bf00      	nop
 8001b2e:	e7fd      	b.n	8001b2c <BusFault_Handler+0x4>

08001b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b34:	bf00      	nop
 8001b36:	e7fd      	b.n	8001b34 <UsageFault_Handler+0x4>

08001b38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b46:	b480      	push	{r7}
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b66:	f000 f955 	bl	8001e14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
	...

08001b70 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001b74:	4802      	ldr	r0, [pc, #8]	@ (8001b80 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8001b76:	f000 fbc3 	bl	8002300 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000338 	.word	0x20000338

08001b84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  return 1;
 8001b88:	2301      	movs	r3, #1
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <_kill>:

int _kill(int pid, int sig)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b9e:	f003 ffb1 	bl	8005b04 <__errno>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2216      	movs	r2, #22
 8001ba6:	601a      	str	r2, [r3, #0]
  return -1;
 8001ba8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <_exit>:

void _exit (int status)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f7ff ffe7 	bl	8001b94 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bc6:	bf00      	nop
 8001bc8:	e7fd      	b.n	8001bc6 <_exit+0x12>

08001bca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b086      	sub	sp, #24
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	60f8      	str	r0, [r7, #12]
 8001bd2:	60b9      	str	r1, [r7, #8]
 8001bd4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	617b      	str	r3, [r7, #20]
 8001bda:	e00a      	b.n	8001bf2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bdc:	f3af 8000 	nop.w
 8001be0:	4601      	mov	r1, r0
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	1c5a      	adds	r2, r3, #1
 8001be6:	60ba      	str	r2, [r7, #8]
 8001be8:	b2ca      	uxtb	r2, r1
 8001bea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	dbf0      	blt.n	8001bdc <_read+0x12>
  }

  return len;
 8001bfa:	687b      	ldr	r3, [r7, #4]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]
 8001c14:	e009      	b.n	8001c2a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	1c5a      	adds	r2, r3, #1
 8001c1a:	60ba      	str	r2, [r7, #8]
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	3301      	adds	r3, #1
 8001c28:	617b      	str	r3, [r7, #20]
 8001c2a:	697a      	ldr	r2, [r7, #20]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	dbf1      	blt.n	8001c16 <_write+0x12>
  }
  return len;
 8001c32:	687b      	ldr	r3, [r7, #4]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3718      	adds	r7, #24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <_close>:

int _close(int file)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c64:	605a      	str	r2, [r3, #4]
  return 0;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <_isatty>:

int _isatty(int file)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c7c:	2301      	movs	r3, #1
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b085      	sub	sp, #20
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	60f8      	str	r0, [r7, #12]
 8001c92:	60b9      	str	r1, [r7, #8]
 8001c94:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cac:	4a14      	ldr	r2, [pc, #80]	@ (8001d00 <_sbrk+0x5c>)
 8001cae:	4b15      	ldr	r3, [pc, #84]	@ (8001d04 <_sbrk+0x60>)
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cb8:	4b13      	ldr	r3, [pc, #76]	@ (8001d08 <_sbrk+0x64>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d102      	bne.n	8001cc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cc0:	4b11      	ldr	r3, [pc, #68]	@ (8001d08 <_sbrk+0x64>)
 8001cc2:	4a12      	ldr	r2, [pc, #72]	@ (8001d0c <_sbrk+0x68>)
 8001cc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cc6:	4b10      	ldr	r3, [pc, #64]	@ (8001d08 <_sbrk+0x64>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4413      	add	r3, r2
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d207      	bcs.n	8001ce4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cd4:	f003 ff16 	bl	8005b04 <__errno>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	220c      	movs	r2, #12
 8001cdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cde:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce2:	e009      	b.n	8001cf8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ce4:	4b08      	ldr	r3, [pc, #32]	@ (8001d08 <_sbrk+0x64>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cea:	4b07      	ldr	r3, [pc, #28]	@ (8001d08 <_sbrk+0x64>)
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	4a05      	ldr	r2, [pc, #20]	@ (8001d08 <_sbrk+0x64>)
 8001cf4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	20010000 	.word	0x20010000
 8001d04:	00000400 	.word	0x00000400
 8001d08:	20000450 	.word	0x20000450
 8001d0c:	200005a8 	.word	0x200005a8

08001d10 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d14:	4b06      	ldr	r3, [pc, #24]	@ (8001d30 <SystemInit+0x20>)
 8001d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d1a:	4a05      	ldr	r2, [pc, #20]	@ (8001d30 <SystemInit+0x20>)
 8001d1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d24:	bf00      	nop
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d6c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d38:	f7ff ffea 	bl	8001d10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d3c:	480c      	ldr	r0, [pc, #48]	@ (8001d70 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d3e:	490d      	ldr	r1, [pc, #52]	@ (8001d74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d40:	4a0d      	ldr	r2, [pc, #52]	@ (8001d78 <LoopForever+0xe>)
  movs r3, #0
 8001d42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d44:	e002      	b.n	8001d4c <LoopCopyDataInit>

08001d46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d4a:	3304      	adds	r3, #4

08001d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d50:	d3f9      	bcc.n	8001d46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d52:	4a0a      	ldr	r2, [pc, #40]	@ (8001d7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d54:	4c0a      	ldr	r4, [pc, #40]	@ (8001d80 <LoopForever+0x16>)
  movs r3, #0
 8001d56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d58:	e001      	b.n	8001d5e <LoopFillZerobss>

08001d5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d5c:	3204      	adds	r2, #4

08001d5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d60:	d3fb      	bcc.n	8001d5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d62:	f003 fed5 	bl	8005b10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d66:	f7ff fd5f 	bl	8001828 <main>

08001d6a <LoopForever>:

LoopForever:
    b LoopForever
 8001d6a:	e7fe      	b.n	8001d6a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d6c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001d70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d74:	200002fc 	.word	0x200002fc
  ldr r2, =_sidata
 8001d78:	08008020 	.word	0x08008020
  ldr r2, =_sbss
 8001d7c:	200002fc 	.word	0x200002fc
  ldr r4, =_ebss
 8001d80:	200005a4 	.word	0x200005a4

08001d84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d84:	e7fe      	b.n	8001d84 <ADC1_2_IRQHandler>
	...

08001d88 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d8c:	4b08      	ldr	r3, [pc, #32]	@ (8001db0 <HAL_Init+0x28>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a07      	ldr	r2, [pc, #28]	@ (8001db0 <HAL_Init+0x28>)
 8001d92:	f043 0310 	orr.w	r3, r3, #16
 8001d96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d98:	2003      	movs	r0, #3
 8001d9a:	f000 fd93 	bl	80028c4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d9e:	2000      	movs	r0, #0
 8001da0:	f000 f808 	bl	8001db4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001da4:	f7ff fe4e 	bl	8001a44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40022000 	.word	0x40022000

08001db4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dbc:	4b12      	ldr	r3, [pc, #72]	@ (8001e08 <HAL_InitTick+0x54>)
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	4b12      	ldr	r3, [pc, #72]	@ (8001e0c <HAL_InitTick+0x58>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f000 fd9d 	bl	8002912 <HAL_SYSTICK_Config>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e00e      	b.n	8001e00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2b0f      	cmp	r3, #15
 8001de6:	d80a      	bhi.n	8001dfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001de8:	2200      	movs	r2, #0
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	f04f 30ff 	mov.w	r0, #4294967295
 8001df0:	f000 fd73 	bl	80028da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001df4:	4a06      	ldr	r2, [pc, #24]	@ (8001e10 <HAL_InitTick+0x5c>)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	e000      	b.n	8001e00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	20000128 	.word	0x20000128
 8001e0c:	20000130 	.word	0x20000130
 8001e10:	2000012c 	.word	0x2000012c

08001e14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e18:	4b06      	ldr	r3, [pc, #24]	@ (8001e34 <HAL_IncTick+0x20>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4b06      	ldr	r3, [pc, #24]	@ (8001e38 <HAL_IncTick+0x24>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4413      	add	r3, r2
 8001e24:	4a04      	ldr	r2, [pc, #16]	@ (8001e38 <HAL_IncTick+0x24>)
 8001e26:	6013      	str	r3, [r2, #0]
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	20000130 	.word	0x20000130
 8001e38:	20000454 	.word	0x20000454

08001e3c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001e40:	4b03      	ldr	r3, [pc, #12]	@ (8001e50 <HAL_GetTick+0x14>)
 8001e42:	681b      	ldr	r3, [r3, #0]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	20000454 	.word	0x20000454

08001e54 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b087      	sub	sp, #28
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e6a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001e6c:	7cfb      	ldrb	r3, [r7, #19]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d003      	beq.n	8001e7a <HAL_CAN_ConfigFilter+0x26>
 8001e72:	7cfb      	ldrb	r3, [r7, #19]
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	f040 80aa 	bne.w	8001fce <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001e80:	f043 0201 	orr.w	r2, r3, #1
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	f003 031f 	and.w	r3, r3, #31
 8001e92:	2201      	movs	r2, #1
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	401a      	ands	r2, r3
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	69db      	ldr	r3, [r3, #28]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d123      	bne.n	8001efc <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	401a      	ands	r2, r3
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001ed6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	3248      	adds	r2, #72	@ 0x48
 8001edc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ef0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ef2:	6979      	ldr	r1, [r7, #20]
 8001ef4:	3348      	adds	r3, #72	@ 0x48
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	440b      	add	r3, r1
 8001efa:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	69db      	ldr	r3, [r3, #28]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d122      	bne.n	8001f4a <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	431a      	orrs	r2, r3
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001f24:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	3248      	adds	r2, #72	@ 0x48
 8001f2a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f3e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f40:	6979      	ldr	r1, [r7, #20]
 8001f42:	3348      	adds	r3, #72	@ 0x48
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	440b      	add	r3, r1
 8001f48:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d109      	bne.n	8001f66 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	401a      	ands	r2, r3
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001f64:	e007      	b.n	8001f76 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d109      	bne.n	8001f92 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	43db      	mvns	r3, r3
 8001f88:	401a      	ands	r2, r3
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001f90:	e007      	b.n	8001fa2 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d107      	bne.n	8001fba <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001fc0:	f023 0201 	bic.w	r2, r3, #1
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	e006      	b.n	8001fdc <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
  }
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	371c      	adds	r7, #28
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d12e      	bne.n	800205a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2202      	movs	r2, #2
 8002000:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 0201 	bic.w	r2, r2, #1
 8002012:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002014:	f7ff ff12 	bl	8001e3c <HAL_GetTick>
 8002018:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800201a:	e012      	b.n	8002042 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800201c:	f7ff ff0e 	bl	8001e3c <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b0a      	cmp	r3, #10
 8002028:	d90b      	bls.n	8002042 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800202e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2205      	movs	r2, #5
 800203a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e012      	b.n	8002068 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1e5      	bne.n	800201c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002056:	2300      	movs	r3, #0
 8002058:	e006      	b.n	8002068 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800205e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
  }
}
 8002068:	4618      	mov	r0, r3
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002070:	b480      	push	{r7}
 8002072:	b087      	sub	sp, #28
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
 800207c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002084:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002086:	7dfb      	ldrb	r3, [r7, #23]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d003      	beq.n	8002094 <HAL_CAN_GetRxMessage+0x24>
 800208c:	7dfb      	ldrb	r3, [r7, #23]
 800208e:	2b02      	cmp	r3, #2
 8002090:	f040 8103 	bne.w	800229a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d10e      	bne.n	80020b8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	f003 0303 	and.w	r3, r3, #3
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d116      	bne.n	80020d6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ac:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e0f7      	b.n	80022a8 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	f003 0303 	and.w	r3, r3, #3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d107      	bne.n	80020d6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ca:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e0e8      	b.n	80022a8 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	331b      	adds	r3, #27
 80020de:	011b      	lsls	r3, r3, #4
 80020e0:	4413      	add	r3, r2
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0204 	and.w	r2, r3, #4
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d10c      	bne.n	800210e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	331b      	adds	r3, #27
 80020fc:	011b      	lsls	r3, r3, #4
 80020fe:	4413      	add	r3, r2
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	0d5b      	lsrs	r3, r3, #21
 8002104:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	e00b      	b.n	8002126 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	331b      	adds	r3, #27
 8002116:	011b      	lsls	r3, r3, #4
 8002118:	4413      	add	r3, r2
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	08db      	lsrs	r3, r3, #3
 800211e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	331b      	adds	r3, #27
 800212e:	011b      	lsls	r3, r3, #4
 8002130:	4413      	add	r3, r2
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0202 	and.w	r2, r3, #2
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	331b      	adds	r3, #27
 8002144:	011b      	lsls	r3, r3, #4
 8002146:	4413      	add	r3, r2
 8002148:	3304      	adds	r3, #4
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0308 	and.w	r3, r3, #8
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2208      	movs	r2, #8
 8002158:	611a      	str	r2, [r3, #16]
 800215a:	e00b      	b.n	8002174 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	331b      	adds	r3, #27
 8002164:	011b      	lsls	r3, r3, #4
 8002166:	4413      	add	r3, r2
 8002168:	3304      	adds	r3, #4
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 020f 	and.w	r2, r3, #15
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	331b      	adds	r3, #27
 800217c:	011b      	lsls	r3, r3, #4
 800217e:	4413      	add	r3, r2
 8002180:	3304      	adds	r3, #4
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	0a1b      	lsrs	r3, r3, #8
 8002186:	b2da      	uxtb	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	331b      	adds	r3, #27
 8002194:	011b      	lsls	r3, r3, #4
 8002196:	4413      	add	r3, r2
 8002198:	3304      	adds	r3, #4
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	0c1b      	lsrs	r3, r3, #16
 800219e:	b29a      	uxth	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	011b      	lsls	r3, r3, #4
 80021ac:	4413      	add	r3, r2
 80021ae:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	011b      	lsls	r3, r3, #4
 80021c2:	4413      	add	r3, r2
 80021c4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	0a1a      	lsrs	r2, r3, #8
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	3301      	adds	r3, #1
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	011b      	lsls	r3, r3, #4
 80021dc:	4413      	add	r3, r2
 80021de:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	0c1a      	lsrs	r2, r3, #16
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	3302      	adds	r3, #2
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	011b      	lsls	r3, r3, #4
 80021f6:	4413      	add	r3, r2
 80021f8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	0e1a      	lsrs	r2, r3, #24
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	3303      	adds	r3, #3
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	011b      	lsls	r3, r3, #4
 8002210:	4413      	add	r3, r2
 8002212:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	3304      	adds	r3, #4
 800221c:	b2d2      	uxtb	r2, r2
 800221e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	011b      	lsls	r3, r3, #4
 8002228:	4413      	add	r3, r2
 800222a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	0a1a      	lsrs	r2, r3, #8
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	3305      	adds	r3, #5
 8002236:	b2d2      	uxtb	r2, r2
 8002238:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	011b      	lsls	r3, r3, #4
 8002242:	4413      	add	r3, r2
 8002244:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	0c1a      	lsrs	r2, r3, #16
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	3306      	adds	r3, #6
 8002250:	b2d2      	uxtb	r2, r2
 8002252:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	011b      	lsls	r3, r3, #4
 800225c:	4413      	add	r3, r2
 800225e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	0e1a      	lsrs	r2, r3, #24
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	3307      	adds	r3, #7
 800226a:	b2d2      	uxtb	r2, r2
 800226c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d108      	bne.n	8002286 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68da      	ldr	r2, [r3, #12]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f042 0220 	orr.w	r2, r2, #32
 8002282:	60da      	str	r2, [r3, #12]
 8002284:	e007      	b.n	8002296 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	691a      	ldr	r2, [r3, #16]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f042 0220 	orr.w	r2, r2, #32
 8002294:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002296:	2300      	movs	r3, #0
 8002298:	e006      	b.n	80022a8 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
  }
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	371c      	adds	r7, #28
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022c4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80022c6:	7bfb      	ldrb	r3, [r7, #15]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d002      	beq.n	80022d2 <HAL_CAN_ActivateNotification+0x1e>
 80022cc:	7bfb      	ldrb	r3, [r7, #15]
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d109      	bne.n	80022e6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	6959      	ldr	r1, [r3, #20]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	430a      	orrs	r2, r1
 80022e0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80022e2:	2300      	movs	r3, #0
 80022e4:	e006      	b.n	80022f4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ea:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
  }
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3714      	adds	r7, #20
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b08a      	sub	sp, #40	@ 0x28
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002308:	2300      	movs	r3, #0
 800230a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800233c:	6a3b      	ldr	r3, [r7, #32]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	d07c      	beq.n	8002440 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b00      	cmp	r3, #0
 800234e:	d023      	beq.n	8002398 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2201      	movs	r2, #1
 8002356:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f983 	bl	800266e <HAL_CAN_TxMailbox0CompleteCallback>
 8002368:	e016      	b.n	8002398 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	2b00      	cmp	r3, #0
 8002372:	d004      	beq.n	800237e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002376:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800237a:	627b      	str	r3, [r7, #36]	@ 0x24
 800237c:	e00c      	b.n	8002398 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	f003 0308 	and.w	r3, r3, #8
 8002384:	2b00      	cmp	r3, #0
 8002386:	d004      	beq.n	8002392 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800238a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800238e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002390:	e002      	b.n	8002398 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 f989 	bl	80026aa <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d024      	beq.n	80023ec <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023aa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f963 	bl	8002682 <HAL_CAN_TxMailbox1CompleteCallback>
 80023bc:	e016      	b.n	80023ec <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d004      	beq.n	80023d2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80023c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ca:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80023ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80023d0:	e00c      	b.n	80023ec <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d004      	beq.n	80023e6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80023dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80023e4:	e002      	b.n	80023ec <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 f969 	bl	80026be <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d024      	beq.n	8002440 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80023fe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 f943 	bl	8002696 <HAL_CAN_TxMailbox2CompleteCallback>
 8002410:	e016      	b.n	8002440 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d004      	beq.n	8002426 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800241c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002422:	627b      	str	r3, [r7, #36]	@ 0x24
 8002424:	e00c      	b.n	8002440 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d004      	beq.n	800243a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002432:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002436:	627b      	str	r3, [r7, #36]	@ 0x24
 8002438:	e002      	b.n	8002440 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 f949 	bl	80026d2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002440:	6a3b      	ldr	r3, [r7, #32]
 8002442:	f003 0308 	and.w	r3, r3, #8
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00c      	beq.n	8002464 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	f003 0310 	and.w	r3, r3, #16
 8002450:	2b00      	cmp	r3, #0
 8002452:	d007      	beq.n	8002464 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002456:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800245a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2210      	movs	r2, #16
 8002462:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002464:	6a3b      	ldr	r3, [r7, #32]
 8002466:	f003 0304 	and.w	r3, r3, #4
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00b      	beq.n	8002486 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	f003 0308 	and.w	r3, r3, #8
 8002474:	2b00      	cmp	r3, #0
 8002476:	d006      	beq.n	8002486 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2208      	movs	r2, #8
 800247e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 f930 	bl	80026e6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002486:	6a3b      	ldr	r3, [r7, #32]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d009      	beq.n	80024a4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	f003 0303 	and.w	r3, r3, #3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d002      	beq.n	80024a4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7ff f9b7 	bl	8001812 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80024a4:	6a3b      	ldr	r3, [r7, #32]
 80024a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00c      	beq.n	80024c8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	f003 0310 	and.w	r3, r3, #16
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d007      	beq.n	80024c8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80024b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024be:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2210      	movs	r2, #16
 80024c6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80024c8:	6a3b      	ldr	r3, [r7, #32]
 80024ca:	f003 0320 	and.w	r3, r3, #32
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00b      	beq.n	80024ea <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	f003 0308 	and.w	r3, r3, #8
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d006      	beq.n	80024ea <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2208      	movs	r2, #8
 80024e2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f000 f912 	bl	800270e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80024ea:	6a3b      	ldr	r3, [r7, #32]
 80024ec:	f003 0310 	and.w	r3, r3, #16
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d009      	beq.n	8002508 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	f003 0303 	and.w	r3, r3, #3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d002      	beq.n	8002508 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 f8f9 	bl	80026fa <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002508:	6a3b      	ldr	r3, [r7, #32]
 800250a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00b      	beq.n	800252a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	f003 0310 	and.w	r3, r3, #16
 8002518:	2b00      	cmp	r3, #0
 800251a:	d006      	beq.n	800252a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2210      	movs	r2, #16
 8002522:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 f8fc 	bl	8002722 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800252a:	6a3b      	ldr	r3, [r7, #32]
 800252c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d00b      	beq.n	800254c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	f003 0308 	and.w	r3, r3, #8
 800253a:	2b00      	cmp	r3, #0
 800253c:	d006      	beq.n	800254c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2208      	movs	r2, #8
 8002544:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 f8f5 	bl	8002736 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800254c:	6a3b      	ldr	r3, [r7, #32]
 800254e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d07b      	beq.n	800264e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	2b00      	cmp	r3, #0
 800255e:	d072      	beq.n	8002646 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002560:	6a3b      	ldr	r3, [r7, #32]
 8002562:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002566:	2b00      	cmp	r3, #0
 8002568:	d008      	beq.n	800257c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002570:	2b00      	cmp	r3, #0
 8002572:	d003      	beq.n	800257c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002576:	f043 0301 	orr.w	r3, r3, #1
 800257a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800257c:	6a3b      	ldr	r3, [r7, #32]
 800257e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002582:	2b00      	cmp	r3, #0
 8002584:	d008      	beq.n	8002598 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800258c:	2b00      	cmp	r3, #0
 800258e:	d003      	beq.n	8002598 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002592:	f043 0302 	orr.w	r3, r3, #2
 8002596:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002598:	6a3b      	ldr	r3, [r7, #32]
 800259a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d008      	beq.n	80025b4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d003      	beq.n	80025b4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80025ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ae:	f043 0304 	orr.w	r3, r3, #4
 80025b2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80025b4:	6a3b      	ldr	r3, [r7, #32]
 80025b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d043      	beq.n	8002646 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d03e      	beq.n	8002646 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80025ce:	2b60      	cmp	r3, #96	@ 0x60
 80025d0:	d02b      	beq.n	800262a <HAL_CAN_IRQHandler+0x32a>
 80025d2:	2b60      	cmp	r3, #96	@ 0x60
 80025d4:	d82e      	bhi.n	8002634 <HAL_CAN_IRQHandler+0x334>
 80025d6:	2b50      	cmp	r3, #80	@ 0x50
 80025d8:	d022      	beq.n	8002620 <HAL_CAN_IRQHandler+0x320>
 80025da:	2b50      	cmp	r3, #80	@ 0x50
 80025dc:	d82a      	bhi.n	8002634 <HAL_CAN_IRQHandler+0x334>
 80025de:	2b40      	cmp	r3, #64	@ 0x40
 80025e0:	d019      	beq.n	8002616 <HAL_CAN_IRQHandler+0x316>
 80025e2:	2b40      	cmp	r3, #64	@ 0x40
 80025e4:	d826      	bhi.n	8002634 <HAL_CAN_IRQHandler+0x334>
 80025e6:	2b30      	cmp	r3, #48	@ 0x30
 80025e8:	d010      	beq.n	800260c <HAL_CAN_IRQHandler+0x30c>
 80025ea:	2b30      	cmp	r3, #48	@ 0x30
 80025ec:	d822      	bhi.n	8002634 <HAL_CAN_IRQHandler+0x334>
 80025ee:	2b10      	cmp	r3, #16
 80025f0:	d002      	beq.n	80025f8 <HAL_CAN_IRQHandler+0x2f8>
 80025f2:	2b20      	cmp	r3, #32
 80025f4:	d005      	beq.n	8002602 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80025f6:	e01d      	b.n	8002634 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80025f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fa:	f043 0308 	orr.w	r3, r3, #8
 80025fe:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002600:	e019      	b.n	8002636 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002604:	f043 0310 	orr.w	r3, r3, #16
 8002608:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800260a:	e014      	b.n	8002636 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800260c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260e:	f043 0320 	orr.w	r3, r3, #32
 8002612:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002614:	e00f      	b.n	8002636 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002618:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800261c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800261e:	e00a      	b.n	8002636 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002622:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002626:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002628:	e005      	b.n	8002636 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800262a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002630:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002632:	e000      	b.n	8002636 <HAL_CAN_IRQHandler+0x336>
            break;
 8002634:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	699a      	ldr	r2, [r3, #24]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002644:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2204      	movs	r2, #4
 800264c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800264e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002650:	2b00      	cmp	r3, #0
 8002652:	d008      	beq.n	8002666 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265a:	431a      	orrs	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 f872 	bl	800274a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002666:	bf00      	nop
 8002668:	3728      	adds	r7, #40	@ 0x28
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800266e:	b480      	push	{r7}
 8002670:	b083      	sub	sp, #12
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr

08002682 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002682:	b480      	push	{r7}
 8002684:	b083      	sub	sp, #12
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800268a:	bf00      	nop
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr

08002696 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002696:	b480      	push	{r7}
 8002698:	b083      	sub	sp, #12
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800269e:	bf00      	nop
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr

080026aa <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80026aa:	b480      	push	{r7}
 80026ac:	b083      	sub	sp, #12
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr

080026be <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80026be:	b480      	push	{r7}
 80026c0:	b083      	sub	sp, #12
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80026c6:	bf00      	nop
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr

080026d2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b083      	sub	sp, #12
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80026e6:	b480      	push	{r7}
 80026e8:	b083      	sub	sp, #12
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b083      	sub	sp, #12
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800270e:	b480      	push	{r7}
 8002710:	b083      	sub	sp, #12
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002716:	bf00      	nop
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002722:	b480      	push	{r7}
 8002724:	b083      	sub	sp, #12
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800274a:	b480      	push	{r7}
 800274c:	b083      	sub	sp, #12
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
	...

08002760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002770:	4b0c      	ldr	r3, [pc, #48]	@ (80027a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002776:	68ba      	ldr	r2, [r7, #8]
 8002778:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800277c:	4013      	ands	r3, r2
 800277e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002788:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800278c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002792:	4a04      	ldr	r2, [pc, #16]	@ (80027a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	60d3      	str	r3, [r2, #12]
}
 8002798:	bf00      	nop
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	e000ed00 	.word	0xe000ed00

080027a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027ac:	4b04      	ldr	r3, [pc, #16]	@ (80027c0 <__NVIC_GetPriorityGrouping+0x18>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	0a1b      	lsrs	r3, r3, #8
 80027b2:	f003 0307 	and.w	r3, r3, #7
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	e000ed00 	.word	0xe000ed00

080027c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	6039      	str	r1, [r7, #0]
 80027ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	db0a      	blt.n	80027ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	490c      	ldr	r1, [pc, #48]	@ (8002810 <__NVIC_SetPriority+0x4c>)
 80027de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e2:	0112      	lsls	r2, r2, #4
 80027e4:	b2d2      	uxtb	r2, r2
 80027e6:	440b      	add	r3, r1
 80027e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027ec:	e00a      	b.n	8002804 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	4908      	ldr	r1, [pc, #32]	@ (8002814 <__NVIC_SetPriority+0x50>)
 80027f4:	79fb      	ldrb	r3, [r7, #7]
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	3b04      	subs	r3, #4
 80027fc:	0112      	lsls	r2, r2, #4
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	440b      	add	r3, r1
 8002802:	761a      	strb	r2, [r3, #24]
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	e000e100 	.word	0xe000e100
 8002814:	e000ed00 	.word	0xe000ed00

08002818 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002818:	b480      	push	{r7}
 800281a:	b089      	sub	sp, #36	@ 0x24
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f003 0307 	and.w	r3, r3, #7
 800282a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	f1c3 0307 	rsb	r3, r3, #7
 8002832:	2b04      	cmp	r3, #4
 8002834:	bf28      	it	cs
 8002836:	2304      	movcs	r3, #4
 8002838:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	3304      	adds	r3, #4
 800283e:	2b06      	cmp	r3, #6
 8002840:	d902      	bls.n	8002848 <NVIC_EncodePriority+0x30>
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	3b03      	subs	r3, #3
 8002846:	e000      	b.n	800284a <NVIC_EncodePriority+0x32>
 8002848:	2300      	movs	r3, #0
 800284a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800284c:	f04f 32ff 	mov.w	r2, #4294967295
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	43da      	mvns	r2, r3
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	401a      	ands	r2, r3
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002860:	f04f 31ff 	mov.w	r1, #4294967295
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	fa01 f303 	lsl.w	r3, r1, r3
 800286a:	43d9      	mvns	r1, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002870:	4313      	orrs	r3, r2
         );
}
 8002872:	4618      	mov	r0, r3
 8002874:	3724      	adds	r7, #36	@ 0x24
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
	...

08002880 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	3b01      	subs	r3, #1
 800288c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002890:	d301      	bcc.n	8002896 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002892:	2301      	movs	r3, #1
 8002894:	e00f      	b.n	80028b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002896:	4a0a      	ldr	r2, [pc, #40]	@ (80028c0 <SysTick_Config+0x40>)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3b01      	subs	r3, #1
 800289c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800289e:	210f      	movs	r1, #15
 80028a0:	f04f 30ff 	mov.w	r0, #4294967295
 80028a4:	f7ff ff8e 	bl	80027c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028a8:	4b05      	ldr	r3, [pc, #20]	@ (80028c0 <SysTick_Config+0x40>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ae:	4b04      	ldr	r3, [pc, #16]	@ (80028c0 <SysTick_Config+0x40>)
 80028b0:	2207      	movs	r2, #7
 80028b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	e000e010 	.word	0xe000e010

080028c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f7ff ff47 	bl	8002760 <__NVIC_SetPriorityGrouping>
}
 80028d2:	bf00      	nop
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b086      	sub	sp, #24
 80028de:	af00      	add	r7, sp, #0
 80028e0:	4603      	mov	r3, r0
 80028e2:	60b9      	str	r1, [r7, #8]
 80028e4:	607a      	str	r2, [r7, #4]
 80028e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028ec:	f7ff ff5c 	bl	80027a8 <__NVIC_GetPriorityGrouping>
 80028f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	68b9      	ldr	r1, [r7, #8]
 80028f6:	6978      	ldr	r0, [r7, #20]
 80028f8:	f7ff ff8e 	bl	8002818 <NVIC_EncodePriority>
 80028fc:	4602      	mov	r2, r0
 80028fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002902:	4611      	mov	r1, r2
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff ff5d 	bl	80027c4 <__NVIC_SetPriority>
}
 800290a:	bf00      	nop
 800290c:	3718      	adds	r7, #24
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b082      	sub	sp, #8
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7ff ffb0 	bl	8002880 <SysTick_Config>
 8002920:	4603      	mov	r3, r0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
	...

0800292c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800292c:	b480      	push	{r7}
 800292e:	b087      	sub	sp, #28
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002936:	2300      	movs	r3, #0
 8002938:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800293a:	e160      	b.n	8002bfe <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	2101      	movs	r1, #1
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	fa01 f303 	lsl.w	r3, r1, r3
 8002948:	4013      	ands	r3, r2
 800294a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 8152 	beq.w	8002bf8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f003 0303 	and.w	r3, r3, #3
 800295c:	2b01      	cmp	r3, #1
 800295e:	d005      	beq.n	800296c <HAL_GPIO_Init+0x40>
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f003 0303 	and.w	r3, r3, #3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d130      	bne.n	80029ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	2203      	movs	r2, #3
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	43db      	mvns	r3, r3
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	4013      	ands	r3, r2
 8002982:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	68da      	ldr	r2, [r3, #12]
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	4313      	orrs	r3, r2
 8002994:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029a2:	2201      	movs	r2, #1
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	43db      	mvns	r3, r3
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	4013      	ands	r3, r2
 80029b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	091b      	lsrs	r3, r3, #4
 80029b8:	f003 0201 	and.w	r2, r3, #1
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f003 0303 	and.w	r3, r3, #3
 80029d6:	2b03      	cmp	r3, #3
 80029d8:	d017      	beq.n	8002a0a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	2203      	movs	r2, #3
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	43db      	mvns	r3, r3
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	4013      	ands	r3, r2
 80029f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	689a      	ldr	r2, [r3, #8]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f003 0303 	and.w	r3, r3, #3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d123      	bne.n	8002a5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	08da      	lsrs	r2, r3, #3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	3208      	adds	r2, #8
 8002a1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	220f      	movs	r2, #15
 8002a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a32:	43db      	mvns	r3, r3
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	4013      	ands	r3, r2
 8002a38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	691a      	ldr	r2, [r3, #16]
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	f003 0307 	and.w	r3, r3, #7
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	08da      	lsrs	r2, r3, #3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	3208      	adds	r2, #8
 8002a58:	6939      	ldr	r1, [r7, #16]
 8002a5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	2203      	movs	r2, #3
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	4013      	ands	r3, r2
 8002a74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f003 0203 	and.w	r2, r3, #3
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f000 80ac 	beq.w	8002bf8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aa0:	4b5e      	ldr	r3, [pc, #376]	@ (8002c1c <HAL_GPIO_Init+0x2f0>)
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	4a5d      	ldr	r2, [pc, #372]	@ (8002c1c <HAL_GPIO_Init+0x2f0>)
 8002aa6:	f043 0301 	orr.w	r3, r3, #1
 8002aaa:	6193      	str	r3, [r2, #24]
 8002aac:	4b5b      	ldr	r3, [pc, #364]	@ (8002c1c <HAL_GPIO_Init+0x2f0>)
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	60bb      	str	r3, [r7, #8]
 8002ab6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ab8:	4a59      	ldr	r2, [pc, #356]	@ (8002c20 <HAL_GPIO_Init+0x2f4>)
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	089b      	lsrs	r3, r3, #2
 8002abe:	3302      	adds	r3, #2
 8002ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	f003 0303 	and.w	r3, r3, #3
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	220f      	movs	r2, #15
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	43db      	mvns	r3, r3
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002ae2:	d025      	beq.n	8002b30 <HAL_GPIO_Init+0x204>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a4f      	ldr	r2, [pc, #316]	@ (8002c24 <HAL_GPIO_Init+0x2f8>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d01f      	beq.n	8002b2c <HAL_GPIO_Init+0x200>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a4e      	ldr	r2, [pc, #312]	@ (8002c28 <HAL_GPIO_Init+0x2fc>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d019      	beq.n	8002b28 <HAL_GPIO_Init+0x1fc>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a4d      	ldr	r2, [pc, #308]	@ (8002c2c <HAL_GPIO_Init+0x300>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d013      	beq.n	8002b24 <HAL_GPIO_Init+0x1f8>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4a4c      	ldr	r2, [pc, #304]	@ (8002c30 <HAL_GPIO_Init+0x304>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d00d      	beq.n	8002b20 <HAL_GPIO_Init+0x1f4>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a4b      	ldr	r2, [pc, #300]	@ (8002c34 <HAL_GPIO_Init+0x308>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d007      	beq.n	8002b1c <HAL_GPIO_Init+0x1f0>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a4a      	ldr	r2, [pc, #296]	@ (8002c38 <HAL_GPIO_Init+0x30c>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d101      	bne.n	8002b18 <HAL_GPIO_Init+0x1ec>
 8002b14:	2306      	movs	r3, #6
 8002b16:	e00c      	b.n	8002b32 <HAL_GPIO_Init+0x206>
 8002b18:	2307      	movs	r3, #7
 8002b1a:	e00a      	b.n	8002b32 <HAL_GPIO_Init+0x206>
 8002b1c:	2305      	movs	r3, #5
 8002b1e:	e008      	b.n	8002b32 <HAL_GPIO_Init+0x206>
 8002b20:	2304      	movs	r3, #4
 8002b22:	e006      	b.n	8002b32 <HAL_GPIO_Init+0x206>
 8002b24:	2303      	movs	r3, #3
 8002b26:	e004      	b.n	8002b32 <HAL_GPIO_Init+0x206>
 8002b28:	2302      	movs	r3, #2
 8002b2a:	e002      	b.n	8002b32 <HAL_GPIO_Init+0x206>
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e000      	b.n	8002b32 <HAL_GPIO_Init+0x206>
 8002b30:	2300      	movs	r3, #0
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	f002 0203 	and.w	r2, r2, #3
 8002b38:	0092      	lsls	r2, r2, #2
 8002b3a:	4093      	lsls	r3, r2
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b42:	4937      	ldr	r1, [pc, #220]	@ (8002c20 <HAL_GPIO_Init+0x2f4>)
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	089b      	lsrs	r3, r3, #2
 8002b48:	3302      	adds	r3, #2
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b50:	4b3a      	ldr	r3, [pc, #232]	@ (8002c3c <HAL_GPIO_Init+0x310>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d003      	beq.n	8002b74 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002b74:	4a31      	ldr	r2, [pc, #196]	@ (8002c3c <HAL_GPIO_Init+0x310>)
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b7a:	4b30      	ldr	r3, [pc, #192]	@ (8002c3c <HAL_GPIO_Init+0x310>)
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	43db      	mvns	r3, r3
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	4013      	ands	r3, r2
 8002b88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002b9e:	4a27      	ldr	r2, [pc, #156]	@ (8002c3c <HAL_GPIO_Init+0x310>)
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ba4:	4b25      	ldr	r3, [pc, #148]	@ (8002c3c <HAL_GPIO_Init+0x310>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	43db      	mvns	r3, r3
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d003      	beq.n	8002bc8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002bc8:	4a1c      	ldr	r2, [pc, #112]	@ (8002c3c <HAL_GPIO_Init+0x310>)
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bce:	4b1b      	ldr	r3, [pc, #108]	@ (8002c3c <HAL_GPIO_Init+0x310>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	43db      	mvns	r3, r3
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002bf2:	4a12      	ldr	r2, [pc, #72]	@ (8002c3c <HAL_GPIO_Init+0x310>)
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	fa22 f303 	lsr.w	r3, r2, r3
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f47f ae97 	bne.w	800293c <HAL_GPIO_Init+0x10>
  }
}
 8002c0e:	bf00      	nop
 8002c10:	bf00      	nop
 8002c12:	371c      	adds	r7, #28
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	40010000 	.word	0x40010000
 8002c24:	48000400 	.word	0x48000400
 8002c28:	48000800 	.word	0x48000800
 8002c2c:	48000c00 	.word	0x48000c00
 8002c30:	48001000 	.word	0x48001000
 8002c34:	48001400 	.word	0x48001400
 8002c38:	48001800 	.word	0x48001800
 8002c3c:	40010400 	.word	0x40010400

08002c40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	460b      	mov	r3, r1
 8002c4a:	807b      	strh	r3, [r7, #2]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c50:	787b      	ldrb	r3, [r7, #1]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d003      	beq.n	8002c5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c56:	887a      	ldrh	r2, [r7, #2]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c5c:	e002      	b.n	8002c64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c5e:	887a      	ldrh	r2, [r7, #2]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c7c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c80:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c86:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d102      	bne.n	8002c96 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	f001 b83a 	b.w	8003d0a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c9a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f000 816f 	beq.w	8002f8a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002cac:	4bb5      	ldr	r3, [pc, #724]	@ (8002f84 <HAL_RCC_OscConfig+0x314>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f003 030c 	and.w	r3, r3, #12
 8002cb4:	2b04      	cmp	r3, #4
 8002cb6:	d00c      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002cb8:	4bb2      	ldr	r3, [pc, #712]	@ (8002f84 <HAL_RCC_OscConfig+0x314>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f003 030c 	and.w	r3, r3, #12
 8002cc0:	2b08      	cmp	r3, #8
 8002cc2:	d15c      	bne.n	8002d7e <HAL_RCC_OscConfig+0x10e>
 8002cc4:	4baf      	ldr	r3, [pc, #700]	@ (8002f84 <HAL_RCC_OscConfig+0x314>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002ccc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cd0:	d155      	bne.n	8002d7e <HAL_RCC_OscConfig+0x10e>
 8002cd2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002cd6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cda:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002cde:	fa93 f3a3 	rbit	r3, r3
 8002ce2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ce6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cea:	fab3 f383 	clz	r3, r3
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	095b      	lsrs	r3, r3, #5
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	f043 0301 	orr.w	r3, r3, #1
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d102      	bne.n	8002d04 <HAL_RCC_OscConfig+0x94>
 8002cfe:	4ba1      	ldr	r3, [pc, #644]	@ (8002f84 <HAL_RCC_OscConfig+0x314>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	e015      	b.n	8002d30 <HAL_RCC_OscConfig+0xc0>
 8002d04:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d08:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8002d10:	fa93 f3a3 	rbit	r3, r3
 8002d14:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8002d18:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d1c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002d20:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8002d24:	fa93 f3a3 	rbit	r3, r3
 8002d28:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002d2c:	4b95      	ldr	r3, [pc, #596]	@ (8002f84 <HAL_RCC_OscConfig+0x314>)
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d30:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002d34:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8002d38:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8002d3c:	fa92 f2a2 	rbit	r2, r2
 8002d40:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8002d44:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002d48:	fab2 f282 	clz	r2, r2
 8002d4c:	b2d2      	uxtb	r2, r2
 8002d4e:	f042 0220 	orr.w	r2, r2, #32
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	f002 021f 	and.w	r2, r2, #31
 8002d58:	2101      	movs	r1, #1
 8002d5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d5e:	4013      	ands	r3, r2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 8111 	beq.w	8002f88 <HAL_RCC_OscConfig+0x318>
 8002d66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d6a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f040 8108 	bne.w	8002f88 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	f000 bfc6 	b.w	8003d0a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d82:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d8e:	d106      	bne.n	8002d9e <HAL_RCC_OscConfig+0x12e>
 8002d90:	4b7c      	ldr	r3, [pc, #496]	@ (8002f84 <HAL_RCC_OscConfig+0x314>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a7b      	ldr	r2, [pc, #492]	@ (8002f84 <HAL_RCC_OscConfig+0x314>)
 8002d96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d9a:	6013      	str	r3, [r2, #0]
 8002d9c:	e036      	b.n	8002e0c <HAL_RCC_OscConfig+0x19c>
 8002d9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002da2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10c      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x158>
 8002dae:	4b75      	ldr	r3, [pc, #468]	@ (8002f84 <HAL_RCC_OscConfig+0x314>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a74      	ldr	r2, [pc, #464]	@ (8002f84 <HAL_RCC_OscConfig+0x314>)
 8002db4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002db8:	6013      	str	r3, [r2, #0]
 8002dba:	4b72      	ldr	r3, [pc, #456]	@ (8002f84 <HAL_RCC_OscConfig+0x314>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a71      	ldr	r2, [pc, #452]	@ (8002f84 <HAL_RCC_OscConfig+0x314>)
 8002dc0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002dc4:	6013      	str	r3, [r2, #0]
 8002dc6:	e021      	b.n	8002e0c <HAL_RCC_OscConfig+0x19c>
 8002dc8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dcc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002dd8:	d10c      	bne.n	8002df4 <HAL_RCC_OscConfig+0x184>
 8002dda:	4b6a      	ldr	r3, [pc, #424]	@ (8002f84 <HAL_RCC_OscConfig+0x314>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a69      	ldr	r2, [pc, #420]	@ (8002f84 <HAL_RCC_OscConfig+0x314>)
 8002de0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002de4:	6013      	str	r3, [r2, #0]
 8002de6:	4b67      	ldr	r3, [pc, #412]	@ (8002f84 <HAL_RCC_OscConfig+0x314>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a66      	ldr	r2, [pc, #408]	@ (8002f84 <HAL_RCC_OscConfig+0x314>)
 8002dec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002df0:	6013      	str	r3, [r2, #0]
 8002df2:	e00b      	b.n	8002e0c <HAL_RCC_OscConfig+0x19c>
 8002df4:	4b63      	ldr	r3, [pc, #396]	@ (8002f84 <HAL_RCC_OscConfig+0x314>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a62      	ldr	r2, [pc, #392]	@ (8002f84 <HAL_RCC_OscConfig+0x314>)
 8002dfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dfe:	6013      	str	r3, [r2, #0]
 8002e00:	4b60      	ldr	r3, [pc, #384]	@ (8002f84 <HAL_RCC_OscConfig+0x314>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a5f      	ldr	r2, [pc, #380]	@ (8002f84 <HAL_RCC_OscConfig+0x314>)
 8002e06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e0a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e10:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d059      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e1c:	f7ff f80e 	bl	8001e3c <HAL_GetTick>
 8002e20:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e24:	e00a      	b.n	8002e3c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e26:	f7ff f809 	bl	8001e3c <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b64      	cmp	r3, #100	@ 0x64
 8002e34:	d902      	bls.n	8002e3c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	f000 bf67 	b.w	8003d0a <HAL_RCC_OscConfig+0x109a>
 8002e3c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e40:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e44:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8002e48:	fa93 f3a3 	rbit	r3, r3
 8002e4c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8002e50:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e54:	fab3 f383 	clz	r3, r3
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	095b      	lsrs	r3, r3, #5
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	f043 0301 	orr.w	r3, r3, #1
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d102      	bne.n	8002e6e <HAL_RCC_OscConfig+0x1fe>
 8002e68:	4b46      	ldr	r3, [pc, #280]	@ (8002f84 <HAL_RCC_OscConfig+0x314>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	e015      	b.n	8002e9a <HAL_RCC_OscConfig+0x22a>
 8002e6e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e72:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e76:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8002e7a:	fa93 f3a3 	rbit	r3, r3
 8002e7e:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8002e82:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e86:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002e8a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8002e8e:	fa93 f3a3 	rbit	r3, r3
 8002e92:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002e96:	4b3b      	ldr	r3, [pc, #236]	@ (8002f84 <HAL_RCC_OscConfig+0x314>)
 8002e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002e9e:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8002ea2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8002ea6:	fa92 f2a2 	rbit	r2, r2
 8002eaa:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8002eae:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002eb2:	fab2 f282 	clz	r2, r2
 8002eb6:	b2d2      	uxtb	r2, r2
 8002eb8:	f042 0220 	orr.w	r2, r2, #32
 8002ebc:	b2d2      	uxtb	r2, r2
 8002ebe:	f002 021f 	and.w	r2, r2, #31
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec8:	4013      	ands	r3, r2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d0ab      	beq.n	8002e26 <HAL_RCC_OscConfig+0x1b6>
 8002ece:	e05c      	b.n	8002f8a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed0:	f7fe ffb4 	bl	8001e3c <HAL_GetTick>
 8002ed4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ed8:	e00a      	b.n	8002ef0 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002eda:	f7fe ffaf 	bl	8001e3c <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b64      	cmp	r3, #100	@ 0x64
 8002ee8:	d902      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	f000 bf0d 	b.w	8003d0a <HAL_RCC_OscConfig+0x109a>
 8002ef0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ef4:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002efc:	fa93 f3a3 	rbit	r3, r3
 8002f00:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8002f04:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f08:	fab3 f383 	clz	r3, r3
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	095b      	lsrs	r3, r3, #5
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	f043 0301 	orr.w	r3, r3, #1
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d102      	bne.n	8002f22 <HAL_RCC_OscConfig+0x2b2>
 8002f1c:	4b19      	ldr	r3, [pc, #100]	@ (8002f84 <HAL_RCC_OscConfig+0x314>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	e015      	b.n	8002f4e <HAL_RCC_OscConfig+0x2de>
 8002f22:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f26:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8002f2e:	fa93 f3a3 	rbit	r3, r3
 8002f32:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8002f36:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f3a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002f3e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002f42:	fa93 f3a3 	rbit	r3, r3
 8002f46:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8002f84 <HAL_RCC_OscConfig+0x314>)
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002f52:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8002f56:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8002f5a:	fa92 f2a2 	rbit	r2, r2
 8002f5e:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8002f62:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002f66:	fab2 f282 	clz	r2, r2
 8002f6a:	b2d2      	uxtb	r2, r2
 8002f6c:	f042 0220 	orr.w	r2, r2, #32
 8002f70:	b2d2      	uxtb	r2, r2
 8002f72:	f002 021f 	and.w	r2, r2, #31
 8002f76:	2101      	movs	r1, #1
 8002f78:	fa01 f202 	lsl.w	r2, r1, r2
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1ab      	bne.n	8002eda <HAL_RCC_OscConfig+0x26a>
 8002f82:	e002      	b.n	8002f8a <HAL_RCC_OscConfig+0x31a>
 8002f84:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f8e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f000 817f 	beq.w	800329e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002fa0:	4ba7      	ldr	r3, [pc, #668]	@ (8003240 <HAL_RCC_OscConfig+0x5d0>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f003 030c 	and.w	r3, r3, #12
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00c      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002fac:	4ba4      	ldr	r3, [pc, #656]	@ (8003240 <HAL_RCC_OscConfig+0x5d0>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f003 030c 	and.w	r3, r3, #12
 8002fb4:	2b08      	cmp	r3, #8
 8002fb6:	d173      	bne.n	80030a0 <HAL_RCC_OscConfig+0x430>
 8002fb8:	4ba1      	ldr	r3, [pc, #644]	@ (8003240 <HAL_RCC_OscConfig+0x5d0>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002fc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fc4:	d16c      	bne.n	80030a0 <HAL_RCC_OscConfig+0x430>
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fcc:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8002fd0:	fa93 f3a3 	rbit	r3, r3
 8002fd4:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8002fd8:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fdc:	fab3 f383 	clz	r3, r3
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	095b      	lsrs	r3, r3, #5
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	f043 0301 	orr.w	r3, r3, #1
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d102      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x386>
 8002ff0:	4b93      	ldr	r3, [pc, #588]	@ (8003240 <HAL_RCC_OscConfig+0x5d0>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	e013      	b.n	800301e <HAL_RCC_OscConfig+0x3ae>
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffc:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8003000:	fa93 f3a3 	rbit	r3, r3
 8003004:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8003008:	2302      	movs	r3, #2
 800300a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800300e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8003012:	fa93 f3a3 	rbit	r3, r3
 8003016:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800301a:	4b89      	ldr	r3, [pc, #548]	@ (8003240 <HAL_RCC_OscConfig+0x5d0>)
 800301c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800301e:	2202      	movs	r2, #2
 8003020:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8003024:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8003028:	fa92 f2a2 	rbit	r2, r2
 800302c:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8003030:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003034:	fab2 f282 	clz	r2, r2
 8003038:	b2d2      	uxtb	r2, r2
 800303a:	f042 0220 	orr.w	r2, r2, #32
 800303e:	b2d2      	uxtb	r2, r2
 8003040:	f002 021f 	and.w	r2, r2, #31
 8003044:	2101      	movs	r1, #1
 8003046:	fa01 f202 	lsl.w	r2, r1, r2
 800304a:	4013      	ands	r3, r2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00a      	beq.n	8003066 <HAL_RCC_OscConfig+0x3f6>
 8003050:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003054:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d002      	beq.n	8003066 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	f000 be52 	b.w	8003d0a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003066:	4b76      	ldr	r3, [pc, #472]	@ (8003240 <HAL_RCC_OscConfig+0x5d0>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800306e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003072:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	21f8      	movs	r1, #248	@ 0xf8
 800307c:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003080:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8003084:	fa91 f1a1 	rbit	r1, r1
 8003088:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 800308c:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003090:	fab1 f181 	clz	r1, r1
 8003094:	b2c9      	uxtb	r1, r1
 8003096:	408b      	lsls	r3, r1
 8003098:	4969      	ldr	r1, [pc, #420]	@ (8003240 <HAL_RCC_OscConfig+0x5d0>)
 800309a:	4313      	orrs	r3, r2
 800309c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800309e:	e0fe      	b.n	800329e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030a4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 8088 	beq.w	80031c2 <HAL_RCC_OscConfig+0x552>
 80030b2:	2301      	movs	r3, #1
 80030b4:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b8:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80030bc:	fa93 f3a3 	rbit	r3, r3
 80030c0:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 80030c4:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030c8:	fab3 f383 	clz	r3, r3
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80030d2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	461a      	mov	r2, r3
 80030da:	2301      	movs	r3, #1
 80030dc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030de:	f7fe fead 	bl	8001e3c <HAL_GetTick>
 80030e2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e6:	e00a      	b.n	80030fe <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030e8:	f7fe fea8 	bl	8001e3c <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d902      	bls.n	80030fe <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	f000 be06 	b.w	8003d0a <HAL_RCC_OscConfig+0x109a>
 80030fe:	2302      	movs	r3, #2
 8003100:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003104:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8003108:	fa93 f3a3 	rbit	r3, r3
 800310c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8003110:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003114:	fab3 f383 	clz	r3, r3
 8003118:	b2db      	uxtb	r3, r3
 800311a:	095b      	lsrs	r3, r3, #5
 800311c:	b2db      	uxtb	r3, r3
 800311e:	f043 0301 	orr.w	r3, r3, #1
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b01      	cmp	r3, #1
 8003126:	d102      	bne.n	800312e <HAL_RCC_OscConfig+0x4be>
 8003128:	4b45      	ldr	r3, [pc, #276]	@ (8003240 <HAL_RCC_OscConfig+0x5d0>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	e013      	b.n	8003156 <HAL_RCC_OscConfig+0x4e6>
 800312e:	2302      	movs	r3, #2
 8003130:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003134:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8003138:	fa93 f3a3 	rbit	r3, r3
 800313c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8003140:	2302      	movs	r3, #2
 8003142:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003146:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800314a:	fa93 f3a3 	rbit	r3, r3
 800314e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003152:	4b3b      	ldr	r3, [pc, #236]	@ (8003240 <HAL_RCC_OscConfig+0x5d0>)
 8003154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003156:	2202      	movs	r2, #2
 8003158:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 800315c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8003160:	fa92 f2a2 	rbit	r2, r2
 8003164:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8003168:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800316c:	fab2 f282 	clz	r2, r2
 8003170:	b2d2      	uxtb	r2, r2
 8003172:	f042 0220 	orr.w	r2, r2, #32
 8003176:	b2d2      	uxtb	r2, r2
 8003178:	f002 021f 	and.w	r2, r2, #31
 800317c:	2101      	movs	r1, #1
 800317e:	fa01 f202 	lsl.w	r2, r1, r2
 8003182:	4013      	ands	r3, r2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d0af      	beq.n	80030e8 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003188:	4b2d      	ldr	r3, [pc, #180]	@ (8003240 <HAL_RCC_OscConfig+0x5d0>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003190:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003194:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	21f8      	movs	r1, #248	@ 0xf8
 800319e:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a2:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80031a6:	fa91 f1a1 	rbit	r1, r1
 80031aa:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80031ae:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80031b2:	fab1 f181 	clz	r1, r1
 80031b6:	b2c9      	uxtb	r1, r1
 80031b8:	408b      	lsls	r3, r1
 80031ba:	4921      	ldr	r1, [pc, #132]	@ (8003240 <HAL_RCC_OscConfig+0x5d0>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	600b      	str	r3, [r1, #0]
 80031c0:	e06d      	b.n	800329e <HAL_RCC_OscConfig+0x62e>
 80031c2:	2301      	movs	r3, #1
 80031c4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80031cc:	fa93 f3a3 	rbit	r3, r3
 80031d0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80031d4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031d8:	fab3 f383 	clz	r3, r3
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80031e2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	461a      	mov	r2, r3
 80031ea:	2300      	movs	r3, #0
 80031ec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ee:	f7fe fe25 	bl	8001e3c <HAL_GetTick>
 80031f2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031f6:	e00a      	b.n	800320e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031f8:	f7fe fe20 	bl	8001e3c <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b02      	cmp	r3, #2
 8003206:	d902      	bls.n	800320e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	f000 bd7e 	b.w	8003d0a <HAL_RCC_OscConfig+0x109a>
 800320e:	2302      	movs	r3, #2
 8003210:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003214:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003218:	fa93 f3a3 	rbit	r3, r3
 800321c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8003220:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003224:	fab3 f383 	clz	r3, r3
 8003228:	b2db      	uxtb	r3, r3
 800322a:	095b      	lsrs	r3, r3, #5
 800322c:	b2db      	uxtb	r3, r3
 800322e:	f043 0301 	orr.w	r3, r3, #1
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2b01      	cmp	r3, #1
 8003236:	d105      	bne.n	8003244 <HAL_RCC_OscConfig+0x5d4>
 8003238:	4b01      	ldr	r3, [pc, #4]	@ (8003240 <HAL_RCC_OscConfig+0x5d0>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	e016      	b.n	800326c <HAL_RCC_OscConfig+0x5fc>
 800323e:	bf00      	nop
 8003240:	40021000 	.word	0x40021000
 8003244:	2302      	movs	r3, #2
 8003246:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800324e:	fa93 f3a3 	rbit	r3, r3
 8003252:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8003256:	2302      	movs	r3, #2
 8003258:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800325c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003260:	fa93 f3a3 	rbit	r3, r3
 8003264:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003268:	4bbf      	ldr	r3, [pc, #764]	@ (8003568 <HAL_RCC_OscConfig+0x8f8>)
 800326a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326c:	2202      	movs	r2, #2
 800326e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8003272:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8003276:	fa92 f2a2 	rbit	r2, r2
 800327a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 800327e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003282:	fab2 f282 	clz	r2, r2
 8003286:	b2d2      	uxtb	r2, r2
 8003288:	f042 0220 	orr.w	r2, r2, #32
 800328c:	b2d2      	uxtb	r2, r2
 800328e:	f002 021f 	and.w	r2, r2, #31
 8003292:	2101      	movs	r1, #1
 8003294:	fa01 f202 	lsl.w	r2, r1, r2
 8003298:	4013      	ands	r3, r2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1ac      	bne.n	80031f8 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800329e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032a2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0308 	and.w	r3, r3, #8
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f000 8113 	beq.w	80034da <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032b8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d07c      	beq.n	80033be <HAL_RCC_OscConfig+0x74e>
 80032c4:	2301      	movs	r3, #1
 80032c6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ce:	fa93 f3a3 	rbit	r3, r3
 80032d2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 80032d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032da:	fab3 f383 	clz	r3, r3
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	461a      	mov	r2, r3
 80032e2:	4ba2      	ldr	r3, [pc, #648]	@ (800356c <HAL_RCC_OscConfig+0x8fc>)
 80032e4:	4413      	add	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	461a      	mov	r2, r3
 80032ea:	2301      	movs	r3, #1
 80032ec:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ee:	f7fe fda5 	bl	8001e3c <HAL_GetTick>
 80032f2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032f6:	e00a      	b.n	800330e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032f8:	f7fe fda0 	bl	8001e3c <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d902      	bls.n	800330e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	f000 bcfe 	b.w	8003d0a <HAL_RCC_OscConfig+0x109a>
 800330e:	2302      	movs	r3, #2
 8003310:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003314:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003318:	fa93 f2a3 	rbit	r2, r3
 800331c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003320:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003324:	601a      	str	r2, [r3, #0]
 8003326:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800332a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800332e:	2202      	movs	r2, #2
 8003330:	601a      	str	r2, [r3, #0]
 8003332:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003336:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	fa93 f2a3 	rbit	r2, r3
 8003340:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003344:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003348:	601a      	str	r2, [r3, #0]
 800334a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800334e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003352:	2202      	movs	r2, #2
 8003354:	601a      	str	r2, [r3, #0]
 8003356:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800335a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	fa93 f2a3 	rbit	r2, r3
 8003364:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003368:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800336c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800336e:	4b7e      	ldr	r3, [pc, #504]	@ (8003568 <HAL_RCC_OscConfig+0x8f8>)
 8003370:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003372:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003376:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800337a:	2102      	movs	r1, #2
 800337c:	6019      	str	r1, [r3, #0]
 800337e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003382:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	fa93 f1a3 	rbit	r1, r3
 800338c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003390:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003394:	6019      	str	r1, [r3, #0]
  return result;
 8003396:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800339a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	fab3 f383 	clz	r3, r3
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	f003 031f 	and.w	r3, r3, #31
 80033b0:	2101      	movs	r1, #1
 80033b2:	fa01 f303 	lsl.w	r3, r1, r3
 80033b6:	4013      	ands	r3, r2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d09d      	beq.n	80032f8 <HAL_RCC_OscConfig+0x688>
 80033bc:	e08d      	b.n	80034da <HAL_RCC_OscConfig+0x86a>
 80033be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033c2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80033c6:	2201      	movs	r2, #1
 80033c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033ce:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	fa93 f2a3 	rbit	r2, r3
 80033d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033dc:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80033e0:	601a      	str	r2, [r3, #0]
  return result;
 80033e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033e6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80033ea:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033ec:	fab3 f383 	clz	r3, r3
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	461a      	mov	r2, r3
 80033f4:	4b5d      	ldr	r3, [pc, #372]	@ (800356c <HAL_RCC_OscConfig+0x8fc>)
 80033f6:	4413      	add	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	461a      	mov	r2, r3
 80033fc:	2300      	movs	r3, #0
 80033fe:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003400:	f7fe fd1c 	bl	8001e3c <HAL_GetTick>
 8003404:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003408:	e00a      	b.n	8003420 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800340a:	f7fe fd17 	bl	8001e3c <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d902      	bls.n	8003420 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	f000 bc75 	b.w	8003d0a <HAL_RCC_OscConfig+0x109a>
 8003420:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003424:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003428:	2202      	movs	r2, #2
 800342a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003430:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	fa93 f2a3 	rbit	r2, r3
 800343a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800343e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003448:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800344c:	2202      	movs	r2, #2
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003454:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	fa93 f2a3 	rbit	r2, r3
 800345e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003462:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800346c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003470:	2202      	movs	r2, #2
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003478:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	fa93 f2a3 	rbit	r2, r3
 8003482:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003486:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800348a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800348c:	4b36      	ldr	r3, [pc, #216]	@ (8003568 <HAL_RCC_OscConfig+0x8f8>)
 800348e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003490:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003494:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003498:	2102      	movs	r1, #2
 800349a:	6019      	str	r1, [r3, #0]
 800349c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034a0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	fa93 f1a3 	rbit	r1, r3
 80034aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034ae:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80034b2:	6019      	str	r1, [r3, #0]
  return result;
 80034b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034b8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	fab3 f383 	clz	r3, r3
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	f003 031f 	and.w	r3, r3, #31
 80034ce:	2101      	movs	r1, #1
 80034d0:	fa01 f303 	lsl.w	r3, r1, r3
 80034d4:	4013      	ands	r3, r2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d197      	bne.n	800340a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034de:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0304 	and.w	r3, r3, #4
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f000 81a5 	beq.w	800383a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034f0:	2300      	movs	r3, #0
 80034f2:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034f6:	4b1c      	ldr	r3, [pc, #112]	@ (8003568 <HAL_RCC_OscConfig+0x8f8>)
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d116      	bne.n	8003530 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003502:	4b19      	ldr	r3, [pc, #100]	@ (8003568 <HAL_RCC_OscConfig+0x8f8>)
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	4a18      	ldr	r2, [pc, #96]	@ (8003568 <HAL_RCC_OscConfig+0x8f8>)
 8003508:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800350c:	61d3      	str	r3, [r2, #28]
 800350e:	4b16      	ldr	r3, [pc, #88]	@ (8003568 <HAL_RCC_OscConfig+0x8f8>)
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003516:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800351a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003524:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003528:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800352a:	2301      	movs	r3, #1
 800352c:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003530:	4b0f      	ldr	r3, [pc, #60]	@ (8003570 <HAL_RCC_OscConfig+0x900>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003538:	2b00      	cmp	r3, #0
 800353a:	d121      	bne.n	8003580 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800353c:	4b0c      	ldr	r3, [pc, #48]	@ (8003570 <HAL_RCC_OscConfig+0x900>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a0b      	ldr	r2, [pc, #44]	@ (8003570 <HAL_RCC_OscConfig+0x900>)
 8003542:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003546:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003548:	f7fe fc78 	bl	8001e3c <HAL_GetTick>
 800354c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003550:	e010      	b.n	8003574 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003552:	f7fe fc73 	bl	8001e3c <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b64      	cmp	r3, #100	@ 0x64
 8003560:	d908      	bls.n	8003574 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e3d1      	b.n	8003d0a <HAL_RCC_OscConfig+0x109a>
 8003566:	bf00      	nop
 8003568:	40021000 	.word	0x40021000
 800356c:	10908120 	.word	0x10908120
 8003570:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003574:	4b8d      	ldr	r3, [pc, #564]	@ (80037ac <HAL_RCC_OscConfig+0xb3c>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0e8      	beq.n	8003552 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003580:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003584:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	2b01      	cmp	r3, #1
 800358e:	d106      	bne.n	800359e <HAL_RCC_OscConfig+0x92e>
 8003590:	4b87      	ldr	r3, [pc, #540]	@ (80037b0 <HAL_RCC_OscConfig+0xb40>)
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	4a86      	ldr	r2, [pc, #536]	@ (80037b0 <HAL_RCC_OscConfig+0xb40>)
 8003596:	f043 0301 	orr.w	r3, r3, #1
 800359a:	6213      	str	r3, [r2, #32]
 800359c:	e035      	b.n	800360a <HAL_RCC_OscConfig+0x99a>
 800359e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035a2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10c      	bne.n	80035c8 <HAL_RCC_OscConfig+0x958>
 80035ae:	4b80      	ldr	r3, [pc, #512]	@ (80037b0 <HAL_RCC_OscConfig+0xb40>)
 80035b0:	6a1b      	ldr	r3, [r3, #32]
 80035b2:	4a7f      	ldr	r2, [pc, #508]	@ (80037b0 <HAL_RCC_OscConfig+0xb40>)
 80035b4:	f023 0301 	bic.w	r3, r3, #1
 80035b8:	6213      	str	r3, [r2, #32]
 80035ba:	4b7d      	ldr	r3, [pc, #500]	@ (80037b0 <HAL_RCC_OscConfig+0xb40>)
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	4a7c      	ldr	r2, [pc, #496]	@ (80037b0 <HAL_RCC_OscConfig+0xb40>)
 80035c0:	f023 0304 	bic.w	r3, r3, #4
 80035c4:	6213      	str	r3, [r2, #32]
 80035c6:	e020      	b.n	800360a <HAL_RCC_OscConfig+0x99a>
 80035c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035cc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	2b05      	cmp	r3, #5
 80035d6:	d10c      	bne.n	80035f2 <HAL_RCC_OscConfig+0x982>
 80035d8:	4b75      	ldr	r3, [pc, #468]	@ (80037b0 <HAL_RCC_OscConfig+0xb40>)
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	4a74      	ldr	r2, [pc, #464]	@ (80037b0 <HAL_RCC_OscConfig+0xb40>)
 80035de:	f043 0304 	orr.w	r3, r3, #4
 80035e2:	6213      	str	r3, [r2, #32]
 80035e4:	4b72      	ldr	r3, [pc, #456]	@ (80037b0 <HAL_RCC_OscConfig+0xb40>)
 80035e6:	6a1b      	ldr	r3, [r3, #32]
 80035e8:	4a71      	ldr	r2, [pc, #452]	@ (80037b0 <HAL_RCC_OscConfig+0xb40>)
 80035ea:	f043 0301 	orr.w	r3, r3, #1
 80035ee:	6213      	str	r3, [r2, #32]
 80035f0:	e00b      	b.n	800360a <HAL_RCC_OscConfig+0x99a>
 80035f2:	4b6f      	ldr	r3, [pc, #444]	@ (80037b0 <HAL_RCC_OscConfig+0xb40>)
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	4a6e      	ldr	r2, [pc, #440]	@ (80037b0 <HAL_RCC_OscConfig+0xb40>)
 80035f8:	f023 0301 	bic.w	r3, r3, #1
 80035fc:	6213      	str	r3, [r2, #32]
 80035fe:	4b6c      	ldr	r3, [pc, #432]	@ (80037b0 <HAL_RCC_OscConfig+0xb40>)
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	4a6b      	ldr	r2, [pc, #428]	@ (80037b0 <HAL_RCC_OscConfig+0xb40>)
 8003604:	f023 0304 	bic.w	r3, r3, #4
 8003608:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800360a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800360e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	2b00      	cmp	r3, #0
 8003618:	f000 8081 	beq.w	800371e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800361c:	f7fe fc0e 	bl	8001e3c <HAL_GetTick>
 8003620:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003624:	e00b      	b.n	800363e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003626:	f7fe fc09 	bl	8001e3c <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003636:	4293      	cmp	r3, r2
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e365      	b.n	8003d0a <HAL_RCC_OscConfig+0x109a>
 800363e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003642:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003646:	2202      	movs	r2, #2
 8003648:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800364a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800364e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	fa93 f2a3 	rbit	r2, r3
 8003658:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800365c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003660:	601a      	str	r2, [r3, #0]
 8003662:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003666:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800366a:	2202      	movs	r2, #2
 800366c:	601a      	str	r2, [r3, #0]
 800366e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003672:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	fa93 f2a3 	rbit	r2, r3
 800367c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003680:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003684:	601a      	str	r2, [r3, #0]
  return result;
 8003686:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800368a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800368e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003690:	fab3 f383 	clz	r3, r3
 8003694:	b2db      	uxtb	r3, r3
 8003696:	095b      	lsrs	r3, r3, #5
 8003698:	b2db      	uxtb	r3, r3
 800369a:	f043 0302 	orr.w	r3, r3, #2
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d102      	bne.n	80036aa <HAL_RCC_OscConfig+0xa3a>
 80036a4:	4b42      	ldr	r3, [pc, #264]	@ (80037b0 <HAL_RCC_OscConfig+0xb40>)
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	e013      	b.n	80036d2 <HAL_RCC_OscConfig+0xa62>
 80036aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036ae:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80036b2:	2202      	movs	r2, #2
 80036b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036ba:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	fa93 f2a3 	rbit	r2, r3
 80036c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036c8:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80036cc:	601a      	str	r2, [r3, #0]
 80036ce:	4b38      	ldr	r3, [pc, #224]	@ (80037b0 <HAL_RCC_OscConfig+0xb40>)
 80036d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80036d6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80036da:	2102      	movs	r1, #2
 80036dc:	6011      	str	r1, [r2, #0]
 80036de:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80036e2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80036e6:	6812      	ldr	r2, [r2, #0]
 80036e8:	fa92 f1a2 	rbit	r1, r2
 80036ec:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80036f0:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80036f4:	6011      	str	r1, [r2, #0]
  return result;
 80036f6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80036fa:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80036fe:	6812      	ldr	r2, [r2, #0]
 8003700:	fab2 f282 	clz	r2, r2
 8003704:	b2d2      	uxtb	r2, r2
 8003706:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800370a:	b2d2      	uxtb	r2, r2
 800370c:	f002 021f 	and.w	r2, r2, #31
 8003710:	2101      	movs	r1, #1
 8003712:	fa01 f202 	lsl.w	r2, r1, r2
 8003716:	4013      	ands	r3, r2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d084      	beq.n	8003626 <HAL_RCC_OscConfig+0x9b6>
 800371c:	e083      	b.n	8003826 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800371e:	f7fe fb8d 	bl	8001e3c <HAL_GetTick>
 8003722:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003726:	e00b      	b.n	8003740 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003728:	f7fe fb88 	bl	8001e3c <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003738:	4293      	cmp	r3, r2
 800373a:	d901      	bls.n	8003740 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e2e4      	b.n	8003d0a <HAL_RCC_OscConfig+0x109a>
 8003740:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003744:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003748:	2202      	movs	r2, #2
 800374a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003750:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	fa93 f2a3 	rbit	r2, r3
 800375a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800375e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003768:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800376c:	2202      	movs	r2, #2
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003774:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	fa93 f2a3 	rbit	r2, r3
 800377e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003782:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003786:	601a      	str	r2, [r3, #0]
  return result;
 8003788:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800378c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003790:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003792:	fab3 f383 	clz	r3, r3
 8003796:	b2db      	uxtb	r3, r3
 8003798:	095b      	lsrs	r3, r3, #5
 800379a:	b2db      	uxtb	r3, r3
 800379c:	f043 0302 	orr.w	r3, r3, #2
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d106      	bne.n	80037b4 <HAL_RCC_OscConfig+0xb44>
 80037a6:	4b02      	ldr	r3, [pc, #8]	@ (80037b0 <HAL_RCC_OscConfig+0xb40>)
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	e017      	b.n	80037dc <HAL_RCC_OscConfig+0xb6c>
 80037ac:	40007000 	.word	0x40007000
 80037b0:	40021000 	.word	0x40021000
 80037b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037b8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80037bc:	2202      	movs	r2, #2
 80037be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037c4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	fa93 f2a3 	rbit	r2, r3
 80037ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037d2:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	4bb3      	ldr	r3, [pc, #716]	@ (8003aa8 <HAL_RCC_OscConfig+0xe38>)
 80037da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037dc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80037e0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80037e4:	2102      	movs	r1, #2
 80037e6:	6011      	str	r1, [r2, #0]
 80037e8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80037ec:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80037f0:	6812      	ldr	r2, [r2, #0]
 80037f2:	fa92 f1a2 	rbit	r1, r2
 80037f6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80037fa:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80037fe:	6011      	str	r1, [r2, #0]
  return result;
 8003800:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003804:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8003808:	6812      	ldr	r2, [r2, #0]
 800380a:	fab2 f282 	clz	r2, r2
 800380e:	b2d2      	uxtb	r2, r2
 8003810:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003814:	b2d2      	uxtb	r2, r2
 8003816:	f002 021f 	and.w	r2, r2, #31
 800381a:	2101      	movs	r1, #1
 800381c:	fa01 f202 	lsl.w	r2, r1, r2
 8003820:	4013      	ands	r3, r2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d180      	bne.n	8003728 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003826:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800382a:	2b01      	cmp	r3, #1
 800382c:	d105      	bne.n	800383a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800382e:	4b9e      	ldr	r3, [pc, #632]	@ (8003aa8 <HAL_RCC_OscConfig+0xe38>)
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	4a9d      	ldr	r2, [pc, #628]	@ (8003aa8 <HAL_RCC_OscConfig+0xe38>)
 8003834:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003838:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800383a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800383e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	2b00      	cmp	r3, #0
 8003848:	f000 825e 	beq.w	8003d08 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800384c:	4b96      	ldr	r3, [pc, #600]	@ (8003aa8 <HAL_RCC_OscConfig+0xe38>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f003 030c 	and.w	r3, r3, #12
 8003854:	2b08      	cmp	r3, #8
 8003856:	f000 821f 	beq.w	8003c98 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800385a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800385e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	2b02      	cmp	r3, #2
 8003868:	f040 8170 	bne.w	8003b4c <HAL_RCC_OscConfig+0xedc>
 800386c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003870:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003874:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003878:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800387e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	fa93 f2a3 	rbit	r2, r3
 8003888:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800388c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003890:	601a      	str	r2, [r3, #0]
  return result;
 8003892:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003896:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800389a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800389c:	fab3 f383 	clz	r3, r3
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80038a6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	461a      	mov	r2, r3
 80038ae:	2300      	movs	r3, #0
 80038b0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b2:	f7fe fac3 	bl	8001e3c <HAL_GetTick>
 80038b6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038ba:	e009      	b.n	80038d0 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038bc:	f7fe fabe 	bl	8001e3c <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d901      	bls.n	80038d0 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e21c      	b.n	8003d0a <HAL_RCC_OscConfig+0x109a>
 80038d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038d4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80038d8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80038dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038e2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	fa93 f2a3 	rbit	r2, r3
 80038ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038f0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80038f4:	601a      	str	r2, [r3, #0]
  return result;
 80038f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038fa:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80038fe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003900:	fab3 f383 	clz	r3, r3
 8003904:	b2db      	uxtb	r3, r3
 8003906:	095b      	lsrs	r3, r3, #5
 8003908:	b2db      	uxtb	r3, r3
 800390a:	f043 0301 	orr.w	r3, r3, #1
 800390e:	b2db      	uxtb	r3, r3
 8003910:	2b01      	cmp	r3, #1
 8003912:	d102      	bne.n	800391a <HAL_RCC_OscConfig+0xcaa>
 8003914:	4b64      	ldr	r3, [pc, #400]	@ (8003aa8 <HAL_RCC_OscConfig+0xe38>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	e027      	b.n	800396a <HAL_RCC_OscConfig+0xcfa>
 800391a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800391e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003922:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003926:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003928:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800392c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	fa93 f2a3 	rbit	r2, r3
 8003936:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800393a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800393e:	601a      	str	r2, [r3, #0]
 8003940:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003944:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003948:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800394c:	601a      	str	r2, [r3, #0]
 800394e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003952:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	fa93 f2a3 	rbit	r2, r3
 800395c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003960:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	4b50      	ldr	r3, [pc, #320]	@ (8003aa8 <HAL_RCC_OscConfig+0xe38>)
 8003968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800396e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003972:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003976:	6011      	str	r1, [r2, #0]
 8003978:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800397c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003980:	6812      	ldr	r2, [r2, #0]
 8003982:	fa92 f1a2 	rbit	r1, r2
 8003986:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800398a:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800398e:	6011      	str	r1, [r2, #0]
  return result;
 8003990:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003994:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003998:	6812      	ldr	r2, [r2, #0]
 800399a:	fab2 f282 	clz	r2, r2
 800399e:	b2d2      	uxtb	r2, r2
 80039a0:	f042 0220 	orr.w	r2, r2, #32
 80039a4:	b2d2      	uxtb	r2, r2
 80039a6:	f002 021f 	and.w	r2, r2, #31
 80039aa:	2101      	movs	r1, #1
 80039ac:	fa01 f202 	lsl.w	r2, r1, r2
 80039b0:	4013      	ands	r3, r2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d182      	bne.n	80038bc <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039b6:	4b3c      	ldr	r3, [pc, #240]	@ (8003aa8 <HAL_RCC_OscConfig+0xe38>)
 80039b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ba:	f023 020f 	bic.w	r2, r3, #15
 80039be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039c2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ca:	4937      	ldr	r1, [pc, #220]	@ (8003aa8 <HAL_RCC_OscConfig+0xe38>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80039d0:	4b35      	ldr	r3, [pc, #212]	@ (8003aa8 <HAL_RCC_OscConfig+0xe38>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 80039d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039dc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6a19      	ldr	r1, [r3, #32]
 80039e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039e8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	69db      	ldr	r3, [r3, #28]
 80039f0:	430b      	orrs	r3, r1
 80039f2:	492d      	ldr	r1, [pc, #180]	@ (8003aa8 <HAL_RCC_OscConfig+0xe38>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	604b      	str	r3, [r1, #4]
 80039f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039fc:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003a00:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003a04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a0a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	fa93 f2a3 	rbit	r2, r3
 8003a14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a18:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003a1c:	601a      	str	r2, [r3, #0]
  return result;
 8003a1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a22:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003a26:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a28:	fab3 f383 	clz	r3, r3
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003a32:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	461a      	mov	r2, r3
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a3e:	f7fe f9fd 	bl	8001e3c <HAL_GetTick>
 8003a42:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a46:	e009      	b.n	8003a5c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a48:	f7fe f9f8 	bl	8001e3c <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d901      	bls.n	8003a5c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e156      	b.n	8003d0a <HAL_RCC_OscConfig+0x109a>
 8003a5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a60:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003a64:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a6e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	fa93 f2a3 	rbit	r2, r3
 8003a78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a7c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003a80:	601a      	str	r2, [r3, #0]
  return result;
 8003a82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a86:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003a8a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a8c:	fab3 f383 	clz	r3, r3
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	095b      	lsrs	r3, r3, #5
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	f043 0301 	orr.w	r3, r3, #1
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d105      	bne.n	8003aac <HAL_RCC_OscConfig+0xe3c>
 8003aa0:	4b01      	ldr	r3, [pc, #4]	@ (8003aa8 <HAL_RCC_OscConfig+0xe38>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	e02a      	b.n	8003afc <HAL_RCC_OscConfig+0xe8c>
 8003aa6:	bf00      	nop
 8003aa8:	40021000 	.word	0x40021000
 8003aac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ab0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003ab4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ab8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003abe:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	fa93 f2a3 	rbit	r2, r3
 8003ac8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003acc:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003ad0:	601a      	str	r2, [r3, #0]
 8003ad2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ad6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003ada:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ade:	601a      	str	r2, [r3, #0]
 8003ae0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ae4:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	fa93 f2a3 	rbit	r2, r3
 8003aee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003af2:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8003af6:	601a      	str	r2, [r3, #0]
 8003af8:	4b86      	ldr	r3, [pc, #536]	@ (8003d14 <HAL_RCC_OscConfig+0x10a4>)
 8003afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003b00:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003b04:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003b08:	6011      	str	r1, [r2, #0]
 8003b0a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003b0e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003b12:	6812      	ldr	r2, [r2, #0]
 8003b14:	fa92 f1a2 	rbit	r1, r2
 8003b18:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003b1c:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8003b20:	6011      	str	r1, [r2, #0]
  return result;
 8003b22:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003b26:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8003b2a:	6812      	ldr	r2, [r2, #0]
 8003b2c:	fab2 f282 	clz	r2, r2
 8003b30:	b2d2      	uxtb	r2, r2
 8003b32:	f042 0220 	orr.w	r2, r2, #32
 8003b36:	b2d2      	uxtb	r2, r2
 8003b38:	f002 021f 	and.w	r2, r2, #31
 8003b3c:	2101      	movs	r1, #1
 8003b3e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b42:	4013      	ands	r3, r2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f43f af7f 	beq.w	8003a48 <HAL_RCC_OscConfig+0xdd8>
 8003b4a:	e0dd      	b.n	8003d08 <HAL_RCC_OscConfig+0x1098>
 8003b4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b50:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003b54:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003b58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b5e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	fa93 f2a3 	rbit	r2, r3
 8003b68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b6c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003b70:	601a      	str	r2, [r3, #0]
  return result;
 8003b72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b76:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003b7a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b7c:	fab3 f383 	clz	r3, r3
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003b86:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	2300      	movs	r3, #0
 8003b90:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b92:	f7fe f953 	bl	8001e3c <HAL_GetTick>
 8003b96:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b9a:	e009      	b.n	8003bb0 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b9c:	f7fe f94e 	bl	8001e3c <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d901      	bls.n	8003bb0 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e0ac      	b.n	8003d0a <HAL_RCC_OscConfig+0x109a>
 8003bb0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bb4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003bb8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003bbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bbe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bc2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	fa93 f2a3 	rbit	r2, r3
 8003bcc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bd0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003bd4:	601a      	str	r2, [r3, #0]
  return result;
 8003bd6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bda:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003bde:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003be0:	fab3 f383 	clz	r3, r3
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	095b      	lsrs	r3, r3, #5
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	f043 0301 	orr.w	r3, r3, #1
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d102      	bne.n	8003bfa <HAL_RCC_OscConfig+0xf8a>
 8003bf4:	4b47      	ldr	r3, [pc, #284]	@ (8003d14 <HAL_RCC_OscConfig+0x10a4>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	e027      	b.n	8003c4a <HAL_RCC_OscConfig+0xfda>
 8003bfa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bfe:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003c02:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c0c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	fa93 f2a3 	rbit	r2, r3
 8003c16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c1a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003c1e:	601a      	str	r2, [r3, #0]
 8003c20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c24:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003c28:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c2c:	601a      	str	r2, [r3, #0]
 8003c2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c32:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	fa93 f2a3 	rbit	r2, r3
 8003c3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c40:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8003c44:	601a      	str	r2, [r3, #0]
 8003c46:	4b33      	ldr	r3, [pc, #204]	@ (8003d14 <HAL_RCC_OscConfig+0x10a4>)
 8003c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c4a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003c4e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003c52:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003c56:	6011      	str	r1, [r2, #0]
 8003c58:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003c5c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003c60:	6812      	ldr	r2, [r2, #0]
 8003c62:	fa92 f1a2 	rbit	r1, r2
 8003c66:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003c6a:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003c6e:	6011      	str	r1, [r2, #0]
  return result;
 8003c70:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003c74:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003c78:	6812      	ldr	r2, [r2, #0]
 8003c7a:	fab2 f282 	clz	r2, r2
 8003c7e:	b2d2      	uxtb	r2, r2
 8003c80:	f042 0220 	orr.w	r2, r2, #32
 8003c84:	b2d2      	uxtb	r2, r2
 8003c86:	f002 021f 	and.w	r2, r2, #31
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c90:	4013      	ands	r3, r2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d182      	bne.n	8003b9c <HAL_RCC_OscConfig+0xf2c>
 8003c96:	e037      	b.n	8003d08 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c9c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d101      	bne.n	8003cac <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e02e      	b.n	8003d0a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003cac:	4b19      	ldr	r3, [pc, #100]	@ (8003d14 <HAL_RCC_OscConfig+0x10a4>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003cb4:	4b17      	ldr	r3, [pc, #92]	@ (8003d14 <HAL_RCC_OscConfig+0x10a4>)
 8003cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb8:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003cbc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003cc0:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8003cc4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cc8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	69db      	ldr	r3, [r3, #28]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d117      	bne.n	8003d04 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003cd4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003cd8:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003cdc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ce0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d10b      	bne.n	8003d04 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003cec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003cf0:	f003 020f 	and.w	r2, r3, #15
 8003cf4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cf8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d001      	beq.n	8003d08 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e000      	b.n	8003d0a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	40021000 	.word	0x40021000

08003d18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b09e      	sub	sp, #120	@ 0x78
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003d22:	2300      	movs	r3, #0
 8003d24:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d101      	bne.n	8003d30 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e162      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d30:	4b90      	ldr	r3, [pc, #576]	@ (8003f74 <HAL_RCC_ClockConfig+0x25c>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0307 	and.w	r3, r3, #7
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d910      	bls.n	8003d60 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d3e:	4b8d      	ldr	r3, [pc, #564]	@ (8003f74 <HAL_RCC_ClockConfig+0x25c>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f023 0207 	bic.w	r2, r3, #7
 8003d46:	498b      	ldr	r1, [pc, #556]	@ (8003f74 <HAL_RCC_ClockConfig+0x25c>)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d4e:	4b89      	ldr	r3, [pc, #548]	@ (8003f74 <HAL_RCC_ClockConfig+0x25c>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0307 	and.w	r3, r3, #7
 8003d56:	683a      	ldr	r2, [r7, #0]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d001      	beq.n	8003d60 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e14a      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d008      	beq.n	8003d7e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d6c:	4b82      	ldr	r3, [pc, #520]	@ (8003f78 <HAL_RCC_ClockConfig+0x260>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	497f      	ldr	r1, [pc, #508]	@ (8003f78 <HAL_RCC_ClockConfig+0x260>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f000 80dc 	beq.w	8003f44 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d13c      	bne.n	8003e0e <HAL_RCC_ClockConfig+0xf6>
 8003d94:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003d98:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d9c:	fa93 f3a3 	rbit	r3, r3
 8003da0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003da2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003da4:	fab3 f383 	clz	r3, r3
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	095b      	lsrs	r3, r3, #5
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	f043 0301 	orr.w	r3, r3, #1
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d102      	bne.n	8003dbe <HAL_RCC_ClockConfig+0xa6>
 8003db8:	4b6f      	ldr	r3, [pc, #444]	@ (8003f78 <HAL_RCC_ClockConfig+0x260>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	e00f      	b.n	8003dde <HAL_RCC_ClockConfig+0xc6>
 8003dbe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003dc2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003dc6:	fa93 f3a3 	rbit	r3, r3
 8003dca:	667b      	str	r3, [r7, #100]	@ 0x64
 8003dcc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003dd0:	663b      	str	r3, [r7, #96]	@ 0x60
 8003dd2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003dd4:	fa93 f3a3 	rbit	r3, r3
 8003dd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003dda:	4b67      	ldr	r3, [pc, #412]	@ (8003f78 <HAL_RCC_ClockConfig+0x260>)
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dde:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003de2:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003de4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003de6:	fa92 f2a2 	rbit	r2, r2
 8003dea:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003dec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003dee:	fab2 f282 	clz	r2, r2
 8003df2:	b2d2      	uxtb	r2, r2
 8003df4:	f042 0220 	orr.w	r2, r2, #32
 8003df8:	b2d2      	uxtb	r2, r2
 8003dfa:	f002 021f 	and.w	r2, r2, #31
 8003dfe:	2101      	movs	r1, #1
 8003e00:	fa01 f202 	lsl.w	r2, r1, r2
 8003e04:	4013      	ands	r3, r2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d17b      	bne.n	8003f02 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e0f3      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d13c      	bne.n	8003e90 <HAL_RCC_ClockConfig+0x178>
 8003e16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e1a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e1e:	fa93 f3a3 	rbit	r3, r3
 8003e22:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003e24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e26:	fab3 f383 	clz	r3, r3
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	095b      	lsrs	r3, r3, #5
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	f043 0301 	orr.w	r3, r3, #1
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d102      	bne.n	8003e40 <HAL_RCC_ClockConfig+0x128>
 8003e3a:	4b4f      	ldr	r3, [pc, #316]	@ (8003f78 <HAL_RCC_ClockConfig+0x260>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	e00f      	b.n	8003e60 <HAL_RCC_ClockConfig+0x148>
 8003e40:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e44:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e48:	fa93 f3a3 	rbit	r3, r3
 8003e4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e4e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e52:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e56:	fa93 f3a3 	rbit	r3, r3
 8003e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e5c:	4b46      	ldr	r3, [pc, #280]	@ (8003f78 <HAL_RCC_ClockConfig+0x260>)
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e60:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003e64:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003e66:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003e68:	fa92 f2a2 	rbit	r2, r2
 8003e6c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003e6e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003e70:	fab2 f282 	clz	r2, r2
 8003e74:	b2d2      	uxtb	r2, r2
 8003e76:	f042 0220 	orr.w	r2, r2, #32
 8003e7a:	b2d2      	uxtb	r2, r2
 8003e7c:	f002 021f 	and.w	r2, r2, #31
 8003e80:	2101      	movs	r1, #1
 8003e82:	fa01 f202 	lsl.w	r2, r1, r2
 8003e86:	4013      	ands	r3, r2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d13a      	bne.n	8003f02 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e0b2      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x2de>
 8003e90:	2302      	movs	r3, #2
 8003e92:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e96:	fa93 f3a3 	rbit	r3, r3
 8003e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e9e:	fab3 f383 	clz	r3, r3
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	095b      	lsrs	r3, r3, #5
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	f043 0301 	orr.w	r3, r3, #1
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d102      	bne.n	8003eb8 <HAL_RCC_ClockConfig+0x1a0>
 8003eb2:	4b31      	ldr	r3, [pc, #196]	@ (8003f78 <HAL_RCC_ClockConfig+0x260>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	e00d      	b.n	8003ed4 <HAL_RCC_ClockConfig+0x1bc>
 8003eb8:	2302      	movs	r3, #2
 8003eba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ebe:	fa93 f3a3 	rbit	r3, r3
 8003ec2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	623b      	str	r3, [r7, #32]
 8003ec8:	6a3b      	ldr	r3, [r7, #32]
 8003eca:	fa93 f3a3 	rbit	r3, r3
 8003ece:	61fb      	str	r3, [r7, #28]
 8003ed0:	4b29      	ldr	r3, [pc, #164]	@ (8003f78 <HAL_RCC_ClockConfig+0x260>)
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed4:	2202      	movs	r2, #2
 8003ed6:	61ba      	str	r2, [r7, #24]
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	fa92 f2a2 	rbit	r2, r2
 8003ede:	617a      	str	r2, [r7, #20]
  return result;
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	fab2 f282 	clz	r2, r2
 8003ee6:	b2d2      	uxtb	r2, r2
 8003ee8:	f042 0220 	orr.w	r2, r2, #32
 8003eec:	b2d2      	uxtb	r2, r2
 8003eee:	f002 021f 	and.w	r2, r2, #31
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ef8:	4013      	ands	r3, r2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d101      	bne.n	8003f02 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e079      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f02:	4b1d      	ldr	r3, [pc, #116]	@ (8003f78 <HAL_RCC_ClockConfig+0x260>)
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f023 0203 	bic.w	r2, r3, #3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	491a      	ldr	r1, [pc, #104]	@ (8003f78 <HAL_RCC_ClockConfig+0x260>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f14:	f7fd ff92 	bl	8001e3c <HAL_GetTick>
 8003f18:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f1a:	e00a      	b.n	8003f32 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f1c:	f7fd ff8e 	bl	8001e3c <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e061      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f32:	4b11      	ldr	r3, [pc, #68]	@ (8003f78 <HAL_RCC_ClockConfig+0x260>)
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f003 020c 	and.w	r2, r3, #12
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d1eb      	bne.n	8003f1c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f44:	4b0b      	ldr	r3, [pc, #44]	@ (8003f74 <HAL_RCC_ClockConfig+0x25c>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0307 	and.w	r3, r3, #7
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d214      	bcs.n	8003f7c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f52:	4b08      	ldr	r3, [pc, #32]	@ (8003f74 <HAL_RCC_ClockConfig+0x25c>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f023 0207 	bic.w	r2, r3, #7
 8003f5a:	4906      	ldr	r1, [pc, #24]	@ (8003f74 <HAL_RCC_ClockConfig+0x25c>)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f62:	4b04      	ldr	r3, [pc, #16]	@ (8003f74 <HAL_RCC_ClockConfig+0x25c>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0307 	and.w	r3, r3, #7
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d005      	beq.n	8003f7c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e040      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x2de>
 8003f74:	40022000 	.word	0x40022000
 8003f78:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0304 	and.w	r3, r3, #4
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d008      	beq.n	8003f9a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f88:	4b1d      	ldr	r3, [pc, #116]	@ (8004000 <HAL_RCC_ClockConfig+0x2e8>)
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	491a      	ldr	r1, [pc, #104]	@ (8004000 <HAL_RCC_ClockConfig+0x2e8>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0308 	and.w	r3, r3, #8
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d009      	beq.n	8003fba <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fa6:	4b16      	ldr	r3, [pc, #88]	@ (8004000 <HAL_RCC_ClockConfig+0x2e8>)
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	4912      	ldr	r1, [pc, #72]	@ (8004000 <HAL_RCC_ClockConfig+0x2e8>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003fba:	f000 f829 	bl	8004010 <HAL_RCC_GetSysClockFreq>
 8003fbe:	4601      	mov	r1, r0
 8003fc0:	4b0f      	ldr	r3, [pc, #60]	@ (8004000 <HAL_RCC_ClockConfig+0x2e8>)
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003fc8:	22f0      	movs	r2, #240	@ 0xf0
 8003fca:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	fa92 f2a2 	rbit	r2, r2
 8003fd2:	60fa      	str	r2, [r7, #12]
  return result;
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	fab2 f282 	clz	r2, r2
 8003fda:	b2d2      	uxtb	r2, r2
 8003fdc:	40d3      	lsrs	r3, r2
 8003fde:	4a09      	ldr	r2, [pc, #36]	@ (8004004 <HAL_RCC_ClockConfig+0x2ec>)
 8003fe0:	5cd3      	ldrb	r3, [r2, r3]
 8003fe2:	fa21 f303 	lsr.w	r3, r1, r3
 8003fe6:	4a08      	ldr	r2, [pc, #32]	@ (8004008 <HAL_RCC_ClockConfig+0x2f0>)
 8003fe8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003fea:	4b08      	ldr	r3, [pc, #32]	@ (800400c <HAL_RCC_ClockConfig+0x2f4>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7fd fee0 	bl	8001db4 <HAL_InitTick>
  
  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3778      	adds	r7, #120	@ 0x78
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	40021000 	.word	0x40021000
 8004004:	08007c68 	.word	0x08007c68
 8004008:	20000128 	.word	0x20000128
 800400c:	2000012c 	.word	0x2000012c

08004010 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004010:	b480      	push	{r7}
 8004012:	b08b      	sub	sp, #44	@ 0x2c
 8004014:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004016:	2300      	movs	r3, #0
 8004018:	61fb      	str	r3, [r7, #28]
 800401a:	2300      	movs	r3, #0
 800401c:	61bb      	str	r3, [r7, #24]
 800401e:	2300      	movs	r3, #0
 8004020:	627b      	str	r3, [r7, #36]	@ 0x24
 8004022:	2300      	movs	r3, #0
 8004024:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004026:	2300      	movs	r3, #0
 8004028:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800402a:	4b2a      	ldr	r3, [pc, #168]	@ (80040d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	f003 030c 	and.w	r3, r3, #12
 8004036:	2b04      	cmp	r3, #4
 8004038:	d002      	beq.n	8004040 <HAL_RCC_GetSysClockFreq+0x30>
 800403a:	2b08      	cmp	r3, #8
 800403c:	d003      	beq.n	8004046 <HAL_RCC_GetSysClockFreq+0x36>
 800403e:	e03f      	b.n	80040c0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004040:	4b25      	ldr	r3, [pc, #148]	@ (80040d8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004042:	623b      	str	r3, [r7, #32]
      break;
 8004044:	e03f      	b.n	80040c6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800404c:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8004050:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004052:	68ba      	ldr	r2, [r7, #8]
 8004054:	fa92 f2a2 	rbit	r2, r2
 8004058:	607a      	str	r2, [r7, #4]
  return result;
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	fab2 f282 	clz	r2, r2
 8004060:	b2d2      	uxtb	r2, r2
 8004062:	40d3      	lsrs	r3, r2
 8004064:	4a1d      	ldr	r2, [pc, #116]	@ (80040dc <HAL_RCC_GetSysClockFreq+0xcc>)
 8004066:	5cd3      	ldrb	r3, [r2, r3]
 8004068:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800406a:	4b1a      	ldr	r3, [pc, #104]	@ (80040d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800406c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800406e:	f003 030f 	and.w	r3, r3, #15
 8004072:	220f      	movs	r2, #15
 8004074:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	fa92 f2a2 	rbit	r2, r2
 800407c:	60fa      	str	r2, [r7, #12]
  return result;
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	fab2 f282 	clz	r2, r2
 8004084:	b2d2      	uxtb	r2, r2
 8004086:	40d3      	lsrs	r3, r2
 8004088:	4a15      	ldr	r2, [pc, #84]	@ (80040e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800408a:	5cd3      	ldrb	r3, [r2, r3]
 800408c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d008      	beq.n	80040aa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004098:	4a0f      	ldr	r2, [pc, #60]	@ (80040d8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	fbb2 f2f3 	udiv	r2, r2, r3
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	fb02 f303 	mul.w	r3, r2, r3
 80040a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80040a8:	e007      	b.n	80040ba <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80040aa:	4a0e      	ldr	r2, [pc, #56]	@ (80040e4 <HAL_RCC_GetSysClockFreq+0xd4>)
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	fb02 f303 	mul.w	r3, r2, r3
 80040b8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80040ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040bc:	623b      	str	r3, [r7, #32]
      break;
 80040be:	e002      	b.n	80040c6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80040c0:	4b08      	ldr	r3, [pc, #32]	@ (80040e4 <HAL_RCC_GetSysClockFreq+0xd4>)
 80040c2:	623b      	str	r3, [r7, #32]
      break;
 80040c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040c6:	6a3b      	ldr	r3, [r7, #32]
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	372c      	adds	r7, #44	@ 0x2c
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr
 80040d4:	40021000 	.word	0x40021000
 80040d8:	005b8d80 	.word	0x005b8d80
 80040dc:	08007c80 	.word	0x08007c80
 80040e0:	08007c90 	.word	0x08007c90
 80040e4:	007a1200 	.word	0x007a1200

080040e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040e8:	b480      	push	{r7}
 80040ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040ec:	4b03      	ldr	r3, [pc, #12]	@ (80040fc <HAL_RCC_GetHCLKFreq+0x14>)
 80040ee:	681b      	ldr	r3, [r3, #0]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	20000128 	.word	0x20000128

08004100 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004106:	f7ff ffef 	bl	80040e8 <HAL_RCC_GetHCLKFreq>
 800410a:	4601      	mov	r1, r0
 800410c:	4b0b      	ldr	r3, [pc, #44]	@ (800413c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004114:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004118:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	fa92 f2a2 	rbit	r2, r2
 8004120:	603a      	str	r2, [r7, #0]
  return result;
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	fab2 f282 	clz	r2, r2
 8004128:	b2d2      	uxtb	r2, r2
 800412a:	40d3      	lsrs	r3, r2
 800412c:	4a04      	ldr	r2, [pc, #16]	@ (8004140 <HAL_RCC_GetPCLK1Freq+0x40>)
 800412e:	5cd3      	ldrb	r3, [r2, r3]
 8004130:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004134:	4618      	mov	r0, r3
 8004136:	3708      	adds	r7, #8
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	40021000 	.word	0x40021000
 8004140:	08007c78 	.word	0x08007c78

08004144 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800414a:	f7ff ffcd 	bl	80040e8 <HAL_RCC_GetHCLKFreq>
 800414e:	4601      	mov	r1, r0
 8004150:	4b0b      	ldr	r3, [pc, #44]	@ (8004180 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8004158:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800415c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	fa92 f2a2 	rbit	r2, r2
 8004164:	603a      	str	r2, [r7, #0]
  return result;
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	fab2 f282 	clz	r2, r2
 800416c:	b2d2      	uxtb	r2, r2
 800416e:	40d3      	lsrs	r3, r2
 8004170:	4a04      	ldr	r2, [pc, #16]	@ (8004184 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004172:	5cd3      	ldrb	r3, [r2, r3]
 8004174:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004178:	4618      	mov	r0, r3
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	40021000 	.word	0x40021000
 8004184:	08007c78 	.word	0x08007c78

08004188 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b092      	sub	sp, #72	@ 0x48
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004190:	2300      	movs	r3, #0
 8004192:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8004194:	2300      	movs	r3, #0
 8004196:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004198:	2300      	movs	r3, #0
 800419a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f000 80d4 	beq.w	8004354 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041ac:	4b4e      	ldr	r3, [pc, #312]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ae:	69db      	ldr	r3, [r3, #28]
 80041b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d10e      	bne.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041b8:	4b4b      	ldr	r3, [pc, #300]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ba:	69db      	ldr	r3, [r3, #28]
 80041bc:	4a4a      	ldr	r2, [pc, #296]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041c2:	61d3      	str	r3, [r2, #28]
 80041c4:	4b48      	ldr	r3, [pc, #288]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041c6:	69db      	ldr	r3, [r3, #28]
 80041c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041cc:	60bb      	str	r3, [r7, #8]
 80041ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041d0:	2301      	movs	r3, #1
 80041d2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041d6:	4b45      	ldr	r3, [pc, #276]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d118      	bne.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041e2:	4b42      	ldr	r3, [pc, #264]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a41      	ldr	r2, [pc, #260]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041ec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041ee:	f7fd fe25 	bl	8001e3c <HAL_GetTick>
 80041f2:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041f4:	e008      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041f6:	f7fd fe21 	bl	8001e3c <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	2b64      	cmp	r3, #100	@ 0x64
 8004202:	d901      	bls.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e1d6      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004208:	4b38      	ldr	r3, [pc, #224]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004210:	2b00      	cmp	r3, #0
 8004212:	d0f0      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004214:	4b34      	ldr	r3, [pc, #208]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004216:	6a1b      	ldr	r3, [r3, #32]
 8004218:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800421c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800421e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 8084 	beq.w	800432e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800422e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004230:	429a      	cmp	r2, r3
 8004232:	d07c      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004234:	4b2c      	ldr	r3, [pc, #176]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800423c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800423e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004242:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004246:	fa93 f3a3 	rbit	r3, r3
 800424a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800424c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800424e:	fab3 f383 	clz	r3, r3
 8004252:	b2db      	uxtb	r3, r3
 8004254:	461a      	mov	r2, r3
 8004256:	4b26      	ldr	r3, [pc, #152]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004258:	4413      	add	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	461a      	mov	r2, r3
 800425e:	2301      	movs	r3, #1
 8004260:	6013      	str	r3, [r2, #0]
 8004262:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004266:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800426a:	fa93 f3a3 	rbit	r3, r3
 800426e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004272:	fab3 f383 	clz	r3, r3
 8004276:	b2db      	uxtb	r3, r3
 8004278:	461a      	mov	r2, r3
 800427a:	4b1d      	ldr	r3, [pc, #116]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800427c:	4413      	add	r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	461a      	mov	r2, r3
 8004282:	2300      	movs	r3, #0
 8004284:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004286:	4a18      	ldr	r2, [pc, #96]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004288:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800428a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800428c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	2b00      	cmp	r3, #0
 8004294:	d04b      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004296:	f7fd fdd1 	bl	8001e3c <HAL_GetTick>
 800429a:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800429c:	e00a      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800429e:	f7fd fdcd 	bl	8001e3c <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d901      	bls.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e180      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80042b4:	2302      	movs	r3, #2
 80042b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ba:	fa93 f3a3 	rbit	r3, r3
 80042be:	627b      	str	r3, [r7, #36]	@ 0x24
 80042c0:	2302      	movs	r3, #2
 80042c2:	623b      	str	r3, [r7, #32]
 80042c4:	6a3b      	ldr	r3, [r7, #32]
 80042c6:	fa93 f3a3 	rbit	r3, r3
 80042ca:	61fb      	str	r3, [r7, #28]
  return result;
 80042cc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ce:	fab3 f383 	clz	r3, r3
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	095b      	lsrs	r3, r3, #5
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	f043 0302 	orr.w	r3, r3, #2
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d108      	bne.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80042e2:	4b01      	ldr	r3, [pc, #4]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	e00d      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80042e8:	40021000 	.word	0x40021000
 80042ec:	40007000 	.word	0x40007000
 80042f0:	10908100 	.word	0x10908100
 80042f4:	2302      	movs	r3, #2
 80042f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	fa93 f3a3 	rbit	r3, r3
 80042fe:	617b      	str	r3, [r7, #20]
 8004300:	4b9a      	ldr	r3, [pc, #616]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004304:	2202      	movs	r2, #2
 8004306:	613a      	str	r2, [r7, #16]
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	fa92 f2a2 	rbit	r2, r2
 800430e:	60fa      	str	r2, [r7, #12]
  return result;
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	fab2 f282 	clz	r2, r2
 8004316:	b2d2      	uxtb	r2, r2
 8004318:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800431c:	b2d2      	uxtb	r2, r2
 800431e:	f002 021f 	and.w	r2, r2, #31
 8004322:	2101      	movs	r1, #1
 8004324:	fa01 f202 	lsl.w	r2, r1, r2
 8004328:	4013      	ands	r3, r2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d0b7      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800432e:	4b8f      	ldr	r3, [pc, #572]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	498c      	ldr	r1, [pc, #560]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800433c:	4313      	orrs	r3, r2
 800433e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004340:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004344:	2b01      	cmp	r3, #1
 8004346:	d105      	bne.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004348:	4b88      	ldr	r3, [pc, #544]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800434a:	69db      	ldr	r3, [r3, #28]
 800434c:	4a87      	ldr	r2, [pc, #540]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800434e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004352:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0301 	and.w	r3, r3, #1
 800435c:	2b00      	cmp	r3, #0
 800435e:	d008      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004360:	4b82      	ldr	r3, [pc, #520]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004364:	f023 0203 	bic.w	r2, r3, #3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	497f      	ldr	r1, [pc, #508]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800436e:	4313      	orrs	r3, r2
 8004370:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d008      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800437e:	4b7b      	ldr	r3, [pc, #492]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004382:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	4978      	ldr	r1, [pc, #480]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800438c:	4313      	orrs	r3, r2
 800438e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0304 	and.w	r3, r3, #4
 8004398:	2b00      	cmp	r3, #0
 800439a:	d008      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800439c:	4b73      	ldr	r3, [pc, #460]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800439e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043a0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	4970      	ldr	r1, [pc, #448]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0320 	and.w	r3, r3, #32
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d008      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043ba:	4b6c      	ldr	r3, [pc, #432]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043be:	f023 0210 	bic.w	r2, r3, #16
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	69db      	ldr	r3, [r3, #28]
 80043c6:	4969      	ldr	r1, [pc, #420]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d008      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80043d8:	4b64      	ldr	r3, [pc, #400]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043e4:	4961      	ldr	r1, [pc, #388]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d008      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043f6:	4b5d      	ldr	r3, [pc, #372]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043fa:	f023 0220 	bic.w	r2, r3, #32
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	495a      	ldr	r1, [pc, #360]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004404:	4313      	orrs	r3, r2
 8004406:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d008      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004414:	4b55      	ldr	r3, [pc, #340]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004418:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004420:	4952      	ldr	r1, [pc, #328]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004422:	4313      	orrs	r3, r2
 8004424:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0308 	and.w	r3, r3, #8
 800442e:	2b00      	cmp	r3, #0
 8004430:	d008      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004432:	4b4e      	ldr	r3, [pc, #312]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004436:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	494b      	ldr	r1, [pc, #300]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004440:	4313      	orrs	r3, r2
 8004442:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0310 	and.w	r3, r3, #16
 800444c:	2b00      	cmp	r3, #0
 800444e:	d008      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004450:	4b46      	ldr	r3, [pc, #280]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004454:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	4943      	ldr	r1, [pc, #268]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800445e:	4313      	orrs	r3, r2
 8004460:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800446a:	2b00      	cmp	r3, #0
 800446c:	d008      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800446e:	4b3f      	ldr	r3, [pc, #252]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800447a:	493c      	ldr	r1, [pc, #240]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800447c:	4313      	orrs	r3, r2
 800447e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004488:	2b00      	cmp	r3, #0
 800448a:	d008      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800448c:	4b37      	ldr	r3, [pc, #220]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800448e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004490:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004498:	4934      	ldr	r1, [pc, #208]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800449a:	4313      	orrs	r3, r2
 800449c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d008      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80044aa:	4b30      	ldr	r3, [pc, #192]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ae:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b6:	492d      	ldr	r1, [pc, #180]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d008      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80044c8:	4b28      	ldr	r3, [pc, #160]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044d4:	4925      	ldr	r1, [pc, #148]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d008      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80044e6:	4b21      	ldr	r3, [pc, #132]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ea:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f2:	491e      	ldr	r1, [pc, #120]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d008      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004504:	4b19      	ldr	r3, [pc, #100]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004508:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004510:	4916      	ldr	r1, [pc, #88]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004512:	4313      	orrs	r3, r2
 8004514:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d008      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004522:	4b12      	ldr	r3, [pc, #72]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004526:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800452e:	490f      	ldr	r1, [pc, #60]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004530:	4313      	orrs	r3, r2
 8004532:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d008      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004540:	4b0a      	ldr	r3, [pc, #40]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004544:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800454c:	4907      	ldr	r1, [pc, #28]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800454e:	4313      	orrs	r3, r2
 8004550:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00c      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800455e:	4b03      	ldr	r3, [pc, #12]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004562:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	e002      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800456a:	bf00      	nop
 800456c:	40021000 	.word	0x40021000
 8004570:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004572:	4913      	ldr	r1, [pc, #76]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004574:	4313      	orrs	r3, r2
 8004576:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d008      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004584:	4b0e      	ldr	r3, [pc, #56]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004588:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004590:	490b      	ldr	r1, [pc, #44]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004592:	4313      	orrs	r3, r2
 8004594:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d008      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80045a2:	4b07      	ldr	r3, [pc, #28]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80045a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045ae:	4904      	ldr	r1, [pc, #16]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3748      	adds	r7, #72	@ 0x48
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	40021000 	.word	0x40021000

080045c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e040      	b.n	8004658 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d106      	bne.n	80045ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f7fd fa50 	bl	8001a8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2224      	movs	r2, #36	@ 0x24
 80045f0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f022 0201 	bic.w	r2, r2, #1
 8004600:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f8b6 	bl	8004774 <UART_SetConfig>
 8004608:	4603      	mov	r3, r0
 800460a:	2b01      	cmp	r3, #1
 800460c:	d101      	bne.n	8004612 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e022      	b.n	8004658 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004616:	2b00      	cmp	r3, #0
 8004618:	d002      	beq.n	8004620 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 fa7e 	bl	8004b1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	685a      	ldr	r2, [r3, #4]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800462e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	689a      	ldr	r2, [r3, #8]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800463e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f042 0201 	orr.w	r2, r2, #1
 800464e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 fb05 	bl	8004c60 <UART_CheckIdleState>
 8004656:	4603      	mov	r3, r0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3708      	adds	r7, #8
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b08a      	sub	sp, #40	@ 0x28
 8004664:	af02      	add	r7, sp, #8
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	603b      	str	r3, [r7, #0]
 800466c:	4613      	mov	r3, r2
 800466e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004674:	2b20      	cmp	r3, #32
 8004676:	d177      	bne.n	8004768 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d002      	beq.n	8004684 <HAL_UART_Transmit+0x24>
 800467e:	88fb      	ldrh	r3, [r7, #6]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d101      	bne.n	8004688 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e070      	b.n	800476a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2221      	movs	r2, #33	@ 0x21
 8004694:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004696:	f7fd fbd1 	bl	8001e3c <HAL_GetTick>
 800469a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	88fa      	ldrh	r2, [r7, #6]
 80046a0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	88fa      	ldrh	r2, [r7, #6]
 80046a8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046b4:	d108      	bne.n	80046c8 <HAL_UART_Transmit+0x68>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d104      	bne.n	80046c8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80046be:	2300      	movs	r3, #0
 80046c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	61bb      	str	r3, [r7, #24]
 80046c6:	e003      	b.n	80046d0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046cc:	2300      	movs	r3, #0
 80046ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80046d0:	e02f      	b.n	8004732 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	9300      	str	r3, [sp, #0]
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	2200      	movs	r2, #0
 80046da:	2180      	movs	r1, #128	@ 0x80
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f000 fb67 	bl	8004db0 <UART_WaitOnFlagUntilTimeout>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d004      	beq.n	80046f2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2220      	movs	r2, #32
 80046ec:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e03b      	b.n	800476a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d10b      	bne.n	8004710 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	881a      	ldrh	r2, [r3, #0]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004704:	b292      	uxth	r2, r2
 8004706:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	3302      	adds	r3, #2
 800470c:	61bb      	str	r3, [r7, #24]
 800470e:	e007      	b.n	8004720 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	781a      	ldrb	r2, [r3, #0]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	3301      	adds	r3, #1
 800471e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004726:	b29b      	uxth	r3, r3
 8004728:	3b01      	subs	r3, #1
 800472a:	b29a      	uxth	r2, r3
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004738:	b29b      	uxth	r3, r3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1c9      	bne.n	80046d2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	2200      	movs	r2, #0
 8004746:	2140      	movs	r1, #64	@ 0x40
 8004748:	68f8      	ldr	r0, [r7, #12]
 800474a:	f000 fb31 	bl	8004db0 <UART_WaitOnFlagUntilTimeout>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d004      	beq.n	800475e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2220      	movs	r2, #32
 8004758:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e005      	b.n	800476a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2220      	movs	r2, #32
 8004762:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004764:	2300      	movs	r3, #0
 8004766:	e000      	b.n	800476a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004768:	2302      	movs	r3, #2
  }
}
 800476a:	4618      	mov	r0, r3
 800476c:	3720      	adds	r7, #32
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
	...

08004774 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b088      	sub	sp, #32
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800477c:	2300      	movs	r3, #0
 800477e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	431a      	orrs	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	431a      	orrs	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	69db      	ldr	r3, [r3, #28]
 8004794:	4313      	orrs	r3, r2
 8004796:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	4b92      	ldr	r3, [pc, #584]	@ (80049e8 <UART_SetConfig+0x274>)
 80047a0:	4013      	ands	r3, r2
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	6812      	ldr	r2, [r2, #0]
 80047a6:	6979      	ldr	r1, [r7, #20]
 80047a8:	430b      	orrs	r3, r1
 80047aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	68da      	ldr	r2, [r3, #12]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	430a      	orrs	r2, r1
 80047c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a1b      	ldr	r3, [r3, #32]
 80047cc:	697a      	ldr	r2, [r7, #20]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a80      	ldr	r2, [pc, #512]	@ (80049ec <UART_SetConfig+0x278>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d120      	bne.n	8004832 <UART_SetConfig+0xbe>
 80047f0:	4b7f      	ldr	r3, [pc, #508]	@ (80049f0 <UART_SetConfig+0x27c>)
 80047f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f4:	f003 0303 	and.w	r3, r3, #3
 80047f8:	2b03      	cmp	r3, #3
 80047fa:	d817      	bhi.n	800482c <UART_SetConfig+0xb8>
 80047fc:	a201      	add	r2, pc, #4	@ (adr r2, 8004804 <UART_SetConfig+0x90>)
 80047fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004802:	bf00      	nop
 8004804:	08004815 	.word	0x08004815
 8004808:	08004821 	.word	0x08004821
 800480c:	08004827 	.word	0x08004827
 8004810:	0800481b 	.word	0x0800481b
 8004814:	2301      	movs	r3, #1
 8004816:	77fb      	strb	r3, [r7, #31]
 8004818:	e0b5      	b.n	8004986 <UART_SetConfig+0x212>
 800481a:	2302      	movs	r3, #2
 800481c:	77fb      	strb	r3, [r7, #31]
 800481e:	e0b2      	b.n	8004986 <UART_SetConfig+0x212>
 8004820:	2304      	movs	r3, #4
 8004822:	77fb      	strb	r3, [r7, #31]
 8004824:	e0af      	b.n	8004986 <UART_SetConfig+0x212>
 8004826:	2308      	movs	r3, #8
 8004828:	77fb      	strb	r3, [r7, #31]
 800482a:	e0ac      	b.n	8004986 <UART_SetConfig+0x212>
 800482c:	2310      	movs	r3, #16
 800482e:	77fb      	strb	r3, [r7, #31]
 8004830:	e0a9      	b.n	8004986 <UART_SetConfig+0x212>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a6f      	ldr	r2, [pc, #444]	@ (80049f4 <UART_SetConfig+0x280>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d124      	bne.n	8004886 <UART_SetConfig+0x112>
 800483c:	4b6c      	ldr	r3, [pc, #432]	@ (80049f0 <UART_SetConfig+0x27c>)
 800483e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004840:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004844:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004848:	d011      	beq.n	800486e <UART_SetConfig+0xfa>
 800484a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800484e:	d817      	bhi.n	8004880 <UART_SetConfig+0x10c>
 8004850:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004854:	d011      	beq.n	800487a <UART_SetConfig+0x106>
 8004856:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800485a:	d811      	bhi.n	8004880 <UART_SetConfig+0x10c>
 800485c:	2b00      	cmp	r3, #0
 800485e:	d003      	beq.n	8004868 <UART_SetConfig+0xf4>
 8004860:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004864:	d006      	beq.n	8004874 <UART_SetConfig+0x100>
 8004866:	e00b      	b.n	8004880 <UART_SetConfig+0x10c>
 8004868:	2300      	movs	r3, #0
 800486a:	77fb      	strb	r3, [r7, #31]
 800486c:	e08b      	b.n	8004986 <UART_SetConfig+0x212>
 800486e:	2302      	movs	r3, #2
 8004870:	77fb      	strb	r3, [r7, #31]
 8004872:	e088      	b.n	8004986 <UART_SetConfig+0x212>
 8004874:	2304      	movs	r3, #4
 8004876:	77fb      	strb	r3, [r7, #31]
 8004878:	e085      	b.n	8004986 <UART_SetConfig+0x212>
 800487a:	2308      	movs	r3, #8
 800487c:	77fb      	strb	r3, [r7, #31]
 800487e:	e082      	b.n	8004986 <UART_SetConfig+0x212>
 8004880:	2310      	movs	r3, #16
 8004882:	77fb      	strb	r3, [r7, #31]
 8004884:	e07f      	b.n	8004986 <UART_SetConfig+0x212>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a5b      	ldr	r2, [pc, #364]	@ (80049f8 <UART_SetConfig+0x284>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d124      	bne.n	80048da <UART_SetConfig+0x166>
 8004890:	4b57      	ldr	r3, [pc, #348]	@ (80049f0 <UART_SetConfig+0x27c>)
 8004892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004894:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004898:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800489c:	d011      	beq.n	80048c2 <UART_SetConfig+0x14e>
 800489e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80048a2:	d817      	bhi.n	80048d4 <UART_SetConfig+0x160>
 80048a4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80048a8:	d011      	beq.n	80048ce <UART_SetConfig+0x15a>
 80048aa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80048ae:	d811      	bhi.n	80048d4 <UART_SetConfig+0x160>
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d003      	beq.n	80048bc <UART_SetConfig+0x148>
 80048b4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80048b8:	d006      	beq.n	80048c8 <UART_SetConfig+0x154>
 80048ba:	e00b      	b.n	80048d4 <UART_SetConfig+0x160>
 80048bc:	2300      	movs	r3, #0
 80048be:	77fb      	strb	r3, [r7, #31]
 80048c0:	e061      	b.n	8004986 <UART_SetConfig+0x212>
 80048c2:	2302      	movs	r3, #2
 80048c4:	77fb      	strb	r3, [r7, #31]
 80048c6:	e05e      	b.n	8004986 <UART_SetConfig+0x212>
 80048c8:	2304      	movs	r3, #4
 80048ca:	77fb      	strb	r3, [r7, #31]
 80048cc:	e05b      	b.n	8004986 <UART_SetConfig+0x212>
 80048ce:	2308      	movs	r3, #8
 80048d0:	77fb      	strb	r3, [r7, #31]
 80048d2:	e058      	b.n	8004986 <UART_SetConfig+0x212>
 80048d4:	2310      	movs	r3, #16
 80048d6:	77fb      	strb	r3, [r7, #31]
 80048d8:	e055      	b.n	8004986 <UART_SetConfig+0x212>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a47      	ldr	r2, [pc, #284]	@ (80049fc <UART_SetConfig+0x288>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d124      	bne.n	800492e <UART_SetConfig+0x1ba>
 80048e4:	4b42      	ldr	r3, [pc, #264]	@ (80049f0 <UART_SetConfig+0x27c>)
 80048e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048e8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80048ec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80048f0:	d011      	beq.n	8004916 <UART_SetConfig+0x1a2>
 80048f2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80048f6:	d817      	bhi.n	8004928 <UART_SetConfig+0x1b4>
 80048f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80048fc:	d011      	beq.n	8004922 <UART_SetConfig+0x1ae>
 80048fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004902:	d811      	bhi.n	8004928 <UART_SetConfig+0x1b4>
 8004904:	2b00      	cmp	r3, #0
 8004906:	d003      	beq.n	8004910 <UART_SetConfig+0x19c>
 8004908:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800490c:	d006      	beq.n	800491c <UART_SetConfig+0x1a8>
 800490e:	e00b      	b.n	8004928 <UART_SetConfig+0x1b4>
 8004910:	2300      	movs	r3, #0
 8004912:	77fb      	strb	r3, [r7, #31]
 8004914:	e037      	b.n	8004986 <UART_SetConfig+0x212>
 8004916:	2302      	movs	r3, #2
 8004918:	77fb      	strb	r3, [r7, #31]
 800491a:	e034      	b.n	8004986 <UART_SetConfig+0x212>
 800491c:	2304      	movs	r3, #4
 800491e:	77fb      	strb	r3, [r7, #31]
 8004920:	e031      	b.n	8004986 <UART_SetConfig+0x212>
 8004922:	2308      	movs	r3, #8
 8004924:	77fb      	strb	r3, [r7, #31]
 8004926:	e02e      	b.n	8004986 <UART_SetConfig+0x212>
 8004928:	2310      	movs	r3, #16
 800492a:	77fb      	strb	r3, [r7, #31]
 800492c:	e02b      	b.n	8004986 <UART_SetConfig+0x212>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a33      	ldr	r2, [pc, #204]	@ (8004a00 <UART_SetConfig+0x28c>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d124      	bne.n	8004982 <UART_SetConfig+0x20e>
 8004938:	4b2d      	ldr	r3, [pc, #180]	@ (80049f0 <UART_SetConfig+0x27c>)
 800493a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800493c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004940:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004944:	d011      	beq.n	800496a <UART_SetConfig+0x1f6>
 8004946:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800494a:	d817      	bhi.n	800497c <UART_SetConfig+0x208>
 800494c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004950:	d011      	beq.n	8004976 <UART_SetConfig+0x202>
 8004952:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004956:	d811      	bhi.n	800497c <UART_SetConfig+0x208>
 8004958:	2b00      	cmp	r3, #0
 800495a:	d003      	beq.n	8004964 <UART_SetConfig+0x1f0>
 800495c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004960:	d006      	beq.n	8004970 <UART_SetConfig+0x1fc>
 8004962:	e00b      	b.n	800497c <UART_SetConfig+0x208>
 8004964:	2300      	movs	r3, #0
 8004966:	77fb      	strb	r3, [r7, #31]
 8004968:	e00d      	b.n	8004986 <UART_SetConfig+0x212>
 800496a:	2302      	movs	r3, #2
 800496c:	77fb      	strb	r3, [r7, #31]
 800496e:	e00a      	b.n	8004986 <UART_SetConfig+0x212>
 8004970:	2304      	movs	r3, #4
 8004972:	77fb      	strb	r3, [r7, #31]
 8004974:	e007      	b.n	8004986 <UART_SetConfig+0x212>
 8004976:	2308      	movs	r3, #8
 8004978:	77fb      	strb	r3, [r7, #31]
 800497a:	e004      	b.n	8004986 <UART_SetConfig+0x212>
 800497c:	2310      	movs	r3, #16
 800497e:	77fb      	strb	r3, [r7, #31]
 8004980:	e001      	b.n	8004986 <UART_SetConfig+0x212>
 8004982:	2310      	movs	r3, #16
 8004984:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	69db      	ldr	r3, [r3, #28]
 800498a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800498e:	d16b      	bne.n	8004a68 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8004990:	7ffb      	ldrb	r3, [r7, #31]
 8004992:	2b08      	cmp	r3, #8
 8004994:	d838      	bhi.n	8004a08 <UART_SetConfig+0x294>
 8004996:	a201      	add	r2, pc, #4	@ (adr r2, 800499c <UART_SetConfig+0x228>)
 8004998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800499c:	080049c1 	.word	0x080049c1
 80049a0:	080049c9 	.word	0x080049c9
 80049a4:	080049d1 	.word	0x080049d1
 80049a8:	08004a09 	.word	0x08004a09
 80049ac:	080049d7 	.word	0x080049d7
 80049b0:	08004a09 	.word	0x08004a09
 80049b4:	08004a09 	.word	0x08004a09
 80049b8:	08004a09 	.word	0x08004a09
 80049bc:	080049df 	.word	0x080049df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049c0:	f7ff fb9e 	bl	8004100 <HAL_RCC_GetPCLK1Freq>
 80049c4:	61b8      	str	r0, [r7, #24]
        break;
 80049c6:	e024      	b.n	8004a12 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049c8:	f7ff fbbc 	bl	8004144 <HAL_RCC_GetPCLK2Freq>
 80049cc:	61b8      	str	r0, [r7, #24]
        break;
 80049ce:	e020      	b.n	8004a12 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004a04 <UART_SetConfig+0x290>)
 80049d2:	61bb      	str	r3, [r7, #24]
        break;
 80049d4:	e01d      	b.n	8004a12 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049d6:	f7ff fb1b 	bl	8004010 <HAL_RCC_GetSysClockFreq>
 80049da:	61b8      	str	r0, [r7, #24]
        break;
 80049dc:	e019      	b.n	8004a12 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049e2:	61bb      	str	r3, [r7, #24]
        break;
 80049e4:	e015      	b.n	8004a12 <UART_SetConfig+0x29e>
 80049e6:	bf00      	nop
 80049e8:	efff69f3 	.word	0xefff69f3
 80049ec:	40013800 	.word	0x40013800
 80049f0:	40021000 	.word	0x40021000
 80049f4:	40004400 	.word	0x40004400
 80049f8:	40004800 	.word	0x40004800
 80049fc:	40004c00 	.word	0x40004c00
 8004a00:	40005000 	.word	0x40005000
 8004a04:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	77bb      	strb	r3, [r7, #30]
        break;
 8004a10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d073      	beq.n	8004b00 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	005a      	lsls	r2, r3, #1
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	085b      	lsrs	r3, r3, #1
 8004a22:	441a      	add	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a2c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	2b0f      	cmp	r3, #15
 8004a32:	d916      	bls.n	8004a62 <UART_SetConfig+0x2ee>
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a3a:	d212      	bcs.n	8004a62 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	f023 030f 	bic.w	r3, r3, #15
 8004a44:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	085b      	lsrs	r3, r3, #1
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	f003 0307 	and.w	r3, r3, #7
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	89fb      	ldrh	r3, [r7, #14]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	89fa      	ldrh	r2, [r7, #14]
 8004a5e:	60da      	str	r2, [r3, #12]
 8004a60:	e04e      	b.n	8004b00 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	77bb      	strb	r3, [r7, #30]
 8004a66:	e04b      	b.n	8004b00 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a68:	7ffb      	ldrb	r3, [r7, #31]
 8004a6a:	2b08      	cmp	r3, #8
 8004a6c:	d827      	bhi.n	8004abe <UART_SetConfig+0x34a>
 8004a6e:	a201      	add	r2, pc, #4	@ (adr r2, 8004a74 <UART_SetConfig+0x300>)
 8004a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a74:	08004a99 	.word	0x08004a99
 8004a78:	08004aa1 	.word	0x08004aa1
 8004a7c:	08004aa9 	.word	0x08004aa9
 8004a80:	08004abf 	.word	0x08004abf
 8004a84:	08004aaf 	.word	0x08004aaf
 8004a88:	08004abf 	.word	0x08004abf
 8004a8c:	08004abf 	.word	0x08004abf
 8004a90:	08004abf 	.word	0x08004abf
 8004a94:	08004ab7 	.word	0x08004ab7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a98:	f7ff fb32 	bl	8004100 <HAL_RCC_GetPCLK1Freq>
 8004a9c:	61b8      	str	r0, [r7, #24]
        break;
 8004a9e:	e013      	b.n	8004ac8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004aa0:	f7ff fb50 	bl	8004144 <HAL_RCC_GetPCLK2Freq>
 8004aa4:	61b8      	str	r0, [r7, #24]
        break;
 8004aa6:	e00f      	b.n	8004ac8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8004b18 <UART_SetConfig+0x3a4>)
 8004aaa:	61bb      	str	r3, [r7, #24]
        break;
 8004aac:	e00c      	b.n	8004ac8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aae:	f7ff faaf 	bl	8004010 <HAL_RCC_GetSysClockFreq>
 8004ab2:	61b8      	str	r0, [r7, #24]
        break;
 8004ab4:	e008      	b.n	8004ac8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ab6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004aba:	61bb      	str	r3, [r7, #24]
        break;
 8004abc:	e004      	b.n	8004ac8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	77bb      	strb	r3, [r7, #30]
        break;
 8004ac6:	bf00      	nop
    }

    if (pclk != 0U)
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d018      	beq.n	8004b00 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	085a      	lsrs	r2, r3, #1
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	441a      	add	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	2b0f      	cmp	r3, #15
 8004ae6:	d909      	bls.n	8004afc <UART_SetConfig+0x388>
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004aee:	d205      	bcs.n	8004afc <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	60da      	str	r2, [r3, #12]
 8004afa:	e001      	b.n	8004b00 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004b0c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3720      	adds	r7, #32
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	007a1200 	.word	0x007a1200

08004b1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b28:	f003 0301 	and.w	r3, r3, #1
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00a      	beq.n	8004b46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	430a      	orrs	r2, r1
 8004b44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b4a:	f003 0302 	and.w	r3, r3, #2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00a      	beq.n	8004b68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	430a      	orrs	r2, r1
 8004b66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b6c:	f003 0304 	and.w	r3, r3, #4
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00a      	beq.n	8004b8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	430a      	orrs	r2, r1
 8004b88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b8e:	f003 0308 	and.w	r3, r3, #8
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00a      	beq.n	8004bac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb0:	f003 0310 	and.w	r3, r3, #16
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00a      	beq.n	8004bce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd2:	f003 0320 	and.w	r3, r3, #32
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00a      	beq.n	8004bf0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d01a      	beq.n	8004c32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c1a:	d10a      	bne.n	8004c32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00a      	beq.n	8004c54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	430a      	orrs	r2, r1
 8004c52:	605a      	str	r2, [r3, #4]
  }
}
 8004c54:	bf00      	nop
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b098      	sub	sp, #96	@ 0x60
 8004c64:	af02      	add	r7, sp, #8
 8004c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c70:	f7fd f8e4 	bl	8001e3c <HAL_GetTick>
 8004c74:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0308 	and.w	r3, r3, #8
 8004c80:	2b08      	cmp	r3, #8
 8004c82:	d12e      	bne.n	8004ce2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c84:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004c88:	9300      	str	r3, [sp, #0]
 8004c8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 f88c 	bl	8004db0 <UART_WaitOnFlagUntilTimeout>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d021      	beq.n	8004ce2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ca6:	e853 3f00 	ldrex	r3, [r3]
 8004caa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004cac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	461a      	mov	r2, r3
 8004cba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004cbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cbe:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004cc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004cc4:	e841 2300 	strex	r3, r2, [r1]
 8004cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004cca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1e6      	bne.n	8004c9e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2220      	movs	r2, #32
 8004cd4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e062      	b.n	8004da8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0304 	and.w	r3, r3, #4
 8004cec:	2b04      	cmp	r3, #4
 8004cee:	d149      	bne.n	8004d84 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cf0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004cf4:	9300      	str	r3, [sp, #0]
 8004cf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 f856 	bl	8004db0 <UART_WaitOnFlagUntilTimeout>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d03c      	beq.n	8004d84 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d12:	e853 3f00 	ldrex	r3, [r3]
 8004d16:	623b      	str	r3, [r7, #32]
   return(result);
 8004d18:	6a3b      	ldr	r3, [r7, #32]
 8004d1a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	461a      	mov	r2, r3
 8004d26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d28:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d30:	e841 2300 	strex	r3, r2, [r1]
 8004d34:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1e6      	bne.n	8004d0a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	3308      	adds	r3, #8
 8004d42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	e853 3f00 	ldrex	r3, [r3]
 8004d4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f023 0301 	bic.w	r3, r3, #1
 8004d52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	3308      	adds	r3, #8
 8004d5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d5c:	61fa      	str	r2, [r7, #28]
 8004d5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d60:	69b9      	ldr	r1, [r7, #24]
 8004d62:	69fa      	ldr	r2, [r7, #28]
 8004d64:	e841 2300 	strex	r3, r2, [r1]
 8004d68:	617b      	str	r3, [r7, #20]
   return(result);
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1e5      	bne.n	8004d3c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2220      	movs	r2, #32
 8004d74:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e011      	b.n	8004da8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2220      	movs	r2, #32
 8004d88:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2220      	movs	r2, #32
 8004d8e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3758      	adds	r7, #88	@ 0x58
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	603b      	str	r3, [r7, #0]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dc0:	e049      	b.n	8004e56 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc8:	d045      	beq.n	8004e56 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dca:	f7fd f837 	bl	8001e3c <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	69ba      	ldr	r2, [r7, #24]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d302      	bcc.n	8004de0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d101      	bne.n	8004de4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e048      	b.n	8004e76 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0304 	and.w	r3, r3, #4
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d031      	beq.n	8004e56 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	69db      	ldr	r3, [r3, #28]
 8004df8:	f003 0308 	and.w	r3, r3, #8
 8004dfc:	2b08      	cmp	r3, #8
 8004dfe:	d110      	bne.n	8004e22 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2208      	movs	r2, #8
 8004e06:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f000 f838 	bl	8004e7e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2208      	movs	r2, #8
 8004e12:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e029      	b.n	8004e76 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	69db      	ldr	r3, [r3, #28]
 8004e28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e30:	d111      	bne.n	8004e56 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004e3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	f000 f81e 	bl	8004e7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2220      	movs	r2, #32
 8004e46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e00f      	b.n	8004e76 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	69da      	ldr	r2, [r3, #28]
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	4013      	ands	r3, r2
 8004e60:	68ba      	ldr	r2, [r7, #8]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	bf0c      	ite	eq
 8004e66:	2301      	moveq	r3, #1
 8004e68:	2300      	movne	r3, #0
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	79fb      	ldrb	r3, [r7, #7]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d0a6      	beq.n	8004dc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3710      	adds	r7, #16
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}

08004e7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e7e:	b480      	push	{r7}
 8004e80:	b095      	sub	sp, #84	@ 0x54
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e8e:	e853 3f00 	ldrex	r3, [r3]
 8004e92:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e96:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ea4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ea6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004eaa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004eac:	e841 2300 	strex	r3, r2, [r1]
 8004eb0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1e6      	bne.n	8004e86 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	3308      	adds	r3, #8
 8004ebe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec0:	6a3b      	ldr	r3, [r7, #32]
 8004ec2:	e853 3f00 	ldrex	r3, [r3]
 8004ec6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	f023 0301 	bic.w	r3, r3, #1
 8004ece:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	3308      	adds	r3, #8
 8004ed6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ed8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004eda:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004edc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ede:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ee0:	e841 2300 	strex	r3, r2, [r1]
 8004ee4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1e5      	bne.n	8004eb8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d118      	bne.n	8004f26 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	e853 3f00 	ldrex	r3, [r3]
 8004f00:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	f023 0310 	bic.w	r3, r3, #16
 8004f08:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	461a      	mov	r2, r3
 8004f10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f12:	61bb      	str	r3, [r7, #24]
 8004f14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f16:	6979      	ldr	r1, [r7, #20]
 8004f18:	69ba      	ldr	r2, [r7, #24]
 8004f1a:	e841 2300 	strex	r3, r2, [r1]
 8004f1e:	613b      	str	r3, [r7, #16]
   return(result);
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1e6      	bne.n	8004ef4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2220      	movs	r2, #32
 8004f2a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004f3a:	bf00      	nop
 8004f3c:	3754      	adds	r7, #84	@ 0x54
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <__cvt>:
 8004f46:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f4a:	ec57 6b10 	vmov	r6, r7, d0
 8004f4e:	2f00      	cmp	r7, #0
 8004f50:	460c      	mov	r4, r1
 8004f52:	4619      	mov	r1, r3
 8004f54:	463b      	mov	r3, r7
 8004f56:	bfbb      	ittet	lt
 8004f58:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004f5c:	461f      	movlt	r7, r3
 8004f5e:	2300      	movge	r3, #0
 8004f60:	232d      	movlt	r3, #45	@ 0x2d
 8004f62:	700b      	strb	r3, [r1, #0]
 8004f64:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004f66:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004f6a:	4691      	mov	r9, r2
 8004f6c:	f023 0820 	bic.w	r8, r3, #32
 8004f70:	bfbc      	itt	lt
 8004f72:	4632      	movlt	r2, r6
 8004f74:	4616      	movlt	r6, r2
 8004f76:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004f7a:	d005      	beq.n	8004f88 <__cvt+0x42>
 8004f7c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004f80:	d100      	bne.n	8004f84 <__cvt+0x3e>
 8004f82:	3401      	adds	r4, #1
 8004f84:	2102      	movs	r1, #2
 8004f86:	e000      	b.n	8004f8a <__cvt+0x44>
 8004f88:	2103      	movs	r1, #3
 8004f8a:	ab03      	add	r3, sp, #12
 8004f8c:	9301      	str	r3, [sp, #4]
 8004f8e:	ab02      	add	r3, sp, #8
 8004f90:	9300      	str	r3, [sp, #0]
 8004f92:	ec47 6b10 	vmov	d0, r6, r7
 8004f96:	4653      	mov	r3, sl
 8004f98:	4622      	mov	r2, r4
 8004f9a:	f000 fe79 	bl	8005c90 <_dtoa_r>
 8004f9e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004fa2:	4605      	mov	r5, r0
 8004fa4:	d119      	bne.n	8004fda <__cvt+0x94>
 8004fa6:	f019 0f01 	tst.w	r9, #1
 8004faa:	d00e      	beq.n	8004fca <__cvt+0x84>
 8004fac:	eb00 0904 	add.w	r9, r0, r4
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	4630      	mov	r0, r6
 8004fb6:	4639      	mov	r1, r7
 8004fb8:	f7fb fd8e 	bl	8000ad8 <__aeabi_dcmpeq>
 8004fbc:	b108      	cbz	r0, 8004fc2 <__cvt+0x7c>
 8004fbe:	f8cd 900c 	str.w	r9, [sp, #12]
 8004fc2:	2230      	movs	r2, #48	@ 0x30
 8004fc4:	9b03      	ldr	r3, [sp, #12]
 8004fc6:	454b      	cmp	r3, r9
 8004fc8:	d31e      	bcc.n	8005008 <__cvt+0xc2>
 8004fca:	9b03      	ldr	r3, [sp, #12]
 8004fcc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004fce:	1b5b      	subs	r3, r3, r5
 8004fd0:	4628      	mov	r0, r5
 8004fd2:	6013      	str	r3, [r2, #0]
 8004fd4:	b004      	add	sp, #16
 8004fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fda:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004fde:	eb00 0904 	add.w	r9, r0, r4
 8004fe2:	d1e5      	bne.n	8004fb0 <__cvt+0x6a>
 8004fe4:	7803      	ldrb	r3, [r0, #0]
 8004fe6:	2b30      	cmp	r3, #48	@ 0x30
 8004fe8:	d10a      	bne.n	8005000 <__cvt+0xba>
 8004fea:	2200      	movs	r2, #0
 8004fec:	2300      	movs	r3, #0
 8004fee:	4630      	mov	r0, r6
 8004ff0:	4639      	mov	r1, r7
 8004ff2:	f7fb fd71 	bl	8000ad8 <__aeabi_dcmpeq>
 8004ff6:	b918      	cbnz	r0, 8005000 <__cvt+0xba>
 8004ff8:	f1c4 0401 	rsb	r4, r4, #1
 8004ffc:	f8ca 4000 	str.w	r4, [sl]
 8005000:	f8da 3000 	ldr.w	r3, [sl]
 8005004:	4499      	add	r9, r3
 8005006:	e7d3      	b.n	8004fb0 <__cvt+0x6a>
 8005008:	1c59      	adds	r1, r3, #1
 800500a:	9103      	str	r1, [sp, #12]
 800500c:	701a      	strb	r2, [r3, #0]
 800500e:	e7d9      	b.n	8004fc4 <__cvt+0x7e>

08005010 <__exponent>:
 8005010:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005012:	2900      	cmp	r1, #0
 8005014:	bfba      	itte	lt
 8005016:	4249      	neglt	r1, r1
 8005018:	232d      	movlt	r3, #45	@ 0x2d
 800501a:	232b      	movge	r3, #43	@ 0x2b
 800501c:	2909      	cmp	r1, #9
 800501e:	7002      	strb	r2, [r0, #0]
 8005020:	7043      	strb	r3, [r0, #1]
 8005022:	dd29      	ble.n	8005078 <__exponent+0x68>
 8005024:	f10d 0307 	add.w	r3, sp, #7
 8005028:	461d      	mov	r5, r3
 800502a:	270a      	movs	r7, #10
 800502c:	461a      	mov	r2, r3
 800502e:	fbb1 f6f7 	udiv	r6, r1, r7
 8005032:	fb07 1416 	mls	r4, r7, r6, r1
 8005036:	3430      	adds	r4, #48	@ 0x30
 8005038:	f802 4c01 	strb.w	r4, [r2, #-1]
 800503c:	460c      	mov	r4, r1
 800503e:	2c63      	cmp	r4, #99	@ 0x63
 8005040:	f103 33ff 	add.w	r3, r3, #4294967295
 8005044:	4631      	mov	r1, r6
 8005046:	dcf1      	bgt.n	800502c <__exponent+0x1c>
 8005048:	3130      	adds	r1, #48	@ 0x30
 800504a:	1e94      	subs	r4, r2, #2
 800504c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005050:	1c41      	adds	r1, r0, #1
 8005052:	4623      	mov	r3, r4
 8005054:	42ab      	cmp	r3, r5
 8005056:	d30a      	bcc.n	800506e <__exponent+0x5e>
 8005058:	f10d 0309 	add.w	r3, sp, #9
 800505c:	1a9b      	subs	r3, r3, r2
 800505e:	42ac      	cmp	r4, r5
 8005060:	bf88      	it	hi
 8005062:	2300      	movhi	r3, #0
 8005064:	3302      	adds	r3, #2
 8005066:	4403      	add	r3, r0
 8005068:	1a18      	subs	r0, r3, r0
 800506a:	b003      	add	sp, #12
 800506c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800506e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005072:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005076:	e7ed      	b.n	8005054 <__exponent+0x44>
 8005078:	2330      	movs	r3, #48	@ 0x30
 800507a:	3130      	adds	r1, #48	@ 0x30
 800507c:	7083      	strb	r3, [r0, #2]
 800507e:	70c1      	strb	r1, [r0, #3]
 8005080:	1d03      	adds	r3, r0, #4
 8005082:	e7f1      	b.n	8005068 <__exponent+0x58>

08005084 <_printf_float>:
 8005084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005088:	b08d      	sub	sp, #52	@ 0x34
 800508a:	460c      	mov	r4, r1
 800508c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005090:	4616      	mov	r6, r2
 8005092:	461f      	mov	r7, r3
 8005094:	4605      	mov	r5, r0
 8005096:	f000 fceb 	bl	8005a70 <_localeconv_r>
 800509a:	6803      	ldr	r3, [r0, #0]
 800509c:	9304      	str	r3, [sp, #16]
 800509e:	4618      	mov	r0, r3
 80050a0:	f7fb f8ee 	bl	8000280 <strlen>
 80050a4:	2300      	movs	r3, #0
 80050a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80050a8:	f8d8 3000 	ldr.w	r3, [r8]
 80050ac:	9005      	str	r0, [sp, #20]
 80050ae:	3307      	adds	r3, #7
 80050b0:	f023 0307 	bic.w	r3, r3, #7
 80050b4:	f103 0208 	add.w	r2, r3, #8
 80050b8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80050bc:	f8d4 b000 	ldr.w	fp, [r4]
 80050c0:	f8c8 2000 	str.w	r2, [r8]
 80050c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80050c8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80050cc:	9307      	str	r3, [sp, #28]
 80050ce:	f8cd 8018 	str.w	r8, [sp, #24]
 80050d2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80050d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80050da:	4b9c      	ldr	r3, [pc, #624]	@ (800534c <_printf_float+0x2c8>)
 80050dc:	f04f 32ff 	mov.w	r2, #4294967295
 80050e0:	f7fb fd2c 	bl	8000b3c <__aeabi_dcmpun>
 80050e4:	bb70      	cbnz	r0, 8005144 <_printf_float+0xc0>
 80050e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80050ea:	4b98      	ldr	r3, [pc, #608]	@ (800534c <_printf_float+0x2c8>)
 80050ec:	f04f 32ff 	mov.w	r2, #4294967295
 80050f0:	f7fb fd06 	bl	8000b00 <__aeabi_dcmple>
 80050f4:	bb30      	cbnz	r0, 8005144 <_printf_float+0xc0>
 80050f6:	2200      	movs	r2, #0
 80050f8:	2300      	movs	r3, #0
 80050fa:	4640      	mov	r0, r8
 80050fc:	4649      	mov	r1, r9
 80050fe:	f7fb fcf5 	bl	8000aec <__aeabi_dcmplt>
 8005102:	b110      	cbz	r0, 800510a <_printf_float+0x86>
 8005104:	232d      	movs	r3, #45	@ 0x2d
 8005106:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800510a:	4a91      	ldr	r2, [pc, #580]	@ (8005350 <_printf_float+0x2cc>)
 800510c:	4b91      	ldr	r3, [pc, #580]	@ (8005354 <_printf_float+0x2d0>)
 800510e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005112:	bf94      	ite	ls
 8005114:	4690      	movls	r8, r2
 8005116:	4698      	movhi	r8, r3
 8005118:	2303      	movs	r3, #3
 800511a:	6123      	str	r3, [r4, #16]
 800511c:	f02b 0304 	bic.w	r3, fp, #4
 8005120:	6023      	str	r3, [r4, #0]
 8005122:	f04f 0900 	mov.w	r9, #0
 8005126:	9700      	str	r7, [sp, #0]
 8005128:	4633      	mov	r3, r6
 800512a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800512c:	4621      	mov	r1, r4
 800512e:	4628      	mov	r0, r5
 8005130:	f000 f9d2 	bl	80054d8 <_printf_common>
 8005134:	3001      	adds	r0, #1
 8005136:	f040 808d 	bne.w	8005254 <_printf_float+0x1d0>
 800513a:	f04f 30ff 	mov.w	r0, #4294967295
 800513e:	b00d      	add	sp, #52	@ 0x34
 8005140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005144:	4642      	mov	r2, r8
 8005146:	464b      	mov	r3, r9
 8005148:	4640      	mov	r0, r8
 800514a:	4649      	mov	r1, r9
 800514c:	f7fb fcf6 	bl	8000b3c <__aeabi_dcmpun>
 8005150:	b140      	cbz	r0, 8005164 <_printf_float+0xe0>
 8005152:	464b      	mov	r3, r9
 8005154:	2b00      	cmp	r3, #0
 8005156:	bfbc      	itt	lt
 8005158:	232d      	movlt	r3, #45	@ 0x2d
 800515a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800515e:	4a7e      	ldr	r2, [pc, #504]	@ (8005358 <_printf_float+0x2d4>)
 8005160:	4b7e      	ldr	r3, [pc, #504]	@ (800535c <_printf_float+0x2d8>)
 8005162:	e7d4      	b.n	800510e <_printf_float+0x8a>
 8005164:	6863      	ldr	r3, [r4, #4]
 8005166:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800516a:	9206      	str	r2, [sp, #24]
 800516c:	1c5a      	adds	r2, r3, #1
 800516e:	d13b      	bne.n	80051e8 <_printf_float+0x164>
 8005170:	2306      	movs	r3, #6
 8005172:	6063      	str	r3, [r4, #4]
 8005174:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005178:	2300      	movs	r3, #0
 800517a:	6022      	str	r2, [r4, #0]
 800517c:	9303      	str	r3, [sp, #12]
 800517e:	ab0a      	add	r3, sp, #40	@ 0x28
 8005180:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005184:	ab09      	add	r3, sp, #36	@ 0x24
 8005186:	9300      	str	r3, [sp, #0]
 8005188:	6861      	ldr	r1, [r4, #4]
 800518a:	ec49 8b10 	vmov	d0, r8, r9
 800518e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005192:	4628      	mov	r0, r5
 8005194:	f7ff fed7 	bl	8004f46 <__cvt>
 8005198:	9b06      	ldr	r3, [sp, #24]
 800519a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800519c:	2b47      	cmp	r3, #71	@ 0x47
 800519e:	4680      	mov	r8, r0
 80051a0:	d129      	bne.n	80051f6 <_printf_float+0x172>
 80051a2:	1cc8      	adds	r0, r1, #3
 80051a4:	db02      	blt.n	80051ac <_printf_float+0x128>
 80051a6:	6863      	ldr	r3, [r4, #4]
 80051a8:	4299      	cmp	r1, r3
 80051aa:	dd41      	ble.n	8005230 <_printf_float+0x1ac>
 80051ac:	f1aa 0a02 	sub.w	sl, sl, #2
 80051b0:	fa5f fa8a 	uxtb.w	sl, sl
 80051b4:	3901      	subs	r1, #1
 80051b6:	4652      	mov	r2, sl
 80051b8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80051bc:	9109      	str	r1, [sp, #36]	@ 0x24
 80051be:	f7ff ff27 	bl	8005010 <__exponent>
 80051c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80051c4:	1813      	adds	r3, r2, r0
 80051c6:	2a01      	cmp	r2, #1
 80051c8:	4681      	mov	r9, r0
 80051ca:	6123      	str	r3, [r4, #16]
 80051cc:	dc02      	bgt.n	80051d4 <_printf_float+0x150>
 80051ce:	6822      	ldr	r2, [r4, #0]
 80051d0:	07d2      	lsls	r2, r2, #31
 80051d2:	d501      	bpl.n	80051d8 <_printf_float+0x154>
 80051d4:	3301      	adds	r3, #1
 80051d6:	6123      	str	r3, [r4, #16]
 80051d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d0a2      	beq.n	8005126 <_printf_float+0xa2>
 80051e0:	232d      	movs	r3, #45	@ 0x2d
 80051e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051e6:	e79e      	b.n	8005126 <_printf_float+0xa2>
 80051e8:	9a06      	ldr	r2, [sp, #24]
 80051ea:	2a47      	cmp	r2, #71	@ 0x47
 80051ec:	d1c2      	bne.n	8005174 <_printf_float+0xf0>
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1c0      	bne.n	8005174 <_printf_float+0xf0>
 80051f2:	2301      	movs	r3, #1
 80051f4:	e7bd      	b.n	8005172 <_printf_float+0xee>
 80051f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80051fa:	d9db      	bls.n	80051b4 <_printf_float+0x130>
 80051fc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005200:	d118      	bne.n	8005234 <_printf_float+0x1b0>
 8005202:	2900      	cmp	r1, #0
 8005204:	6863      	ldr	r3, [r4, #4]
 8005206:	dd0b      	ble.n	8005220 <_printf_float+0x19c>
 8005208:	6121      	str	r1, [r4, #16]
 800520a:	b913      	cbnz	r3, 8005212 <_printf_float+0x18e>
 800520c:	6822      	ldr	r2, [r4, #0]
 800520e:	07d0      	lsls	r0, r2, #31
 8005210:	d502      	bpl.n	8005218 <_printf_float+0x194>
 8005212:	3301      	adds	r3, #1
 8005214:	440b      	add	r3, r1
 8005216:	6123      	str	r3, [r4, #16]
 8005218:	65a1      	str	r1, [r4, #88]	@ 0x58
 800521a:	f04f 0900 	mov.w	r9, #0
 800521e:	e7db      	b.n	80051d8 <_printf_float+0x154>
 8005220:	b913      	cbnz	r3, 8005228 <_printf_float+0x1a4>
 8005222:	6822      	ldr	r2, [r4, #0]
 8005224:	07d2      	lsls	r2, r2, #31
 8005226:	d501      	bpl.n	800522c <_printf_float+0x1a8>
 8005228:	3302      	adds	r3, #2
 800522a:	e7f4      	b.n	8005216 <_printf_float+0x192>
 800522c:	2301      	movs	r3, #1
 800522e:	e7f2      	b.n	8005216 <_printf_float+0x192>
 8005230:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005234:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005236:	4299      	cmp	r1, r3
 8005238:	db05      	blt.n	8005246 <_printf_float+0x1c2>
 800523a:	6823      	ldr	r3, [r4, #0]
 800523c:	6121      	str	r1, [r4, #16]
 800523e:	07d8      	lsls	r0, r3, #31
 8005240:	d5ea      	bpl.n	8005218 <_printf_float+0x194>
 8005242:	1c4b      	adds	r3, r1, #1
 8005244:	e7e7      	b.n	8005216 <_printf_float+0x192>
 8005246:	2900      	cmp	r1, #0
 8005248:	bfd4      	ite	le
 800524a:	f1c1 0202 	rsble	r2, r1, #2
 800524e:	2201      	movgt	r2, #1
 8005250:	4413      	add	r3, r2
 8005252:	e7e0      	b.n	8005216 <_printf_float+0x192>
 8005254:	6823      	ldr	r3, [r4, #0]
 8005256:	055a      	lsls	r2, r3, #21
 8005258:	d407      	bmi.n	800526a <_printf_float+0x1e6>
 800525a:	6923      	ldr	r3, [r4, #16]
 800525c:	4642      	mov	r2, r8
 800525e:	4631      	mov	r1, r6
 8005260:	4628      	mov	r0, r5
 8005262:	47b8      	blx	r7
 8005264:	3001      	adds	r0, #1
 8005266:	d12b      	bne.n	80052c0 <_printf_float+0x23c>
 8005268:	e767      	b.n	800513a <_printf_float+0xb6>
 800526a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800526e:	f240 80dd 	bls.w	800542c <_printf_float+0x3a8>
 8005272:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005276:	2200      	movs	r2, #0
 8005278:	2300      	movs	r3, #0
 800527a:	f7fb fc2d 	bl	8000ad8 <__aeabi_dcmpeq>
 800527e:	2800      	cmp	r0, #0
 8005280:	d033      	beq.n	80052ea <_printf_float+0x266>
 8005282:	4a37      	ldr	r2, [pc, #220]	@ (8005360 <_printf_float+0x2dc>)
 8005284:	2301      	movs	r3, #1
 8005286:	4631      	mov	r1, r6
 8005288:	4628      	mov	r0, r5
 800528a:	47b8      	blx	r7
 800528c:	3001      	adds	r0, #1
 800528e:	f43f af54 	beq.w	800513a <_printf_float+0xb6>
 8005292:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005296:	4543      	cmp	r3, r8
 8005298:	db02      	blt.n	80052a0 <_printf_float+0x21c>
 800529a:	6823      	ldr	r3, [r4, #0]
 800529c:	07d8      	lsls	r0, r3, #31
 800529e:	d50f      	bpl.n	80052c0 <_printf_float+0x23c>
 80052a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052a4:	4631      	mov	r1, r6
 80052a6:	4628      	mov	r0, r5
 80052a8:	47b8      	blx	r7
 80052aa:	3001      	adds	r0, #1
 80052ac:	f43f af45 	beq.w	800513a <_printf_float+0xb6>
 80052b0:	f04f 0900 	mov.w	r9, #0
 80052b4:	f108 38ff 	add.w	r8, r8, #4294967295
 80052b8:	f104 0a1a 	add.w	sl, r4, #26
 80052bc:	45c8      	cmp	r8, r9
 80052be:	dc09      	bgt.n	80052d4 <_printf_float+0x250>
 80052c0:	6823      	ldr	r3, [r4, #0]
 80052c2:	079b      	lsls	r3, r3, #30
 80052c4:	f100 8103 	bmi.w	80054ce <_printf_float+0x44a>
 80052c8:	68e0      	ldr	r0, [r4, #12]
 80052ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80052cc:	4298      	cmp	r0, r3
 80052ce:	bfb8      	it	lt
 80052d0:	4618      	movlt	r0, r3
 80052d2:	e734      	b.n	800513e <_printf_float+0xba>
 80052d4:	2301      	movs	r3, #1
 80052d6:	4652      	mov	r2, sl
 80052d8:	4631      	mov	r1, r6
 80052da:	4628      	mov	r0, r5
 80052dc:	47b8      	blx	r7
 80052de:	3001      	adds	r0, #1
 80052e0:	f43f af2b 	beq.w	800513a <_printf_float+0xb6>
 80052e4:	f109 0901 	add.w	r9, r9, #1
 80052e8:	e7e8      	b.n	80052bc <_printf_float+0x238>
 80052ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	dc39      	bgt.n	8005364 <_printf_float+0x2e0>
 80052f0:	4a1b      	ldr	r2, [pc, #108]	@ (8005360 <_printf_float+0x2dc>)
 80052f2:	2301      	movs	r3, #1
 80052f4:	4631      	mov	r1, r6
 80052f6:	4628      	mov	r0, r5
 80052f8:	47b8      	blx	r7
 80052fa:	3001      	adds	r0, #1
 80052fc:	f43f af1d 	beq.w	800513a <_printf_float+0xb6>
 8005300:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005304:	ea59 0303 	orrs.w	r3, r9, r3
 8005308:	d102      	bne.n	8005310 <_printf_float+0x28c>
 800530a:	6823      	ldr	r3, [r4, #0]
 800530c:	07d9      	lsls	r1, r3, #31
 800530e:	d5d7      	bpl.n	80052c0 <_printf_float+0x23c>
 8005310:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005314:	4631      	mov	r1, r6
 8005316:	4628      	mov	r0, r5
 8005318:	47b8      	blx	r7
 800531a:	3001      	adds	r0, #1
 800531c:	f43f af0d 	beq.w	800513a <_printf_float+0xb6>
 8005320:	f04f 0a00 	mov.w	sl, #0
 8005324:	f104 0b1a 	add.w	fp, r4, #26
 8005328:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800532a:	425b      	negs	r3, r3
 800532c:	4553      	cmp	r3, sl
 800532e:	dc01      	bgt.n	8005334 <_printf_float+0x2b0>
 8005330:	464b      	mov	r3, r9
 8005332:	e793      	b.n	800525c <_printf_float+0x1d8>
 8005334:	2301      	movs	r3, #1
 8005336:	465a      	mov	r2, fp
 8005338:	4631      	mov	r1, r6
 800533a:	4628      	mov	r0, r5
 800533c:	47b8      	blx	r7
 800533e:	3001      	adds	r0, #1
 8005340:	f43f aefb 	beq.w	800513a <_printf_float+0xb6>
 8005344:	f10a 0a01 	add.w	sl, sl, #1
 8005348:	e7ee      	b.n	8005328 <_printf_float+0x2a4>
 800534a:	bf00      	nop
 800534c:	7fefffff 	.word	0x7fefffff
 8005350:	08007ca0 	.word	0x08007ca0
 8005354:	08007ca4 	.word	0x08007ca4
 8005358:	08007ca8 	.word	0x08007ca8
 800535c:	08007cac 	.word	0x08007cac
 8005360:	08007cb0 	.word	0x08007cb0
 8005364:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005366:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800536a:	4553      	cmp	r3, sl
 800536c:	bfa8      	it	ge
 800536e:	4653      	movge	r3, sl
 8005370:	2b00      	cmp	r3, #0
 8005372:	4699      	mov	r9, r3
 8005374:	dc36      	bgt.n	80053e4 <_printf_float+0x360>
 8005376:	f04f 0b00 	mov.w	fp, #0
 800537a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800537e:	f104 021a 	add.w	r2, r4, #26
 8005382:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005384:	9306      	str	r3, [sp, #24]
 8005386:	eba3 0309 	sub.w	r3, r3, r9
 800538a:	455b      	cmp	r3, fp
 800538c:	dc31      	bgt.n	80053f2 <_printf_float+0x36e>
 800538e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005390:	459a      	cmp	sl, r3
 8005392:	dc3a      	bgt.n	800540a <_printf_float+0x386>
 8005394:	6823      	ldr	r3, [r4, #0]
 8005396:	07da      	lsls	r2, r3, #31
 8005398:	d437      	bmi.n	800540a <_printf_float+0x386>
 800539a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800539c:	ebaa 0903 	sub.w	r9, sl, r3
 80053a0:	9b06      	ldr	r3, [sp, #24]
 80053a2:	ebaa 0303 	sub.w	r3, sl, r3
 80053a6:	4599      	cmp	r9, r3
 80053a8:	bfa8      	it	ge
 80053aa:	4699      	movge	r9, r3
 80053ac:	f1b9 0f00 	cmp.w	r9, #0
 80053b0:	dc33      	bgt.n	800541a <_printf_float+0x396>
 80053b2:	f04f 0800 	mov.w	r8, #0
 80053b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80053ba:	f104 0b1a 	add.w	fp, r4, #26
 80053be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053c0:	ebaa 0303 	sub.w	r3, sl, r3
 80053c4:	eba3 0309 	sub.w	r3, r3, r9
 80053c8:	4543      	cmp	r3, r8
 80053ca:	f77f af79 	ble.w	80052c0 <_printf_float+0x23c>
 80053ce:	2301      	movs	r3, #1
 80053d0:	465a      	mov	r2, fp
 80053d2:	4631      	mov	r1, r6
 80053d4:	4628      	mov	r0, r5
 80053d6:	47b8      	blx	r7
 80053d8:	3001      	adds	r0, #1
 80053da:	f43f aeae 	beq.w	800513a <_printf_float+0xb6>
 80053de:	f108 0801 	add.w	r8, r8, #1
 80053e2:	e7ec      	b.n	80053be <_printf_float+0x33a>
 80053e4:	4642      	mov	r2, r8
 80053e6:	4631      	mov	r1, r6
 80053e8:	4628      	mov	r0, r5
 80053ea:	47b8      	blx	r7
 80053ec:	3001      	adds	r0, #1
 80053ee:	d1c2      	bne.n	8005376 <_printf_float+0x2f2>
 80053f0:	e6a3      	b.n	800513a <_printf_float+0xb6>
 80053f2:	2301      	movs	r3, #1
 80053f4:	4631      	mov	r1, r6
 80053f6:	4628      	mov	r0, r5
 80053f8:	9206      	str	r2, [sp, #24]
 80053fa:	47b8      	blx	r7
 80053fc:	3001      	adds	r0, #1
 80053fe:	f43f ae9c 	beq.w	800513a <_printf_float+0xb6>
 8005402:	9a06      	ldr	r2, [sp, #24]
 8005404:	f10b 0b01 	add.w	fp, fp, #1
 8005408:	e7bb      	b.n	8005382 <_printf_float+0x2fe>
 800540a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800540e:	4631      	mov	r1, r6
 8005410:	4628      	mov	r0, r5
 8005412:	47b8      	blx	r7
 8005414:	3001      	adds	r0, #1
 8005416:	d1c0      	bne.n	800539a <_printf_float+0x316>
 8005418:	e68f      	b.n	800513a <_printf_float+0xb6>
 800541a:	9a06      	ldr	r2, [sp, #24]
 800541c:	464b      	mov	r3, r9
 800541e:	4442      	add	r2, r8
 8005420:	4631      	mov	r1, r6
 8005422:	4628      	mov	r0, r5
 8005424:	47b8      	blx	r7
 8005426:	3001      	adds	r0, #1
 8005428:	d1c3      	bne.n	80053b2 <_printf_float+0x32e>
 800542a:	e686      	b.n	800513a <_printf_float+0xb6>
 800542c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005430:	f1ba 0f01 	cmp.w	sl, #1
 8005434:	dc01      	bgt.n	800543a <_printf_float+0x3b6>
 8005436:	07db      	lsls	r3, r3, #31
 8005438:	d536      	bpl.n	80054a8 <_printf_float+0x424>
 800543a:	2301      	movs	r3, #1
 800543c:	4642      	mov	r2, r8
 800543e:	4631      	mov	r1, r6
 8005440:	4628      	mov	r0, r5
 8005442:	47b8      	blx	r7
 8005444:	3001      	adds	r0, #1
 8005446:	f43f ae78 	beq.w	800513a <_printf_float+0xb6>
 800544a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800544e:	4631      	mov	r1, r6
 8005450:	4628      	mov	r0, r5
 8005452:	47b8      	blx	r7
 8005454:	3001      	adds	r0, #1
 8005456:	f43f ae70 	beq.w	800513a <_printf_float+0xb6>
 800545a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800545e:	2200      	movs	r2, #0
 8005460:	2300      	movs	r3, #0
 8005462:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005466:	f7fb fb37 	bl	8000ad8 <__aeabi_dcmpeq>
 800546a:	b9c0      	cbnz	r0, 800549e <_printf_float+0x41a>
 800546c:	4653      	mov	r3, sl
 800546e:	f108 0201 	add.w	r2, r8, #1
 8005472:	4631      	mov	r1, r6
 8005474:	4628      	mov	r0, r5
 8005476:	47b8      	blx	r7
 8005478:	3001      	adds	r0, #1
 800547a:	d10c      	bne.n	8005496 <_printf_float+0x412>
 800547c:	e65d      	b.n	800513a <_printf_float+0xb6>
 800547e:	2301      	movs	r3, #1
 8005480:	465a      	mov	r2, fp
 8005482:	4631      	mov	r1, r6
 8005484:	4628      	mov	r0, r5
 8005486:	47b8      	blx	r7
 8005488:	3001      	adds	r0, #1
 800548a:	f43f ae56 	beq.w	800513a <_printf_float+0xb6>
 800548e:	f108 0801 	add.w	r8, r8, #1
 8005492:	45d0      	cmp	r8, sl
 8005494:	dbf3      	blt.n	800547e <_printf_float+0x3fa>
 8005496:	464b      	mov	r3, r9
 8005498:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800549c:	e6df      	b.n	800525e <_printf_float+0x1da>
 800549e:	f04f 0800 	mov.w	r8, #0
 80054a2:	f104 0b1a 	add.w	fp, r4, #26
 80054a6:	e7f4      	b.n	8005492 <_printf_float+0x40e>
 80054a8:	2301      	movs	r3, #1
 80054aa:	4642      	mov	r2, r8
 80054ac:	e7e1      	b.n	8005472 <_printf_float+0x3ee>
 80054ae:	2301      	movs	r3, #1
 80054b0:	464a      	mov	r2, r9
 80054b2:	4631      	mov	r1, r6
 80054b4:	4628      	mov	r0, r5
 80054b6:	47b8      	blx	r7
 80054b8:	3001      	adds	r0, #1
 80054ba:	f43f ae3e 	beq.w	800513a <_printf_float+0xb6>
 80054be:	f108 0801 	add.w	r8, r8, #1
 80054c2:	68e3      	ldr	r3, [r4, #12]
 80054c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80054c6:	1a5b      	subs	r3, r3, r1
 80054c8:	4543      	cmp	r3, r8
 80054ca:	dcf0      	bgt.n	80054ae <_printf_float+0x42a>
 80054cc:	e6fc      	b.n	80052c8 <_printf_float+0x244>
 80054ce:	f04f 0800 	mov.w	r8, #0
 80054d2:	f104 0919 	add.w	r9, r4, #25
 80054d6:	e7f4      	b.n	80054c2 <_printf_float+0x43e>

080054d8 <_printf_common>:
 80054d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054dc:	4616      	mov	r6, r2
 80054de:	4698      	mov	r8, r3
 80054e0:	688a      	ldr	r2, [r1, #8]
 80054e2:	690b      	ldr	r3, [r1, #16]
 80054e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80054e8:	4293      	cmp	r3, r2
 80054ea:	bfb8      	it	lt
 80054ec:	4613      	movlt	r3, r2
 80054ee:	6033      	str	r3, [r6, #0]
 80054f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80054f4:	4607      	mov	r7, r0
 80054f6:	460c      	mov	r4, r1
 80054f8:	b10a      	cbz	r2, 80054fe <_printf_common+0x26>
 80054fa:	3301      	adds	r3, #1
 80054fc:	6033      	str	r3, [r6, #0]
 80054fe:	6823      	ldr	r3, [r4, #0]
 8005500:	0699      	lsls	r1, r3, #26
 8005502:	bf42      	ittt	mi
 8005504:	6833      	ldrmi	r3, [r6, #0]
 8005506:	3302      	addmi	r3, #2
 8005508:	6033      	strmi	r3, [r6, #0]
 800550a:	6825      	ldr	r5, [r4, #0]
 800550c:	f015 0506 	ands.w	r5, r5, #6
 8005510:	d106      	bne.n	8005520 <_printf_common+0x48>
 8005512:	f104 0a19 	add.w	sl, r4, #25
 8005516:	68e3      	ldr	r3, [r4, #12]
 8005518:	6832      	ldr	r2, [r6, #0]
 800551a:	1a9b      	subs	r3, r3, r2
 800551c:	42ab      	cmp	r3, r5
 800551e:	dc26      	bgt.n	800556e <_printf_common+0x96>
 8005520:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005524:	6822      	ldr	r2, [r4, #0]
 8005526:	3b00      	subs	r3, #0
 8005528:	bf18      	it	ne
 800552a:	2301      	movne	r3, #1
 800552c:	0692      	lsls	r2, r2, #26
 800552e:	d42b      	bmi.n	8005588 <_printf_common+0xb0>
 8005530:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005534:	4641      	mov	r1, r8
 8005536:	4638      	mov	r0, r7
 8005538:	47c8      	blx	r9
 800553a:	3001      	adds	r0, #1
 800553c:	d01e      	beq.n	800557c <_printf_common+0xa4>
 800553e:	6823      	ldr	r3, [r4, #0]
 8005540:	6922      	ldr	r2, [r4, #16]
 8005542:	f003 0306 	and.w	r3, r3, #6
 8005546:	2b04      	cmp	r3, #4
 8005548:	bf02      	ittt	eq
 800554a:	68e5      	ldreq	r5, [r4, #12]
 800554c:	6833      	ldreq	r3, [r6, #0]
 800554e:	1aed      	subeq	r5, r5, r3
 8005550:	68a3      	ldr	r3, [r4, #8]
 8005552:	bf0c      	ite	eq
 8005554:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005558:	2500      	movne	r5, #0
 800555a:	4293      	cmp	r3, r2
 800555c:	bfc4      	itt	gt
 800555e:	1a9b      	subgt	r3, r3, r2
 8005560:	18ed      	addgt	r5, r5, r3
 8005562:	2600      	movs	r6, #0
 8005564:	341a      	adds	r4, #26
 8005566:	42b5      	cmp	r5, r6
 8005568:	d11a      	bne.n	80055a0 <_printf_common+0xc8>
 800556a:	2000      	movs	r0, #0
 800556c:	e008      	b.n	8005580 <_printf_common+0xa8>
 800556e:	2301      	movs	r3, #1
 8005570:	4652      	mov	r2, sl
 8005572:	4641      	mov	r1, r8
 8005574:	4638      	mov	r0, r7
 8005576:	47c8      	blx	r9
 8005578:	3001      	adds	r0, #1
 800557a:	d103      	bne.n	8005584 <_printf_common+0xac>
 800557c:	f04f 30ff 	mov.w	r0, #4294967295
 8005580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005584:	3501      	adds	r5, #1
 8005586:	e7c6      	b.n	8005516 <_printf_common+0x3e>
 8005588:	18e1      	adds	r1, r4, r3
 800558a:	1c5a      	adds	r2, r3, #1
 800558c:	2030      	movs	r0, #48	@ 0x30
 800558e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005592:	4422      	add	r2, r4
 8005594:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005598:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800559c:	3302      	adds	r3, #2
 800559e:	e7c7      	b.n	8005530 <_printf_common+0x58>
 80055a0:	2301      	movs	r3, #1
 80055a2:	4622      	mov	r2, r4
 80055a4:	4641      	mov	r1, r8
 80055a6:	4638      	mov	r0, r7
 80055a8:	47c8      	blx	r9
 80055aa:	3001      	adds	r0, #1
 80055ac:	d0e6      	beq.n	800557c <_printf_common+0xa4>
 80055ae:	3601      	adds	r6, #1
 80055b0:	e7d9      	b.n	8005566 <_printf_common+0x8e>
	...

080055b4 <_printf_i>:
 80055b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055b8:	7e0f      	ldrb	r7, [r1, #24]
 80055ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80055bc:	2f78      	cmp	r7, #120	@ 0x78
 80055be:	4691      	mov	r9, r2
 80055c0:	4680      	mov	r8, r0
 80055c2:	460c      	mov	r4, r1
 80055c4:	469a      	mov	sl, r3
 80055c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80055ca:	d807      	bhi.n	80055dc <_printf_i+0x28>
 80055cc:	2f62      	cmp	r7, #98	@ 0x62
 80055ce:	d80a      	bhi.n	80055e6 <_printf_i+0x32>
 80055d0:	2f00      	cmp	r7, #0
 80055d2:	f000 80d2 	beq.w	800577a <_printf_i+0x1c6>
 80055d6:	2f58      	cmp	r7, #88	@ 0x58
 80055d8:	f000 80b9 	beq.w	800574e <_printf_i+0x19a>
 80055dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80055e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80055e4:	e03a      	b.n	800565c <_printf_i+0xa8>
 80055e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80055ea:	2b15      	cmp	r3, #21
 80055ec:	d8f6      	bhi.n	80055dc <_printf_i+0x28>
 80055ee:	a101      	add	r1, pc, #4	@ (adr r1, 80055f4 <_printf_i+0x40>)
 80055f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055f4:	0800564d 	.word	0x0800564d
 80055f8:	08005661 	.word	0x08005661
 80055fc:	080055dd 	.word	0x080055dd
 8005600:	080055dd 	.word	0x080055dd
 8005604:	080055dd 	.word	0x080055dd
 8005608:	080055dd 	.word	0x080055dd
 800560c:	08005661 	.word	0x08005661
 8005610:	080055dd 	.word	0x080055dd
 8005614:	080055dd 	.word	0x080055dd
 8005618:	080055dd 	.word	0x080055dd
 800561c:	080055dd 	.word	0x080055dd
 8005620:	08005761 	.word	0x08005761
 8005624:	0800568b 	.word	0x0800568b
 8005628:	0800571b 	.word	0x0800571b
 800562c:	080055dd 	.word	0x080055dd
 8005630:	080055dd 	.word	0x080055dd
 8005634:	08005783 	.word	0x08005783
 8005638:	080055dd 	.word	0x080055dd
 800563c:	0800568b 	.word	0x0800568b
 8005640:	080055dd 	.word	0x080055dd
 8005644:	080055dd 	.word	0x080055dd
 8005648:	08005723 	.word	0x08005723
 800564c:	6833      	ldr	r3, [r6, #0]
 800564e:	1d1a      	adds	r2, r3, #4
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	6032      	str	r2, [r6, #0]
 8005654:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005658:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800565c:	2301      	movs	r3, #1
 800565e:	e09d      	b.n	800579c <_printf_i+0x1e8>
 8005660:	6833      	ldr	r3, [r6, #0]
 8005662:	6820      	ldr	r0, [r4, #0]
 8005664:	1d19      	adds	r1, r3, #4
 8005666:	6031      	str	r1, [r6, #0]
 8005668:	0606      	lsls	r6, r0, #24
 800566a:	d501      	bpl.n	8005670 <_printf_i+0xbc>
 800566c:	681d      	ldr	r5, [r3, #0]
 800566e:	e003      	b.n	8005678 <_printf_i+0xc4>
 8005670:	0645      	lsls	r5, r0, #25
 8005672:	d5fb      	bpl.n	800566c <_printf_i+0xb8>
 8005674:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005678:	2d00      	cmp	r5, #0
 800567a:	da03      	bge.n	8005684 <_printf_i+0xd0>
 800567c:	232d      	movs	r3, #45	@ 0x2d
 800567e:	426d      	negs	r5, r5
 8005680:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005684:	4859      	ldr	r0, [pc, #356]	@ (80057ec <_printf_i+0x238>)
 8005686:	230a      	movs	r3, #10
 8005688:	e011      	b.n	80056ae <_printf_i+0xfa>
 800568a:	6821      	ldr	r1, [r4, #0]
 800568c:	6833      	ldr	r3, [r6, #0]
 800568e:	0608      	lsls	r0, r1, #24
 8005690:	f853 5b04 	ldr.w	r5, [r3], #4
 8005694:	d402      	bmi.n	800569c <_printf_i+0xe8>
 8005696:	0649      	lsls	r1, r1, #25
 8005698:	bf48      	it	mi
 800569a:	b2ad      	uxthmi	r5, r5
 800569c:	2f6f      	cmp	r7, #111	@ 0x6f
 800569e:	4853      	ldr	r0, [pc, #332]	@ (80057ec <_printf_i+0x238>)
 80056a0:	6033      	str	r3, [r6, #0]
 80056a2:	bf14      	ite	ne
 80056a4:	230a      	movne	r3, #10
 80056a6:	2308      	moveq	r3, #8
 80056a8:	2100      	movs	r1, #0
 80056aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80056ae:	6866      	ldr	r6, [r4, #4]
 80056b0:	60a6      	str	r6, [r4, #8]
 80056b2:	2e00      	cmp	r6, #0
 80056b4:	bfa2      	ittt	ge
 80056b6:	6821      	ldrge	r1, [r4, #0]
 80056b8:	f021 0104 	bicge.w	r1, r1, #4
 80056bc:	6021      	strge	r1, [r4, #0]
 80056be:	b90d      	cbnz	r5, 80056c4 <_printf_i+0x110>
 80056c0:	2e00      	cmp	r6, #0
 80056c2:	d04b      	beq.n	800575c <_printf_i+0x1a8>
 80056c4:	4616      	mov	r6, r2
 80056c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80056ca:	fb03 5711 	mls	r7, r3, r1, r5
 80056ce:	5dc7      	ldrb	r7, [r0, r7]
 80056d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80056d4:	462f      	mov	r7, r5
 80056d6:	42bb      	cmp	r3, r7
 80056d8:	460d      	mov	r5, r1
 80056da:	d9f4      	bls.n	80056c6 <_printf_i+0x112>
 80056dc:	2b08      	cmp	r3, #8
 80056de:	d10b      	bne.n	80056f8 <_printf_i+0x144>
 80056e0:	6823      	ldr	r3, [r4, #0]
 80056e2:	07df      	lsls	r7, r3, #31
 80056e4:	d508      	bpl.n	80056f8 <_printf_i+0x144>
 80056e6:	6923      	ldr	r3, [r4, #16]
 80056e8:	6861      	ldr	r1, [r4, #4]
 80056ea:	4299      	cmp	r1, r3
 80056ec:	bfde      	ittt	le
 80056ee:	2330      	movle	r3, #48	@ 0x30
 80056f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80056f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80056f8:	1b92      	subs	r2, r2, r6
 80056fa:	6122      	str	r2, [r4, #16]
 80056fc:	f8cd a000 	str.w	sl, [sp]
 8005700:	464b      	mov	r3, r9
 8005702:	aa03      	add	r2, sp, #12
 8005704:	4621      	mov	r1, r4
 8005706:	4640      	mov	r0, r8
 8005708:	f7ff fee6 	bl	80054d8 <_printf_common>
 800570c:	3001      	adds	r0, #1
 800570e:	d14a      	bne.n	80057a6 <_printf_i+0x1f2>
 8005710:	f04f 30ff 	mov.w	r0, #4294967295
 8005714:	b004      	add	sp, #16
 8005716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800571a:	6823      	ldr	r3, [r4, #0]
 800571c:	f043 0320 	orr.w	r3, r3, #32
 8005720:	6023      	str	r3, [r4, #0]
 8005722:	4833      	ldr	r0, [pc, #204]	@ (80057f0 <_printf_i+0x23c>)
 8005724:	2778      	movs	r7, #120	@ 0x78
 8005726:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800572a:	6823      	ldr	r3, [r4, #0]
 800572c:	6831      	ldr	r1, [r6, #0]
 800572e:	061f      	lsls	r7, r3, #24
 8005730:	f851 5b04 	ldr.w	r5, [r1], #4
 8005734:	d402      	bmi.n	800573c <_printf_i+0x188>
 8005736:	065f      	lsls	r7, r3, #25
 8005738:	bf48      	it	mi
 800573a:	b2ad      	uxthmi	r5, r5
 800573c:	6031      	str	r1, [r6, #0]
 800573e:	07d9      	lsls	r1, r3, #31
 8005740:	bf44      	itt	mi
 8005742:	f043 0320 	orrmi.w	r3, r3, #32
 8005746:	6023      	strmi	r3, [r4, #0]
 8005748:	b11d      	cbz	r5, 8005752 <_printf_i+0x19e>
 800574a:	2310      	movs	r3, #16
 800574c:	e7ac      	b.n	80056a8 <_printf_i+0xf4>
 800574e:	4827      	ldr	r0, [pc, #156]	@ (80057ec <_printf_i+0x238>)
 8005750:	e7e9      	b.n	8005726 <_printf_i+0x172>
 8005752:	6823      	ldr	r3, [r4, #0]
 8005754:	f023 0320 	bic.w	r3, r3, #32
 8005758:	6023      	str	r3, [r4, #0]
 800575a:	e7f6      	b.n	800574a <_printf_i+0x196>
 800575c:	4616      	mov	r6, r2
 800575e:	e7bd      	b.n	80056dc <_printf_i+0x128>
 8005760:	6833      	ldr	r3, [r6, #0]
 8005762:	6825      	ldr	r5, [r4, #0]
 8005764:	6961      	ldr	r1, [r4, #20]
 8005766:	1d18      	adds	r0, r3, #4
 8005768:	6030      	str	r0, [r6, #0]
 800576a:	062e      	lsls	r6, r5, #24
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	d501      	bpl.n	8005774 <_printf_i+0x1c0>
 8005770:	6019      	str	r1, [r3, #0]
 8005772:	e002      	b.n	800577a <_printf_i+0x1c6>
 8005774:	0668      	lsls	r0, r5, #25
 8005776:	d5fb      	bpl.n	8005770 <_printf_i+0x1bc>
 8005778:	8019      	strh	r1, [r3, #0]
 800577a:	2300      	movs	r3, #0
 800577c:	6123      	str	r3, [r4, #16]
 800577e:	4616      	mov	r6, r2
 8005780:	e7bc      	b.n	80056fc <_printf_i+0x148>
 8005782:	6833      	ldr	r3, [r6, #0]
 8005784:	1d1a      	adds	r2, r3, #4
 8005786:	6032      	str	r2, [r6, #0]
 8005788:	681e      	ldr	r6, [r3, #0]
 800578a:	6862      	ldr	r2, [r4, #4]
 800578c:	2100      	movs	r1, #0
 800578e:	4630      	mov	r0, r6
 8005790:	f7fa fd26 	bl	80001e0 <memchr>
 8005794:	b108      	cbz	r0, 800579a <_printf_i+0x1e6>
 8005796:	1b80      	subs	r0, r0, r6
 8005798:	6060      	str	r0, [r4, #4]
 800579a:	6863      	ldr	r3, [r4, #4]
 800579c:	6123      	str	r3, [r4, #16]
 800579e:	2300      	movs	r3, #0
 80057a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80057a4:	e7aa      	b.n	80056fc <_printf_i+0x148>
 80057a6:	6923      	ldr	r3, [r4, #16]
 80057a8:	4632      	mov	r2, r6
 80057aa:	4649      	mov	r1, r9
 80057ac:	4640      	mov	r0, r8
 80057ae:	47d0      	blx	sl
 80057b0:	3001      	adds	r0, #1
 80057b2:	d0ad      	beq.n	8005710 <_printf_i+0x15c>
 80057b4:	6823      	ldr	r3, [r4, #0]
 80057b6:	079b      	lsls	r3, r3, #30
 80057b8:	d413      	bmi.n	80057e2 <_printf_i+0x22e>
 80057ba:	68e0      	ldr	r0, [r4, #12]
 80057bc:	9b03      	ldr	r3, [sp, #12]
 80057be:	4298      	cmp	r0, r3
 80057c0:	bfb8      	it	lt
 80057c2:	4618      	movlt	r0, r3
 80057c4:	e7a6      	b.n	8005714 <_printf_i+0x160>
 80057c6:	2301      	movs	r3, #1
 80057c8:	4632      	mov	r2, r6
 80057ca:	4649      	mov	r1, r9
 80057cc:	4640      	mov	r0, r8
 80057ce:	47d0      	blx	sl
 80057d0:	3001      	adds	r0, #1
 80057d2:	d09d      	beq.n	8005710 <_printf_i+0x15c>
 80057d4:	3501      	adds	r5, #1
 80057d6:	68e3      	ldr	r3, [r4, #12]
 80057d8:	9903      	ldr	r1, [sp, #12]
 80057da:	1a5b      	subs	r3, r3, r1
 80057dc:	42ab      	cmp	r3, r5
 80057de:	dcf2      	bgt.n	80057c6 <_printf_i+0x212>
 80057e0:	e7eb      	b.n	80057ba <_printf_i+0x206>
 80057e2:	2500      	movs	r5, #0
 80057e4:	f104 0619 	add.w	r6, r4, #25
 80057e8:	e7f5      	b.n	80057d6 <_printf_i+0x222>
 80057ea:	bf00      	nop
 80057ec:	08007cb2 	.word	0x08007cb2
 80057f0:	08007cc3 	.word	0x08007cc3

080057f4 <std>:
 80057f4:	2300      	movs	r3, #0
 80057f6:	b510      	push	{r4, lr}
 80057f8:	4604      	mov	r4, r0
 80057fa:	e9c0 3300 	strd	r3, r3, [r0]
 80057fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005802:	6083      	str	r3, [r0, #8]
 8005804:	8181      	strh	r1, [r0, #12]
 8005806:	6643      	str	r3, [r0, #100]	@ 0x64
 8005808:	81c2      	strh	r2, [r0, #14]
 800580a:	6183      	str	r3, [r0, #24]
 800580c:	4619      	mov	r1, r3
 800580e:	2208      	movs	r2, #8
 8005810:	305c      	adds	r0, #92	@ 0x5c
 8005812:	f000 f924 	bl	8005a5e <memset>
 8005816:	4b0d      	ldr	r3, [pc, #52]	@ (800584c <std+0x58>)
 8005818:	6263      	str	r3, [r4, #36]	@ 0x24
 800581a:	4b0d      	ldr	r3, [pc, #52]	@ (8005850 <std+0x5c>)
 800581c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800581e:	4b0d      	ldr	r3, [pc, #52]	@ (8005854 <std+0x60>)
 8005820:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005822:	4b0d      	ldr	r3, [pc, #52]	@ (8005858 <std+0x64>)
 8005824:	6323      	str	r3, [r4, #48]	@ 0x30
 8005826:	4b0d      	ldr	r3, [pc, #52]	@ (800585c <std+0x68>)
 8005828:	6224      	str	r4, [r4, #32]
 800582a:	429c      	cmp	r4, r3
 800582c:	d006      	beq.n	800583c <std+0x48>
 800582e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005832:	4294      	cmp	r4, r2
 8005834:	d002      	beq.n	800583c <std+0x48>
 8005836:	33d0      	adds	r3, #208	@ 0xd0
 8005838:	429c      	cmp	r4, r3
 800583a:	d105      	bne.n	8005848 <std+0x54>
 800583c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005844:	f000 b988 	b.w	8005b58 <__retarget_lock_init_recursive>
 8005848:	bd10      	pop	{r4, pc}
 800584a:	bf00      	nop
 800584c:	080059b9 	.word	0x080059b9
 8005850:	080059db 	.word	0x080059db
 8005854:	08005a13 	.word	0x08005a13
 8005858:	08005a37 	.word	0x08005a37
 800585c:	20000458 	.word	0x20000458

08005860 <stdio_exit_handler>:
 8005860:	4a02      	ldr	r2, [pc, #8]	@ (800586c <stdio_exit_handler+0xc>)
 8005862:	4903      	ldr	r1, [pc, #12]	@ (8005870 <stdio_exit_handler+0x10>)
 8005864:	4803      	ldr	r0, [pc, #12]	@ (8005874 <stdio_exit_handler+0x14>)
 8005866:	f000 b869 	b.w	800593c <_fwalk_sglue>
 800586a:	bf00      	nop
 800586c:	20000134 	.word	0x20000134
 8005870:	080074d5 	.word	0x080074d5
 8005874:	20000144 	.word	0x20000144

08005878 <cleanup_stdio>:
 8005878:	6841      	ldr	r1, [r0, #4]
 800587a:	4b0c      	ldr	r3, [pc, #48]	@ (80058ac <cleanup_stdio+0x34>)
 800587c:	4299      	cmp	r1, r3
 800587e:	b510      	push	{r4, lr}
 8005880:	4604      	mov	r4, r0
 8005882:	d001      	beq.n	8005888 <cleanup_stdio+0x10>
 8005884:	f001 fe26 	bl	80074d4 <_fflush_r>
 8005888:	68a1      	ldr	r1, [r4, #8]
 800588a:	4b09      	ldr	r3, [pc, #36]	@ (80058b0 <cleanup_stdio+0x38>)
 800588c:	4299      	cmp	r1, r3
 800588e:	d002      	beq.n	8005896 <cleanup_stdio+0x1e>
 8005890:	4620      	mov	r0, r4
 8005892:	f001 fe1f 	bl	80074d4 <_fflush_r>
 8005896:	68e1      	ldr	r1, [r4, #12]
 8005898:	4b06      	ldr	r3, [pc, #24]	@ (80058b4 <cleanup_stdio+0x3c>)
 800589a:	4299      	cmp	r1, r3
 800589c:	d004      	beq.n	80058a8 <cleanup_stdio+0x30>
 800589e:	4620      	mov	r0, r4
 80058a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058a4:	f001 be16 	b.w	80074d4 <_fflush_r>
 80058a8:	bd10      	pop	{r4, pc}
 80058aa:	bf00      	nop
 80058ac:	20000458 	.word	0x20000458
 80058b0:	200004c0 	.word	0x200004c0
 80058b4:	20000528 	.word	0x20000528

080058b8 <global_stdio_init.part.0>:
 80058b8:	b510      	push	{r4, lr}
 80058ba:	4b0b      	ldr	r3, [pc, #44]	@ (80058e8 <global_stdio_init.part.0+0x30>)
 80058bc:	4c0b      	ldr	r4, [pc, #44]	@ (80058ec <global_stdio_init.part.0+0x34>)
 80058be:	4a0c      	ldr	r2, [pc, #48]	@ (80058f0 <global_stdio_init.part.0+0x38>)
 80058c0:	601a      	str	r2, [r3, #0]
 80058c2:	4620      	mov	r0, r4
 80058c4:	2200      	movs	r2, #0
 80058c6:	2104      	movs	r1, #4
 80058c8:	f7ff ff94 	bl	80057f4 <std>
 80058cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80058d0:	2201      	movs	r2, #1
 80058d2:	2109      	movs	r1, #9
 80058d4:	f7ff ff8e 	bl	80057f4 <std>
 80058d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80058dc:	2202      	movs	r2, #2
 80058de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058e2:	2112      	movs	r1, #18
 80058e4:	f7ff bf86 	b.w	80057f4 <std>
 80058e8:	20000590 	.word	0x20000590
 80058ec:	20000458 	.word	0x20000458
 80058f0:	08005861 	.word	0x08005861

080058f4 <__sfp_lock_acquire>:
 80058f4:	4801      	ldr	r0, [pc, #4]	@ (80058fc <__sfp_lock_acquire+0x8>)
 80058f6:	f000 b930 	b.w	8005b5a <__retarget_lock_acquire_recursive>
 80058fa:	bf00      	nop
 80058fc:	20000599 	.word	0x20000599

08005900 <__sfp_lock_release>:
 8005900:	4801      	ldr	r0, [pc, #4]	@ (8005908 <__sfp_lock_release+0x8>)
 8005902:	f000 b92b 	b.w	8005b5c <__retarget_lock_release_recursive>
 8005906:	bf00      	nop
 8005908:	20000599 	.word	0x20000599

0800590c <__sinit>:
 800590c:	b510      	push	{r4, lr}
 800590e:	4604      	mov	r4, r0
 8005910:	f7ff fff0 	bl	80058f4 <__sfp_lock_acquire>
 8005914:	6a23      	ldr	r3, [r4, #32]
 8005916:	b11b      	cbz	r3, 8005920 <__sinit+0x14>
 8005918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800591c:	f7ff bff0 	b.w	8005900 <__sfp_lock_release>
 8005920:	4b04      	ldr	r3, [pc, #16]	@ (8005934 <__sinit+0x28>)
 8005922:	6223      	str	r3, [r4, #32]
 8005924:	4b04      	ldr	r3, [pc, #16]	@ (8005938 <__sinit+0x2c>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1f5      	bne.n	8005918 <__sinit+0xc>
 800592c:	f7ff ffc4 	bl	80058b8 <global_stdio_init.part.0>
 8005930:	e7f2      	b.n	8005918 <__sinit+0xc>
 8005932:	bf00      	nop
 8005934:	08005879 	.word	0x08005879
 8005938:	20000590 	.word	0x20000590

0800593c <_fwalk_sglue>:
 800593c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005940:	4607      	mov	r7, r0
 8005942:	4688      	mov	r8, r1
 8005944:	4614      	mov	r4, r2
 8005946:	2600      	movs	r6, #0
 8005948:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800594c:	f1b9 0901 	subs.w	r9, r9, #1
 8005950:	d505      	bpl.n	800595e <_fwalk_sglue+0x22>
 8005952:	6824      	ldr	r4, [r4, #0]
 8005954:	2c00      	cmp	r4, #0
 8005956:	d1f7      	bne.n	8005948 <_fwalk_sglue+0xc>
 8005958:	4630      	mov	r0, r6
 800595a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800595e:	89ab      	ldrh	r3, [r5, #12]
 8005960:	2b01      	cmp	r3, #1
 8005962:	d907      	bls.n	8005974 <_fwalk_sglue+0x38>
 8005964:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005968:	3301      	adds	r3, #1
 800596a:	d003      	beq.n	8005974 <_fwalk_sglue+0x38>
 800596c:	4629      	mov	r1, r5
 800596e:	4638      	mov	r0, r7
 8005970:	47c0      	blx	r8
 8005972:	4306      	orrs	r6, r0
 8005974:	3568      	adds	r5, #104	@ 0x68
 8005976:	e7e9      	b.n	800594c <_fwalk_sglue+0x10>

08005978 <siprintf>:
 8005978:	b40e      	push	{r1, r2, r3}
 800597a:	b500      	push	{lr}
 800597c:	b09c      	sub	sp, #112	@ 0x70
 800597e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005980:	9002      	str	r0, [sp, #8]
 8005982:	9006      	str	r0, [sp, #24]
 8005984:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005988:	4809      	ldr	r0, [pc, #36]	@ (80059b0 <siprintf+0x38>)
 800598a:	9107      	str	r1, [sp, #28]
 800598c:	9104      	str	r1, [sp, #16]
 800598e:	4909      	ldr	r1, [pc, #36]	@ (80059b4 <siprintf+0x3c>)
 8005990:	f853 2b04 	ldr.w	r2, [r3], #4
 8005994:	9105      	str	r1, [sp, #20]
 8005996:	6800      	ldr	r0, [r0, #0]
 8005998:	9301      	str	r3, [sp, #4]
 800599a:	a902      	add	r1, sp, #8
 800599c:	f001 fc1a 	bl	80071d4 <_svfiprintf_r>
 80059a0:	9b02      	ldr	r3, [sp, #8]
 80059a2:	2200      	movs	r2, #0
 80059a4:	701a      	strb	r2, [r3, #0]
 80059a6:	b01c      	add	sp, #112	@ 0x70
 80059a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80059ac:	b003      	add	sp, #12
 80059ae:	4770      	bx	lr
 80059b0:	20000140 	.word	0x20000140
 80059b4:	ffff0208 	.word	0xffff0208

080059b8 <__sread>:
 80059b8:	b510      	push	{r4, lr}
 80059ba:	460c      	mov	r4, r1
 80059bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059c0:	f000 f87c 	bl	8005abc <_read_r>
 80059c4:	2800      	cmp	r0, #0
 80059c6:	bfab      	itete	ge
 80059c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80059ca:	89a3      	ldrhlt	r3, [r4, #12]
 80059cc:	181b      	addge	r3, r3, r0
 80059ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80059d2:	bfac      	ite	ge
 80059d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80059d6:	81a3      	strhlt	r3, [r4, #12]
 80059d8:	bd10      	pop	{r4, pc}

080059da <__swrite>:
 80059da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059de:	461f      	mov	r7, r3
 80059e0:	898b      	ldrh	r3, [r1, #12]
 80059e2:	05db      	lsls	r3, r3, #23
 80059e4:	4605      	mov	r5, r0
 80059e6:	460c      	mov	r4, r1
 80059e8:	4616      	mov	r6, r2
 80059ea:	d505      	bpl.n	80059f8 <__swrite+0x1e>
 80059ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059f0:	2302      	movs	r3, #2
 80059f2:	2200      	movs	r2, #0
 80059f4:	f000 f850 	bl	8005a98 <_lseek_r>
 80059f8:	89a3      	ldrh	r3, [r4, #12]
 80059fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a02:	81a3      	strh	r3, [r4, #12]
 8005a04:	4632      	mov	r2, r6
 8005a06:	463b      	mov	r3, r7
 8005a08:	4628      	mov	r0, r5
 8005a0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a0e:	f000 b867 	b.w	8005ae0 <_write_r>

08005a12 <__sseek>:
 8005a12:	b510      	push	{r4, lr}
 8005a14:	460c      	mov	r4, r1
 8005a16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a1a:	f000 f83d 	bl	8005a98 <_lseek_r>
 8005a1e:	1c43      	adds	r3, r0, #1
 8005a20:	89a3      	ldrh	r3, [r4, #12]
 8005a22:	bf15      	itete	ne
 8005a24:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005a26:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005a2a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005a2e:	81a3      	strheq	r3, [r4, #12]
 8005a30:	bf18      	it	ne
 8005a32:	81a3      	strhne	r3, [r4, #12]
 8005a34:	bd10      	pop	{r4, pc}

08005a36 <__sclose>:
 8005a36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a3a:	f000 b81d 	b.w	8005a78 <_close_r>

08005a3e <memcmp>:
 8005a3e:	b510      	push	{r4, lr}
 8005a40:	3901      	subs	r1, #1
 8005a42:	4402      	add	r2, r0
 8005a44:	4290      	cmp	r0, r2
 8005a46:	d101      	bne.n	8005a4c <memcmp+0xe>
 8005a48:	2000      	movs	r0, #0
 8005a4a:	e005      	b.n	8005a58 <memcmp+0x1a>
 8005a4c:	7803      	ldrb	r3, [r0, #0]
 8005a4e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005a52:	42a3      	cmp	r3, r4
 8005a54:	d001      	beq.n	8005a5a <memcmp+0x1c>
 8005a56:	1b18      	subs	r0, r3, r4
 8005a58:	bd10      	pop	{r4, pc}
 8005a5a:	3001      	adds	r0, #1
 8005a5c:	e7f2      	b.n	8005a44 <memcmp+0x6>

08005a5e <memset>:
 8005a5e:	4402      	add	r2, r0
 8005a60:	4603      	mov	r3, r0
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d100      	bne.n	8005a68 <memset+0xa>
 8005a66:	4770      	bx	lr
 8005a68:	f803 1b01 	strb.w	r1, [r3], #1
 8005a6c:	e7f9      	b.n	8005a62 <memset+0x4>
	...

08005a70 <_localeconv_r>:
 8005a70:	4800      	ldr	r0, [pc, #0]	@ (8005a74 <_localeconv_r+0x4>)
 8005a72:	4770      	bx	lr
 8005a74:	20000280 	.word	0x20000280

08005a78 <_close_r>:
 8005a78:	b538      	push	{r3, r4, r5, lr}
 8005a7a:	4d06      	ldr	r5, [pc, #24]	@ (8005a94 <_close_r+0x1c>)
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	4604      	mov	r4, r0
 8005a80:	4608      	mov	r0, r1
 8005a82:	602b      	str	r3, [r5, #0]
 8005a84:	f7fc f8da 	bl	8001c3c <_close>
 8005a88:	1c43      	adds	r3, r0, #1
 8005a8a:	d102      	bne.n	8005a92 <_close_r+0x1a>
 8005a8c:	682b      	ldr	r3, [r5, #0]
 8005a8e:	b103      	cbz	r3, 8005a92 <_close_r+0x1a>
 8005a90:	6023      	str	r3, [r4, #0]
 8005a92:	bd38      	pop	{r3, r4, r5, pc}
 8005a94:	20000594 	.word	0x20000594

08005a98 <_lseek_r>:
 8005a98:	b538      	push	{r3, r4, r5, lr}
 8005a9a:	4d07      	ldr	r5, [pc, #28]	@ (8005ab8 <_lseek_r+0x20>)
 8005a9c:	4604      	mov	r4, r0
 8005a9e:	4608      	mov	r0, r1
 8005aa0:	4611      	mov	r1, r2
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	602a      	str	r2, [r5, #0]
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	f7fc f8ef 	bl	8001c8a <_lseek>
 8005aac:	1c43      	adds	r3, r0, #1
 8005aae:	d102      	bne.n	8005ab6 <_lseek_r+0x1e>
 8005ab0:	682b      	ldr	r3, [r5, #0]
 8005ab2:	b103      	cbz	r3, 8005ab6 <_lseek_r+0x1e>
 8005ab4:	6023      	str	r3, [r4, #0]
 8005ab6:	bd38      	pop	{r3, r4, r5, pc}
 8005ab8:	20000594 	.word	0x20000594

08005abc <_read_r>:
 8005abc:	b538      	push	{r3, r4, r5, lr}
 8005abe:	4d07      	ldr	r5, [pc, #28]	@ (8005adc <_read_r+0x20>)
 8005ac0:	4604      	mov	r4, r0
 8005ac2:	4608      	mov	r0, r1
 8005ac4:	4611      	mov	r1, r2
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	602a      	str	r2, [r5, #0]
 8005aca:	461a      	mov	r2, r3
 8005acc:	f7fc f87d 	bl	8001bca <_read>
 8005ad0:	1c43      	adds	r3, r0, #1
 8005ad2:	d102      	bne.n	8005ada <_read_r+0x1e>
 8005ad4:	682b      	ldr	r3, [r5, #0]
 8005ad6:	b103      	cbz	r3, 8005ada <_read_r+0x1e>
 8005ad8:	6023      	str	r3, [r4, #0]
 8005ada:	bd38      	pop	{r3, r4, r5, pc}
 8005adc:	20000594 	.word	0x20000594

08005ae0 <_write_r>:
 8005ae0:	b538      	push	{r3, r4, r5, lr}
 8005ae2:	4d07      	ldr	r5, [pc, #28]	@ (8005b00 <_write_r+0x20>)
 8005ae4:	4604      	mov	r4, r0
 8005ae6:	4608      	mov	r0, r1
 8005ae8:	4611      	mov	r1, r2
 8005aea:	2200      	movs	r2, #0
 8005aec:	602a      	str	r2, [r5, #0]
 8005aee:	461a      	mov	r2, r3
 8005af0:	f7fc f888 	bl	8001c04 <_write>
 8005af4:	1c43      	adds	r3, r0, #1
 8005af6:	d102      	bne.n	8005afe <_write_r+0x1e>
 8005af8:	682b      	ldr	r3, [r5, #0]
 8005afa:	b103      	cbz	r3, 8005afe <_write_r+0x1e>
 8005afc:	6023      	str	r3, [r4, #0]
 8005afe:	bd38      	pop	{r3, r4, r5, pc}
 8005b00:	20000594 	.word	0x20000594

08005b04 <__errno>:
 8005b04:	4b01      	ldr	r3, [pc, #4]	@ (8005b0c <__errno+0x8>)
 8005b06:	6818      	ldr	r0, [r3, #0]
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	20000140 	.word	0x20000140

08005b10 <__libc_init_array>:
 8005b10:	b570      	push	{r4, r5, r6, lr}
 8005b12:	4d0d      	ldr	r5, [pc, #52]	@ (8005b48 <__libc_init_array+0x38>)
 8005b14:	4c0d      	ldr	r4, [pc, #52]	@ (8005b4c <__libc_init_array+0x3c>)
 8005b16:	1b64      	subs	r4, r4, r5
 8005b18:	10a4      	asrs	r4, r4, #2
 8005b1a:	2600      	movs	r6, #0
 8005b1c:	42a6      	cmp	r6, r4
 8005b1e:	d109      	bne.n	8005b34 <__libc_init_array+0x24>
 8005b20:	4d0b      	ldr	r5, [pc, #44]	@ (8005b50 <__libc_init_array+0x40>)
 8005b22:	4c0c      	ldr	r4, [pc, #48]	@ (8005b54 <__libc_init_array+0x44>)
 8005b24:	f002 f866 	bl	8007bf4 <_init>
 8005b28:	1b64      	subs	r4, r4, r5
 8005b2a:	10a4      	asrs	r4, r4, #2
 8005b2c:	2600      	movs	r6, #0
 8005b2e:	42a6      	cmp	r6, r4
 8005b30:	d105      	bne.n	8005b3e <__libc_init_array+0x2e>
 8005b32:	bd70      	pop	{r4, r5, r6, pc}
 8005b34:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b38:	4798      	blx	r3
 8005b3a:	3601      	adds	r6, #1
 8005b3c:	e7ee      	b.n	8005b1c <__libc_init_array+0xc>
 8005b3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b42:	4798      	blx	r3
 8005b44:	3601      	adds	r6, #1
 8005b46:	e7f2      	b.n	8005b2e <__libc_init_array+0x1e>
 8005b48:	08008018 	.word	0x08008018
 8005b4c:	08008018 	.word	0x08008018
 8005b50:	08008018 	.word	0x08008018
 8005b54:	0800801c 	.word	0x0800801c

08005b58 <__retarget_lock_init_recursive>:
 8005b58:	4770      	bx	lr

08005b5a <__retarget_lock_acquire_recursive>:
 8005b5a:	4770      	bx	lr

08005b5c <__retarget_lock_release_recursive>:
 8005b5c:	4770      	bx	lr

08005b5e <memcpy>:
 8005b5e:	440a      	add	r2, r1
 8005b60:	4291      	cmp	r1, r2
 8005b62:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b66:	d100      	bne.n	8005b6a <memcpy+0xc>
 8005b68:	4770      	bx	lr
 8005b6a:	b510      	push	{r4, lr}
 8005b6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b74:	4291      	cmp	r1, r2
 8005b76:	d1f9      	bne.n	8005b6c <memcpy+0xe>
 8005b78:	bd10      	pop	{r4, pc}

08005b7a <quorem>:
 8005b7a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b7e:	6903      	ldr	r3, [r0, #16]
 8005b80:	690c      	ldr	r4, [r1, #16]
 8005b82:	42a3      	cmp	r3, r4
 8005b84:	4607      	mov	r7, r0
 8005b86:	db7e      	blt.n	8005c86 <quorem+0x10c>
 8005b88:	3c01      	subs	r4, #1
 8005b8a:	f101 0814 	add.w	r8, r1, #20
 8005b8e:	00a3      	lsls	r3, r4, #2
 8005b90:	f100 0514 	add.w	r5, r0, #20
 8005b94:	9300      	str	r3, [sp, #0]
 8005b96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b9a:	9301      	str	r3, [sp, #4]
 8005b9c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005ba0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005bac:	fbb2 f6f3 	udiv	r6, r2, r3
 8005bb0:	d32e      	bcc.n	8005c10 <quorem+0x96>
 8005bb2:	f04f 0a00 	mov.w	sl, #0
 8005bb6:	46c4      	mov	ip, r8
 8005bb8:	46ae      	mov	lr, r5
 8005bba:	46d3      	mov	fp, sl
 8005bbc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005bc0:	b298      	uxth	r0, r3
 8005bc2:	fb06 a000 	mla	r0, r6, r0, sl
 8005bc6:	0c02      	lsrs	r2, r0, #16
 8005bc8:	0c1b      	lsrs	r3, r3, #16
 8005bca:	fb06 2303 	mla	r3, r6, r3, r2
 8005bce:	f8de 2000 	ldr.w	r2, [lr]
 8005bd2:	b280      	uxth	r0, r0
 8005bd4:	b292      	uxth	r2, r2
 8005bd6:	1a12      	subs	r2, r2, r0
 8005bd8:	445a      	add	r2, fp
 8005bda:	f8de 0000 	ldr.w	r0, [lr]
 8005bde:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005be8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005bec:	b292      	uxth	r2, r2
 8005bee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005bf2:	45e1      	cmp	r9, ip
 8005bf4:	f84e 2b04 	str.w	r2, [lr], #4
 8005bf8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005bfc:	d2de      	bcs.n	8005bbc <quorem+0x42>
 8005bfe:	9b00      	ldr	r3, [sp, #0]
 8005c00:	58eb      	ldr	r3, [r5, r3]
 8005c02:	b92b      	cbnz	r3, 8005c10 <quorem+0x96>
 8005c04:	9b01      	ldr	r3, [sp, #4]
 8005c06:	3b04      	subs	r3, #4
 8005c08:	429d      	cmp	r5, r3
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	d32f      	bcc.n	8005c6e <quorem+0xf4>
 8005c0e:	613c      	str	r4, [r7, #16]
 8005c10:	4638      	mov	r0, r7
 8005c12:	f001 f97b 	bl	8006f0c <__mcmp>
 8005c16:	2800      	cmp	r0, #0
 8005c18:	db25      	blt.n	8005c66 <quorem+0xec>
 8005c1a:	4629      	mov	r1, r5
 8005c1c:	2000      	movs	r0, #0
 8005c1e:	f858 2b04 	ldr.w	r2, [r8], #4
 8005c22:	f8d1 c000 	ldr.w	ip, [r1]
 8005c26:	fa1f fe82 	uxth.w	lr, r2
 8005c2a:	fa1f f38c 	uxth.w	r3, ip
 8005c2e:	eba3 030e 	sub.w	r3, r3, lr
 8005c32:	4403      	add	r3, r0
 8005c34:	0c12      	lsrs	r2, r2, #16
 8005c36:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005c3a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c44:	45c1      	cmp	r9, r8
 8005c46:	f841 3b04 	str.w	r3, [r1], #4
 8005c4a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005c4e:	d2e6      	bcs.n	8005c1e <quorem+0xa4>
 8005c50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c54:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c58:	b922      	cbnz	r2, 8005c64 <quorem+0xea>
 8005c5a:	3b04      	subs	r3, #4
 8005c5c:	429d      	cmp	r5, r3
 8005c5e:	461a      	mov	r2, r3
 8005c60:	d30b      	bcc.n	8005c7a <quorem+0x100>
 8005c62:	613c      	str	r4, [r7, #16]
 8005c64:	3601      	adds	r6, #1
 8005c66:	4630      	mov	r0, r6
 8005c68:	b003      	add	sp, #12
 8005c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c6e:	6812      	ldr	r2, [r2, #0]
 8005c70:	3b04      	subs	r3, #4
 8005c72:	2a00      	cmp	r2, #0
 8005c74:	d1cb      	bne.n	8005c0e <quorem+0x94>
 8005c76:	3c01      	subs	r4, #1
 8005c78:	e7c6      	b.n	8005c08 <quorem+0x8e>
 8005c7a:	6812      	ldr	r2, [r2, #0]
 8005c7c:	3b04      	subs	r3, #4
 8005c7e:	2a00      	cmp	r2, #0
 8005c80:	d1ef      	bne.n	8005c62 <quorem+0xe8>
 8005c82:	3c01      	subs	r4, #1
 8005c84:	e7ea      	b.n	8005c5c <quorem+0xe2>
 8005c86:	2000      	movs	r0, #0
 8005c88:	e7ee      	b.n	8005c68 <quorem+0xee>
 8005c8a:	0000      	movs	r0, r0
 8005c8c:	0000      	movs	r0, r0
	...

08005c90 <_dtoa_r>:
 8005c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c94:	69c7      	ldr	r7, [r0, #28]
 8005c96:	b099      	sub	sp, #100	@ 0x64
 8005c98:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005c9c:	ec55 4b10 	vmov	r4, r5, d0
 8005ca0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005ca2:	9109      	str	r1, [sp, #36]	@ 0x24
 8005ca4:	4683      	mov	fp, r0
 8005ca6:	920e      	str	r2, [sp, #56]	@ 0x38
 8005ca8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005caa:	b97f      	cbnz	r7, 8005ccc <_dtoa_r+0x3c>
 8005cac:	2010      	movs	r0, #16
 8005cae:	f000 fdfd 	bl	80068ac <malloc>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	f8cb 001c 	str.w	r0, [fp, #28]
 8005cb8:	b920      	cbnz	r0, 8005cc4 <_dtoa_r+0x34>
 8005cba:	4ba7      	ldr	r3, [pc, #668]	@ (8005f58 <_dtoa_r+0x2c8>)
 8005cbc:	21ef      	movs	r1, #239	@ 0xef
 8005cbe:	48a7      	ldr	r0, [pc, #668]	@ (8005f5c <_dtoa_r+0x2cc>)
 8005cc0:	f001 fc5a 	bl	8007578 <__assert_func>
 8005cc4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005cc8:	6007      	str	r7, [r0, #0]
 8005cca:	60c7      	str	r7, [r0, #12]
 8005ccc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005cd0:	6819      	ldr	r1, [r3, #0]
 8005cd2:	b159      	cbz	r1, 8005cec <_dtoa_r+0x5c>
 8005cd4:	685a      	ldr	r2, [r3, #4]
 8005cd6:	604a      	str	r2, [r1, #4]
 8005cd8:	2301      	movs	r3, #1
 8005cda:	4093      	lsls	r3, r2
 8005cdc:	608b      	str	r3, [r1, #8]
 8005cde:	4658      	mov	r0, fp
 8005ce0:	f000 feda 	bl	8006a98 <_Bfree>
 8005ce4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	601a      	str	r2, [r3, #0]
 8005cec:	1e2b      	subs	r3, r5, #0
 8005cee:	bfb9      	ittee	lt
 8005cf0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005cf4:	9303      	strlt	r3, [sp, #12]
 8005cf6:	2300      	movge	r3, #0
 8005cf8:	6033      	strge	r3, [r6, #0]
 8005cfa:	9f03      	ldr	r7, [sp, #12]
 8005cfc:	4b98      	ldr	r3, [pc, #608]	@ (8005f60 <_dtoa_r+0x2d0>)
 8005cfe:	bfbc      	itt	lt
 8005d00:	2201      	movlt	r2, #1
 8005d02:	6032      	strlt	r2, [r6, #0]
 8005d04:	43bb      	bics	r3, r7
 8005d06:	d112      	bne.n	8005d2e <_dtoa_r+0x9e>
 8005d08:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005d0a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005d0e:	6013      	str	r3, [r2, #0]
 8005d10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005d14:	4323      	orrs	r3, r4
 8005d16:	f000 854d 	beq.w	80067b4 <_dtoa_r+0xb24>
 8005d1a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005d1c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005f74 <_dtoa_r+0x2e4>
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f000 854f 	beq.w	80067c4 <_dtoa_r+0xb34>
 8005d26:	f10a 0303 	add.w	r3, sl, #3
 8005d2a:	f000 bd49 	b.w	80067c0 <_dtoa_r+0xb30>
 8005d2e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005d32:	2200      	movs	r2, #0
 8005d34:	ec51 0b17 	vmov	r0, r1, d7
 8005d38:	2300      	movs	r3, #0
 8005d3a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005d3e:	f7fa fecb 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d42:	4680      	mov	r8, r0
 8005d44:	b158      	cbz	r0, 8005d5e <_dtoa_r+0xce>
 8005d46:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005d48:	2301      	movs	r3, #1
 8005d4a:	6013      	str	r3, [r2, #0]
 8005d4c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005d4e:	b113      	cbz	r3, 8005d56 <_dtoa_r+0xc6>
 8005d50:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005d52:	4b84      	ldr	r3, [pc, #528]	@ (8005f64 <_dtoa_r+0x2d4>)
 8005d54:	6013      	str	r3, [r2, #0]
 8005d56:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005f78 <_dtoa_r+0x2e8>
 8005d5a:	f000 bd33 	b.w	80067c4 <_dtoa_r+0xb34>
 8005d5e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005d62:	aa16      	add	r2, sp, #88	@ 0x58
 8005d64:	a917      	add	r1, sp, #92	@ 0x5c
 8005d66:	4658      	mov	r0, fp
 8005d68:	f001 f980 	bl	800706c <__d2b>
 8005d6c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005d70:	4681      	mov	r9, r0
 8005d72:	2e00      	cmp	r6, #0
 8005d74:	d077      	beq.n	8005e66 <_dtoa_r+0x1d6>
 8005d76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d78:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005d7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005d84:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005d88:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005d8c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005d90:	4619      	mov	r1, r3
 8005d92:	2200      	movs	r2, #0
 8005d94:	4b74      	ldr	r3, [pc, #464]	@ (8005f68 <_dtoa_r+0x2d8>)
 8005d96:	f7fa fa7f 	bl	8000298 <__aeabi_dsub>
 8005d9a:	a369      	add	r3, pc, #420	@ (adr r3, 8005f40 <_dtoa_r+0x2b0>)
 8005d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da0:	f7fa fc32 	bl	8000608 <__aeabi_dmul>
 8005da4:	a368      	add	r3, pc, #416	@ (adr r3, 8005f48 <_dtoa_r+0x2b8>)
 8005da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005daa:	f7fa fa77 	bl	800029c <__adddf3>
 8005dae:	4604      	mov	r4, r0
 8005db0:	4630      	mov	r0, r6
 8005db2:	460d      	mov	r5, r1
 8005db4:	f7fa fbbe 	bl	8000534 <__aeabi_i2d>
 8005db8:	a365      	add	r3, pc, #404	@ (adr r3, 8005f50 <_dtoa_r+0x2c0>)
 8005dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dbe:	f7fa fc23 	bl	8000608 <__aeabi_dmul>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	4620      	mov	r0, r4
 8005dc8:	4629      	mov	r1, r5
 8005dca:	f7fa fa67 	bl	800029c <__adddf3>
 8005dce:	4604      	mov	r4, r0
 8005dd0:	460d      	mov	r5, r1
 8005dd2:	f7fa fec9 	bl	8000b68 <__aeabi_d2iz>
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	4607      	mov	r7, r0
 8005dda:	2300      	movs	r3, #0
 8005ddc:	4620      	mov	r0, r4
 8005dde:	4629      	mov	r1, r5
 8005de0:	f7fa fe84 	bl	8000aec <__aeabi_dcmplt>
 8005de4:	b140      	cbz	r0, 8005df8 <_dtoa_r+0x168>
 8005de6:	4638      	mov	r0, r7
 8005de8:	f7fa fba4 	bl	8000534 <__aeabi_i2d>
 8005dec:	4622      	mov	r2, r4
 8005dee:	462b      	mov	r3, r5
 8005df0:	f7fa fe72 	bl	8000ad8 <__aeabi_dcmpeq>
 8005df4:	b900      	cbnz	r0, 8005df8 <_dtoa_r+0x168>
 8005df6:	3f01      	subs	r7, #1
 8005df8:	2f16      	cmp	r7, #22
 8005dfa:	d851      	bhi.n	8005ea0 <_dtoa_r+0x210>
 8005dfc:	4b5b      	ldr	r3, [pc, #364]	@ (8005f6c <_dtoa_r+0x2dc>)
 8005dfe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005e0a:	f7fa fe6f 	bl	8000aec <__aeabi_dcmplt>
 8005e0e:	2800      	cmp	r0, #0
 8005e10:	d048      	beq.n	8005ea4 <_dtoa_r+0x214>
 8005e12:	3f01      	subs	r7, #1
 8005e14:	2300      	movs	r3, #0
 8005e16:	9312      	str	r3, [sp, #72]	@ 0x48
 8005e18:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005e1a:	1b9b      	subs	r3, r3, r6
 8005e1c:	1e5a      	subs	r2, r3, #1
 8005e1e:	bf44      	itt	mi
 8005e20:	f1c3 0801 	rsbmi	r8, r3, #1
 8005e24:	2300      	movmi	r3, #0
 8005e26:	9208      	str	r2, [sp, #32]
 8005e28:	bf54      	ite	pl
 8005e2a:	f04f 0800 	movpl.w	r8, #0
 8005e2e:	9308      	strmi	r3, [sp, #32]
 8005e30:	2f00      	cmp	r7, #0
 8005e32:	db39      	blt.n	8005ea8 <_dtoa_r+0x218>
 8005e34:	9b08      	ldr	r3, [sp, #32]
 8005e36:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005e38:	443b      	add	r3, r7
 8005e3a:	9308      	str	r3, [sp, #32]
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e42:	2b09      	cmp	r3, #9
 8005e44:	d864      	bhi.n	8005f10 <_dtoa_r+0x280>
 8005e46:	2b05      	cmp	r3, #5
 8005e48:	bfc4      	itt	gt
 8005e4a:	3b04      	subgt	r3, #4
 8005e4c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005e4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e50:	f1a3 0302 	sub.w	r3, r3, #2
 8005e54:	bfcc      	ite	gt
 8005e56:	2400      	movgt	r4, #0
 8005e58:	2401      	movle	r4, #1
 8005e5a:	2b03      	cmp	r3, #3
 8005e5c:	d863      	bhi.n	8005f26 <_dtoa_r+0x296>
 8005e5e:	e8df f003 	tbb	[pc, r3]
 8005e62:	372a      	.short	0x372a
 8005e64:	5535      	.short	0x5535
 8005e66:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005e6a:	441e      	add	r6, r3
 8005e6c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005e70:	2b20      	cmp	r3, #32
 8005e72:	bfc1      	itttt	gt
 8005e74:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005e78:	409f      	lslgt	r7, r3
 8005e7a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005e7e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005e82:	bfd6      	itet	le
 8005e84:	f1c3 0320 	rsble	r3, r3, #32
 8005e88:	ea47 0003 	orrgt.w	r0, r7, r3
 8005e8c:	fa04 f003 	lslle.w	r0, r4, r3
 8005e90:	f7fa fb40 	bl	8000514 <__aeabi_ui2d>
 8005e94:	2201      	movs	r2, #1
 8005e96:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005e9a:	3e01      	subs	r6, #1
 8005e9c:	9214      	str	r2, [sp, #80]	@ 0x50
 8005e9e:	e777      	b.n	8005d90 <_dtoa_r+0x100>
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e7b8      	b.n	8005e16 <_dtoa_r+0x186>
 8005ea4:	9012      	str	r0, [sp, #72]	@ 0x48
 8005ea6:	e7b7      	b.n	8005e18 <_dtoa_r+0x188>
 8005ea8:	427b      	negs	r3, r7
 8005eaa:	930a      	str	r3, [sp, #40]	@ 0x28
 8005eac:	2300      	movs	r3, #0
 8005eae:	eba8 0807 	sub.w	r8, r8, r7
 8005eb2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005eb4:	e7c4      	b.n	8005e40 <_dtoa_r+0x1b0>
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005eba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	dc35      	bgt.n	8005f2c <_dtoa_r+0x29c>
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	9300      	str	r3, [sp, #0]
 8005ec4:	9307      	str	r3, [sp, #28]
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	920e      	str	r2, [sp, #56]	@ 0x38
 8005eca:	e00b      	b.n	8005ee4 <_dtoa_r+0x254>
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e7f3      	b.n	8005eb8 <_dtoa_r+0x228>
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005ed4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ed6:	18fb      	adds	r3, r7, r3
 8005ed8:	9300      	str	r3, [sp, #0]
 8005eda:	3301      	adds	r3, #1
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	9307      	str	r3, [sp, #28]
 8005ee0:	bfb8      	it	lt
 8005ee2:	2301      	movlt	r3, #1
 8005ee4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005ee8:	2100      	movs	r1, #0
 8005eea:	2204      	movs	r2, #4
 8005eec:	f102 0514 	add.w	r5, r2, #20
 8005ef0:	429d      	cmp	r5, r3
 8005ef2:	d91f      	bls.n	8005f34 <_dtoa_r+0x2a4>
 8005ef4:	6041      	str	r1, [r0, #4]
 8005ef6:	4658      	mov	r0, fp
 8005ef8:	f000 fd8e 	bl	8006a18 <_Balloc>
 8005efc:	4682      	mov	sl, r0
 8005efe:	2800      	cmp	r0, #0
 8005f00:	d13c      	bne.n	8005f7c <_dtoa_r+0x2ec>
 8005f02:	4b1b      	ldr	r3, [pc, #108]	@ (8005f70 <_dtoa_r+0x2e0>)
 8005f04:	4602      	mov	r2, r0
 8005f06:	f240 11af 	movw	r1, #431	@ 0x1af
 8005f0a:	e6d8      	b.n	8005cbe <_dtoa_r+0x2e>
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e7e0      	b.n	8005ed2 <_dtoa_r+0x242>
 8005f10:	2401      	movs	r4, #1
 8005f12:	2300      	movs	r3, #0
 8005f14:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f16:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005f18:	f04f 33ff 	mov.w	r3, #4294967295
 8005f1c:	9300      	str	r3, [sp, #0]
 8005f1e:	9307      	str	r3, [sp, #28]
 8005f20:	2200      	movs	r2, #0
 8005f22:	2312      	movs	r3, #18
 8005f24:	e7d0      	b.n	8005ec8 <_dtoa_r+0x238>
 8005f26:	2301      	movs	r3, #1
 8005f28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f2a:	e7f5      	b.n	8005f18 <_dtoa_r+0x288>
 8005f2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005f2e:	9300      	str	r3, [sp, #0]
 8005f30:	9307      	str	r3, [sp, #28]
 8005f32:	e7d7      	b.n	8005ee4 <_dtoa_r+0x254>
 8005f34:	3101      	adds	r1, #1
 8005f36:	0052      	lsls	r2, r2, #1
 8005f38:	e7d8      	b.n	8005eec <_dtoa_r+0x25c>
 8005f3a:	bf00      	nop
 8005f3c:	f3af 8000 	nop.w
 8005f40:	636f4361 	.word	0x636f4361
 8005f44:	3fd287a7 	.word	0x3fd287a7
 8005f48:	8b60c8b3 	.word	0x8b60c8b3
 8005f4c:	3fc68a28 	.word	0x3fc68a28
 8005f50:	509f79fb 	.word	0x509f79fb
 8005f54:	3fd34413 	.word	0x3fd34413
 8005f58:	08007ce1 	.word	0x08007ce1
 8005f5c:	08007cf8 	.word	0x08007cf8
 8005f60:	7ff00000 	.word	0x7ff00000
 8005f64:	08007cb1 	.word	0x08007cb1
 8005f68:	3ff80000 	.word	0x3ff80000
 8005f6c:	08007df0 	.word	0x08007df0
 8005f70:	08007d50 	.word	0x08007d50
 8005f74:	08007cdd 	.word	0x08007cdd
 8005f78:	08007cb0 	.word	0x08007cb0
 8005f7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005f80:	6018      	str	r0, [r3, #0]
 8005f82:	9b07      	ldr	r3, [sp, #28]
 8005f84:	2b0e      	cmp	r3, #14
 8005f86:	f200 80a4 	bhi.w	80060d2 <_dtoa_r+0x442>
 8005f8a:	2c00      	cmp	r4, #0
 8005f8c:	f000 80a1 	beq.w	80060d2 <_dtoa_r+0x442>
 8005f90:	2f00      	cmp	r7, #0
 8005f92:	dd33      	ble.n	8005ffc <_dtoa_r+0x36c>
 8005f94:	4bad      	ldr	r3, [pc, #692]	@ (800624c <_dtoa_r+0x5bc>)
 8005f96:	f007 020f 	and.w	r2, r7, #15
 8005f9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f9e:	ed93 7b00 	vldr	d7, [r3]
 8005fa2:	05f8      	lsls	r0, r7, #23
 8005fa4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005fa8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005fac:	d516      	bpl.n	8005fdc <_dtoa_r+0x34c>
 8005fae:	4ba8      	ldr	r3, [pc, #672]	@ (8006250 <_dtoa_r+0x5c0>)
 8005fb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005fb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005fb8:	f7fa fc50 	bl	800085c <__aeabi_ddiv>
 8005fbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fc0:	f004 040f 	and.w	r4, r4, #15
 8005fc4:	2603      	movs	r6, #3
 8005fc6:	4da2      	ldr	r5, [pc, #648]	@ (8006250 <_dtoa_r+0x5c0>)
 8005fc8:	b954      	cbnz	r4, 8005fe0 <_dtoa_r+0x350>
 8005fca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fd2:	f7fa fc43 	bl	800085c <__aeabi_ddiv>
 8005fd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fda:	e028      	b.n	800602e <_dtoa_r+0x39e>
 8005fdc:	2602      	movs	r6, #2
 8005fde:	e7f2      	b.n	8005fc6 <_dtoa_r+0x336>
 8005fe0:	07e1      	lsls	r1, r4, #31
 8005fe2:	d508      	bpl.n	8005ff6 <_dtoa_r+0x366>
 8005fe4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fe8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005fec:	f7fa fb0c 	bl	8000608 <__aeabi_dmul>
 8005ff0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ff4:	3601      	adds	r6, #1
 8005ff6:	1064      	asrs	r4, r4, #1
 8005ff8:	3508      	adds	r5, #8
 8005ffa:	e7e5      	b.n	8005fc8 <_dtoa_r+0x338>
 8005ffc:	f000 80d2 	beq.w	80061a4 <_dtoa_r+0x514>
 8006000:	427c      	negs	r4, r7
 8006002:	4b92      	ldr	r3, [pc, #584]	@ (800624c <_dtoa_r+0x5bc>)
 8006004:	4d92      	ldr	r5, [pc, #584]	@ (8006250 <_dtoa_r+0x5c0>)
 8006006:	f004 020f 	and.w	r2, r4, #15
 800600a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800600e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006012:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006016:	f7fa faf7 	bl	8000608 <__aeabi_dmul>
 800601a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800601e:	1124      	asrs	r4, r4, #4
 8006020:	2300      	movs	r3, #0
 8006022:	2602      	movs	r6, #2
 8006024:	2c00      	cmp	r4, #0
 8006026:	f040 80b2 	bne.w	800618e <_dtoa_r+0x4fe>
 800602a:	2b00      	cmp	r3, #0
 800602c:	d1d3      	bne.n	8005fd6 <_dtoa_r+0x346>
 800602e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006030:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006034:	2b00      	cmp	r3, #0
 8006036:	f000 80b7 	beq.w	80061a8 <_dtoa_r+0x518>
 800603a:	4b86      	ldr	r3, [pc, #536]	@ (8006254 <_dtoa_r+0x5c4>)
 800603c:	2200      	movs	r2, #0
 800603e:	4620      	mov	r0, r4
 8006040:	4629      	mov	r1, r5
 8006042:	f7fa fd53 	bl	8000aec <__aeabi_dcmplt>
 8006046:	2800      	cmp	r0, #0
 8006048:	f000 80ae 	beq.w	80061a8 <_dtoa_r+0x518>
 800604c:	9b07      	ldr	r3, [sp, #28]
 800604e:	2b00      	cmp	r3, #0
 8006050:	f000 80aa 	beq.w	80061a8 <_dtoa_r+0x518>
 8006054:	9b00      	ldr	r3, [sp, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	dd37      	ble.n	80060ca <_dtoa_r+0x43a>
 800605a:	1e7b      	subs	r3, r7, #1
 800605c:	9304      	str	r3, [sp, #16]
 800605e:	4620      	mov	r0, r4
 8006060:	4b7d      	ldr	r3, [pc, #500]	@ (8006258 <_dtoa_r+0x5c8>)
 8006062:	2200      	movs	r2, #0
 8006064:	4629      	mov	r1, r5
 8006066:	f7fa facf 	bl	8000608 <__aeabi_dmul>
 800606a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800606e:	9c00      	ldr	r4, [sp, #0]
 8006070:	3601      	adds	r6, #1
 8006072:	4630      	mov	r0, r6
 8006074:	f7fa fa5e 	bl	8000534 <__aeabi_i2d>
 8006078:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800607c:	f7fa fac4 	bl	8000608 <__aeabi_dmul>
 8006080:	4b76      	ldr	r3, [pc, #472]	@ (800625c <_dtoa_r+0x5cc>)
 8006082:	2200      	movs	r2, #0
 8006084:	f7fa f90a 	bl	800029c <__adddf3>
 8006088:	4605      	mov	r5, r0
 800608a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800608e:	2c00      	cmp	r4, #0
 8006090:	f040 808d 	bne.w	80061ae <_dtoa_r+0x51e>
 8006094:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006098:	4b71      	ldr	r3, [pc, #452]	@ (8006260 <_dtoa_r+0x5d0>)
 800609a:	2200      	movs	r2, #0
 800609c:	f7fa f8fc 	bl	8000298 <__aeabi_dsub>
 80060a0:	4602      	mov	r2, r0
 80060a2:	460b      	mov	r3, r1
 80060a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80060a8:	462a      	mov	r2, r5
 80060aa:	4633      	mov	r3, r6
 80060ac:	f7fa fd3c 	bl	8000b28 <__aeabi_dcmpgt>
 80060b0:	2800      	cmp	r0, #0
 80060b2:	f040 828b 	bne.w	80065cc <_dtoa_r+0x93c>
 80060b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060ba:	462a      	mov	r2, r5
 80060bc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80060c0:	f7fa fd14 	bl	8000aec <__aeabi_dcmplt>
 80060c4:	2800      	cmp	r0, #0
 80060c6:	f040 8128 	bne.w	800631a <_dtoa_r+0x68a>
 80060ca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80060ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80060d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	f2c0 815a 	blt.w	800638e <_dtoa_r+0x6fe>
 80060da:	2f0e      	cmp	r7, #14
 80060dc:	f300 8157 	bgt.w	800638e <_dtoa_r+0x6fe>
 80060e0:	4b5a      	ldr	r3, [pc, #360]	@ (800624c <_dtoa_r+0x5bc>)
 80060e2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80060e6:	ed93 7b00 	vldr	d7, [r3]
 80060ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	ed8d 7b00 	vstr	d7, [sp]
 80060f2:	da03      	bge.n	80060fc <_dtoa_r+0x46c>
 80060f4:	9b07      	ldr	r3, [sp, #28]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	f340 8101 	ble.w	80062fe <_dtoa_r+0x66e>
 80060fc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006100:	4656      	mov	r6, sl
 8006102:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006106:	4620      	mov	r0, r4
 8006108:	4629      	mov	r1, r5
 800610a:	f7fa fba7 	bl	800085c <__aeabi_ddiv>
 800610e:	f7fa fd2b 	bl	8000b68 <__aeabi_d2iz>
 8006112:	4680      	mov	r8, r0
 8006114:	f7fa fa0e 	bl	8000534 <__aeabi_i2d>
 8006118:	e9dd 2300 	ldrd	r2, r3, [sp]
 800611c:	f7fa fa74 	bl	8000608 <__aeabi_dmul>
 8006120:	4602      	mov	r2, r0
 8006122:	460b      	mov	r3, r1
 8006124:	4620      	mov	r0, r4
 8006126:	4629      	mov	r1, r5
 8006128:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800612c:	f7fa f8b4 	bl	8000298 <__aeabi_dsub>
 8006130:	f806 4b01 	strb.w	r4, [r6], #1
 8006134:	9d07      	ldr	r5, [sp, #28]
 8006136:	eba6 040a 	sub.w	r4, r6, sl
 800613a:	42a5      	cmp	r5, r4
 800613c:	4602      	mov	r2, r0
 800613e:	460b      	mov	r3, r1
 8006140:	f040 8117 	bne.w	8006372 <_dtoa_r+0x6e2>
 8006144:	f7fa f8aa 	bl	800029c <__adddf3>
 8006148:	e9dd 2300 	ldrd	r2, r3, [sp]
 800614c:	4604      	mov	r4, r0
 800614e:	460d      	mov	r5, r1
 8006150:	f7fa fcea 	bl	8000b28 <__aeabi_dcmpgt>
 8006154:	2800      	cmp	r0, #0
 8006156:	f040 80f9 	bne.w	800634c <_dtoa_r+0x6bc>
 800615a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800615e:	4620      	mov	r0, r4
 8006160:	4629      	mov	r1, r5
 8006162:	f7fa fcb9 	bl	8000ad8 <__aeabi_dcmpeq>
 8006166:	b118      	cbz	r0, 8006170 <_dtoa_r+0x4e0>
 8006168:	f018 0f01 	tst.w	r8, #1
 800616c:	f040 80ee 	bne.w	800634c <_dtoa_r+0x6bc>
 8006170:	4649      	mov	r1, r9
 8006172:	4658      	mov	r0, fp
 8006174:	f000 fc90 	bl	8006a98 <_Bfree>
 8006178:	2300      	movs	r3, #0
 800617a:	7033      	strb	r3, [r6, #0]
 800617c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800617e:	3701      	adds	r7, #1
 8006180:	601f      	str	r7, [r3, #0]
 8006182:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006184:	2b00      	cmp	r3, #0
 8006186:	f000 831d 	beq.w	80067c4 <_dtoa_r+0xb34>
 800618a:	601e      	str	r6, [r3, #0]
 800618c:	e31a      	b.n	80067c4 <_dtoa_r+0xb34>
 800618e:	07e2      	lsls	r2, r4, #31
 8006190:	d505      	bpl.n	800619e <_dtoa_r+0x50e>
 8006192:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006196:	f7fa fa37 	bl	8000608 <__aeabi_dmul>
 800619a:	3601      	adds	r6, #1
 800619c:	2301      	movs	r3, #1
 800619e:	1064      	asrs	r4, r4, #1
 80061a0:	3508      	adds	r5, #8
 80061a2:	e73f      	b.n	8006024 <_dtoa_r+0x394>
 80061a4:	2602      	movs	r6, #2
 80061a6:	e742      	b.n	800602e <_dtoa_r+0x39e>
 80061a8:	9c07      	ldr	r4, [sp, #28]
 80061aa:	9704      	str	r7, [sp, #16]
 80061ac:	e761      	b.n	8006072 <_dtoa_r+0x3e2>
 80061ae:	4b27      	ldr	r3, [pc, #156]	@ (800624c <_dtoa_r+0x5bc>)
 80061b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80061b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80061b6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80061ba:	4454      	add	r4, sl
 80061bc:	2900      	cmp	r1, #0
 80061be:	d053      	beq.n	8006268 <_dtoa_r+0x5d8>
 80061c0:	4928      	ldr	r1, [pc, #160]	@ (8006264 <_dtoa_r+0x5d4>)
 80061c2:	2000      	movs	r0, #0
 80061c4:	f7fa fb4a 	bl	800085c <__aeabi_ddiv>
 80061c8:	4633      	mov	r3, r6
 80061ca:	462a      	mov	r2, r5
 80061cc:	f7fa f864 	bl	8000298 <__aeabi_dsub>
 80061d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80061d4:	4656      	mov	r6, sl
 80061d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061da:	f7fa fcc5 	bl	8000b68 <__aeabi_d2iz>
 80061de:	4605      	mov	r5, r0
 80061e0:	f7fa f9a8 	bl	8000534 <__aeabi_i2d>
 80061e4:	4602      	mov	r2, r0
 80061e6:	460b      	mov	r3, r1
 80061e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061ec:	f7fa f854 	bl	8000298 <__aeabi_dsub>
 80061f0:	3530      	adds	r5, #48	@ 0x30
 80061f2:	4602      	mov	r2, r0
 80061f4:	460b      	mov	r3, r1
 80061f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80061fa:	f806 5b01 	strb.w	r5, [r6], #1
 80061fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006202:	f7fa fc73 	bl	8000aec <__aeabi_dcmplt>
 8006206:	2800      	cmp	r0, #0
 8006208:	d171      	bne.n	80062ee <_dtoa_r+0x65e>
 800620a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800620e:	4911      	ldr	r1, [pc, #68]	@ (8006254 <_dtoa_r+0x5c4>)
 8006210:	2000      	movs	r0, #0
 8006212:	f7fa f841 	bl	8000298 <__aeabi_dsub>
 8006216:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800621a:	f7fa fc67 	bl	8000aec <__aeabi_dcmplt>
 800621e:	2800      	cmp	r0, #0
 8006220:	f040 8095 	bne.w	800634e <_dtoa_r+0x6be>
 8006224:	42a6      	cmp	r6, r4
 8006226:	f43f af50 	beq.w	80060ca <_dtoa_r+0x43a>
 800622a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800622e:	4b0a      	ldr	r3, [pc, #40]	@ (8006258 <_dtoa_r+0x5c8>)
 8006230:	2200      	movs	r2, #0
 8006232:	f7fa f9e9 	bl	8000608 <__aeabi_dmul>
 8006236:	4b08      	ldr	r3, [pc, #32]	@ (8006258 <_dtoa_r+0x5c8>)
 8006238:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800623c:	2200      	movs	r2, #0
 800623e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006242:	f7fa f9e1 	bl	8000608 <__aeabi_dmul>
 8006246:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800624a:	e7c4      	b.n	80061d6 <_dtoa_r+0x546>
 800624c:	08007df0 	.word	0x08007df0
 8006250:	08007dc8 	.word	0x08007dc8
 8006254:	3ff00000 	.word	0x3ff00000
 8006258:	40240000 	.word	0x40240000
 800625c:	401c0000 	.word	0x401c0000
 8006260:	40140000 	.word	0x40140000
 8006264:	3fe00000 	.word	0x3fe00000
 8006268:	4631      	mov	r1, r6
 800626a:	4628      	mov	r0, r5
 800626c:	f7fa f9cc 	bl	8000608 <__aeabi_dmul>
 8006270:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006274:	9415      	str	r4, [sp, #84]	@ 0x54
 8006276:	4656      	mov	r6, sl
 8006278:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800627c:	f7fa fc74 	bl	8000b68 <__aeabi_d2iz>
 8006280:	4605      	mov	r5, r0
 8006282:	f7fa f957 	bl	8000534 <__aeabi_i2d>
 8006286:	4602      	mov	r2, r0
 8006288:	460b      	mov	r3, r1
 800628a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800628e:	f7fa f803 	bl	8000298 <__aeabi_dsub>
 8006292:	3530      	adds	r5, #48	@ 0x30
 8006294:	f806 5b01 	strb.w	r5, [r6], #1
 8006298:	4602      	mov	r2, r0
 800629a:	460b      	mov	r3, r1
 800629c:	42a6      	cmp	r6, r4
 800629e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80062a2:	f04f 0200 	mov.w	r2, #0
 80062a6:	d124      	bne.n	80062f2 <_dtoa_r+0x662>
 80062a8:	4bac      	ldr	r3, [pc, #688]	@ (800655c <_dtoa_r+0x8cc>)
 80062aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80062ae:	f7f9 fff5 	bl	800029c <__adddf3>
 80062b2:	4602      	mov	r2, r0
 80062b4:	460b      	mov	r3, r1
 80062b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062ba:	f7fa fc35 	bl	8000b28 <__aeabi_dcmpgt>
 80062be:	2800      	cmp	r0, #0
 80062c0:	d145      	bne.n	800634e <_dtoa_r+0x6be>
 80062c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80062c6:	49a5      	ldr	r1, [pc, #660]	@ (800655c <_dtoa_r+0x8cc>)
 80062c8:	2000      	movs	r0, #0
 80062ca:	f7f9 ffe5 	bl	8000298 <__aeabi_dsub>
 80062ce:	4602      	mov	r2, r0
 80062d0:	460b      	mov	r3, r1
 80062d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062d6:	f7fa fc09 	bl	8000aec <__aeabi_dcmplt>
 80062da:	2800      	cmp	r0, #0
 80062dc:	f43f aef5 	beq.w	80060ca <_dtoa_r+0x43a>
 80062e0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80062e2:	1e73      	subs	r3, r6, #1
 80062e4:	9315      	str	r3, [sp, #84]	@ 0x54
 80062e6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80062ea:	2b30      	cmp	r3, #48	@ 0x30
 80062ec:	d0f8      	beq.n	80062e0 <_dtoa_r+0x650>
 80062ee:	9f04      	ldr	r7, [sp, #16]
 80062f0:	e73e      	b.n	8006170 <_dtoa_r+0x4e0>
 80062f2:	4b9b      	ldr	r3, [pc, #620]	@ (8006560 <_dtoa_r+0x8d0>)
 80062f4:	f7fa f988 	bl	8000608 <__aeabi_dmul>
 80062f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062fc:	e7bc      	b.n	8006278 <_dtoa_r+0x5e8>
 80062fe:	d10c      	bne.n	800631a <_dtoa_r+0x68a>
 8006300:	4b98      	ldr	r3, [pc, #608]	@ (8006564 <_dtoa_r+0x8d4>)
 8006302:	2200      	movs	r2, #0
 8006304:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006308:	f7fa f97e 	bl	8000608 <__aeabi_dmul>
 800630c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006310:	f7fa fc00 	bl	8000b14 <__aeabi_dcmpge>
 8006314:	2800      	cmp	r0, #0
 8006316:	f000 8157 	beq.w	80065c8 <_dtoa_r+0x938>
 800631a:	2400      	movs	r4, #0
 800631c:	4625      	mov	r5, r4
 800631e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006320:	43db      	mvns	r3, r3
 8006322:	9304      	str	r3, [sp, #16]
 8006324:	4656      	mov	r6, sl
 8006326:	2700      	movs	r7, #0
 8006328:	4621      	mov	r1, r4
 800632a:	4658      	mov	r0, fp
 800632c:	f000 fbb4 	bl	8006a98 <_Bfree>
 8006330:	2d00      	cmp	r5, #0
 8006332:	d0dc      	beq.n	80062ee <_dtoa_r+0x65e>
 8006334:	b12f      	cbz	r7, 8006342 <_dtoa_r+0x6b2>
 8006336:	42af      	cmp	r7, r5
 8006338:	d003      	beq.n	8006342 <_dtoa_r+0x6b2>
 800633a:	4639      	mov	r1, r7
 800633c:	4658      	mov	r0, fp
 800633e:	f000 fbab 	bl	8006a98 <_Bfree>
 8006342:	4629      	mov	r1, r5
 8006344:	4658      	mov	r0, fp
 8006346:	f000 fba7 	bl	8006a98 <_Bfree>
 800634a:	e7d0      	b.n	80062ee <_dtoa_r+0x65e>
 800634c:	9704      	str	r7, [sp, #16]
 800634e:	4633      	mov	r3, r6
 8006350:	461e      	mov	r6, r3
 8006352:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006356:	2a39      	cmp	r2, #57	@ 0x39
 8006358:	d107      	bne.n	800636a <_dtoa_r+0x6da>
 800635a:	459a      	cmp	sl, r3
 800635c:	d1f8      	bne.n	8006350 <_dtoa_r+0x6c0>
 800635e:	9a04      	ldr	r2, [sp, #16]
 8006360:	3201      	adds	r2, #1
 8006362:	9204      	str	r2, [sp, #16]
 8006364:	2230      	movs	r2, #48	@ 0x30
 8006366:	f88a 2000 	strb.w	r2, [sl]
 800636a:	781a      	ldrb	r2, [r3, #0]
 800636c:	3201      	adds	r2, #1
 800636e:	701a      	strb	r2, [r3, #0]
 8006370:	e7bd      	b.n	80062ee <_dtoa_r+0x65e>
 8006372:	4b7b      	ldr	r3, [pc, #492]	@ (8006560 <_dtoa_r+0x8d0>)
 8006374:	2200      	movs	r2, #0
 8006376:	f7fa f947 	bl	8000608 <__aeabi_dmul>
 800637a:	2200      	movs	r2, #0
 800637c:	2300      	movs	r3, #0
 800637e:	4604      	mov	r4, r0
 8006380:	460d      	mov	r5, r1
 8006382:	f7fa fba9 	bl	8000ad8 <__aeabi_dcmpeq>
 8006386:	2800      	cmp	r0, #0
 8006388:	f43f aebb 	beq.w	8006102 <_dtoa_r+0x472>
 800638c:	e6f0      	b.n	8006170 <_dtoa_r+0x4e0>
 800638e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006390:	2a00      	cmp	r2, #0
 8006392:	f000 80db 	beq.w	800654c <_dtoa_r+0x8bc>
 8006396:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006398:	2a01      	cmp	r2, #1
 800639a:	f300 80bf 	bgt.w	800651c <_dtoa_r+0x88c>
 800639e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80063a0:	2a00      	cmp	r2, #0
 80063a2:	f000 80b7 	beq.w	8006514 <_dtoa_r+0x884>
 80063a6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80063aa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80063ac:	4646      	mov	r6, r8
 80063ae:	9a08      	ldr	r2, [sp, #32]
 80063b0:	2101      	movs	r1, #1
 80063b2:	441a      	add	r2, r3
 80063b4:	4658      	mov	r0, fp
 80063b6:	4498      	add	r8, r3
 80063b8:	9208      	str	r2, [sp, #32]
 80063ba:	f000 fc21 	bl	8006c00 <__i2b>
 80063be:	4605      	mov	r5, r0
 80063c0:	b15e      	cbz	r6, 80063da <_dtoa_r+0x74a>
 80063c2:	9b08      	ldr	r3, [sp, #32]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	dd08      	ble.n	80063da <_dtoa_r+0x74a>
 80063c8:	42b3      	cmp	r3, r6
 80063ca:	9a08      	ldr	r2, [sp, #32]
 80063cc:	bfa8      	it	ge
 80063ce:	4633      	movge	r3, r6
 80063d0:	eba8 0803 	sub.w	r8, r8, r3
 80063d4:	1af6      	subs	r6, r6, r3
 80063d6:	1ad3      	subs	r3, r2, r3
 80063d8:	9308      	str	r3, [sp, #32]
 80063da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80063dc:	b1f3      	cbz	r3, 800641c <_dtoa_r+0x78c>
 80063de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f000 80b7 	beq.w	8006554 <_dtoa_r+0x8c4>
 80063e6:	b18c      	cbz	r4, 800640c <_dtoa_r+0x77c>
 80063e8:	4629      	mov	r1, r5
 80063ea:	4622      	mov	r2, r4
 80063ec:	4658      	mov	r0, fp
 80063ee:	f000 fcc7 	bl	8006d80 <__pow5mult>
 80063f2:	464a      	mov	r2, r9
 80063f4:	4601      	mov	r1, r0
 80063f6:	4605      	mov	r5, r0
 80063f8:	4658      	mov	r0, fp
 80063fa:	f000 fc17 	bl	8006c2c <__multiply>
 80063fe:	4649      	mov	r1, r9
 8006400:	9004      	str	r0, [sp, #16]
 8006402:	4658      	mov	r0, fp
 8006404:	f000 fb48 	bl	8006a98 <_Bfree>
 8006408:	9b04      	ldr	r3, [sp, #16]
 800640a:	4699      	mov	r9, r3
 800640c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800640e:	1b1a      	subs	r2, r3, r4
 8006410:	d004      	beq.n	800641c <_dtoa_r+0x78c>
 8006412:	4649      	mov	r1, r9
 8006414:	4658      	mov	r0, fp
 8006416:	f000 fcb3 	bl	8006d80 <__pow5mult>
 800641a:	4681      	mov	r9, r0
 800641c:	2101      	movs	r1, #1
 800641e:	4658      	mov	r0, fp
 8006420:	f000 fbee 	bl	8006c00 <__i2b>
 8006424:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006426:	4604      	mov	r4, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	f000 81cf 	beq.w	80067cc <_dtoa_r+0xb3c>
 800642e:	461a      	mov	r2, r3
 8006430:	4601      	mov	r1, r0
 8006432:	4658      	mov	r0, fp
 8006434:	f000 fca4 	bl	8006d80 <__pow5mult>
 8006438:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800643a:	2b01      	cmp	r3, #1
 800643c:	4604      	mov	r4, r0
 800643e:	f300 8095 	bgt.w	800656c <_dtoa_r+0x8dc>
 8006442:	9b02      	ldr	r3, [sp, #8]
 8006444:	2b00      	cmp	r3, #0
 8006446:	f040 8087 	bne.w	8006558 <_dtoa_r+0x8c8>
 800644a:	9b03      	ldr	r3, [sp, #12]
 800644c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006450:	2b00      	cmp	r3, #0
 8006452:	f040 8089 	bne.w	8006568 <_dtoa_r+0x8d8>
 8006456:	9b03      	ldr	r3, [sp, #12]
 8006458:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800645c:	0d1b      	lsrs	r3, r3, #20
 800645e:	051b      	lsls	r3, r3, #20
 8006460:	b12b      	cbz	r3, 800646e <_dtoa_r+0x7de>
 8006462:	9b08      	ldr	r3, [sp, #32]
 8006464:	3301      	adds	r3, #1
 8006466:	9308      	str	r3, [sp, #32]
 8006468:	f108 0801 	add.w	r8, r8, #1
 800646c:	2301      	movs	r3, #1
 800646e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006470:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006472:	2b00      	cmp	r3, #0
 8006474:	f000 81b0 	beq.w	80067d8 <_dtoa_r+0xb48>
 8006478:	6923      	ldr	r3, [r4, #16]
 800647a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800647e:	6918      	ldr	r0, [r3, #16]
 8006480:	f000 fb72 	bl	8006b68 <__hi0bits>
 8006484:	f1c0 0020 	rsb	r0, r0, #32
 8006488:	9b08      	ldr	r3, [sp, #32]
 800648a:	4418      	add	r0, r3
 800648c:	f010 001f 	ands.w	r0, r0, #31
 8006490:	d077      	beq.n	8006582 <_dtoa_r+0x8f2>
 8006492:	f1c0 0320 	rsb	r3, r0, #32
 8006496:	2b04      	cmp	r3, #4
 8006498:	dd6b      	ble.n	8006572 <_dtoa_r+0x8e2>
 800649a:	9b08      	ldr	r3, [sp, #32]
 800649c:	f1c0 001c 	rsb	r0, r0, #28
 80064a0:	4403      	add	r3, r0
 80064a2:	4480      	add	r8, r0
 80064a4:	4406      	add	r6, r0
 80064a6:	9308      	str	r3, [sp, #32]
 80064a8:	f1b8 0f00 	cmp.w	r8, #0
 80064ac:	dd05      	ble.n	80064ba <_dtoa_r+0x82a>
 80064ae:	4649      	mov	r1, r9
 80064b0:	4642      	mov	r2, r8
 80064b2:	4658      	mov	r0, fp
 80064b4:	f000 fcbe 	bl	8006e34 <__lshift>
 80064b8:	4681      	mov	r9, r0
 80064ba:	9b08      	ldr	r3, [sp, #32]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	dd05      	ble.n	80064cc <_dtoa_r+0x83c>
 80064c0:	4621      	mov	r1, r4
 80064c2:	461a      	mov	r2, r3
 80064c4:	4658      	mov	r0, fp
 80064c6:	f000 fcb5 	bl	8006e34 <__lshift>
 80064ca:	4604      	mov	r4, r0
 80064cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d059      	beq.n	8006586 <_dtoa_r+0x8f6>
 80064d2:	4621      	mov	r1, r4
 80064d4:	4648      	mov	r0, r9
 80064d6:	f000 fd19 	bl	8006f0c <__mcmp>
 80064da:	2800      	cmp	r0, #0
 80064dc:	da53      	bge.n	8006586 <_dtoa_r+0x8f6>
 80064de:	1e7b      	subs	r3, r7, #1
 80064e0:	9304      	str	r3, [sp, #16]
 80064e2:	4649      	mov	r1, r9
 80064e4:	2300      	movs	r3, #0
 80064e6:	220a      	movs	r2, #10
 80064e8:	4658      	mov	r0, fp
 80064ea:	f000 faf7 	bl	8006adc <__multadd>
 80064ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80064f0:	4681      	mov	r9, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	f000 8172 	beq.w	80067dc <_dtoa_r+0xb4c>
 80064f8:	2300      	movs	r3, #0
 80064fa:	4629      	mov	r1, r5
 80064fc:	220a      	movs	r2, #10
 80064fe:	4658      	mov	r0, fp
 8006500:	f000 faec 	bl	8006adc <__multadd>
 8006504:	9b00      	ldr	r3, [sp, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	4605      	mov	r5, r0
 800650a:	dc67      	bgt.n	80065dc <_dtoa_r+0x94c>
 800650c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800650e:	2b02      	cmp	r3, #2
 8006510:	dc41      	bgt.n	8006596 <_dtoa_r+0x906>
 8006512:	e063      	b.n	80065dc <_dtoa_r+0x94c>
 8006514:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006516:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800651a:	e746      	b.n	80063aa <_dtoa_r+0x71a>
 800651c:	9b07      	ldr	r3, [sp, #28]
 800651e:	1e5c      	subs	r4, r3, #1
 8006520:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006522:	42a3      	cmp	r3, r4
 8006524:	bfbf      	itttt	lt
 8006526:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006528:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800652a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800652c:	1ae3      	sublt	r3, r4, r3
 800652e:	bfb4      	ite	lt
 8006530:	18d2      	addlt	r2, r2, r3
 8006532:	1b1c      	subge	r4, r3, r4
 8006534:	9b07      	ldr	r3, [sp, #28]
 8006536:	bfbc      	itt	lt
 8006538:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800653a:	2400      	movlt	r4, #0
 800653c:	2b00      	cmp	r3, #0
 800653e:	bfb5      	itete	lt
 8006540:	eba8 0603 	sublt.w	r6, r8, r3
 8006544:	9b07      	ldrge	r3, [sp, #28]
 8006546:	2300      	movlt	r3, #0
 8006548:	4646      	movge	r6, r8
 800654a:	e730      	b.n	80063ae <_dtoa_r+0x71e>
 800654c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800654e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006550:	4646      	mov	r6, r8
 8006552:	e735      	b.n	80063c0 <_dtoa_r+0x730>
 8006554:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006556:	e75c      	b.n	8006412 <_dtoa_r+0x782>
 8006558:	2300      	movs	r3, #0
 800655a:	e788      	b.n	800646e <_dtoa_r+0x7de>
 800655c:	3fe00000 	.word	0x3fe00000
 8006560:	40240000 	.word	0x40240000
 8006564:	40140000 	.word	0x40140000
 8006568:	9b02      	ldr	r3, [sp, #8]
 800656a:	e780      	b.n	800646e <_dtoa_r+0x7de>
 800656c:	2300      	movs	r3, #0
 800656e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006570:	e782      	b.n	8006478 <_dtoa_r+0x7e8>
 8006572:	d099      	beq.n	80064a8 <_dtoa_r+0x818>
 8006574:	9a08      	ldr	r2, [sp, #32]
 8006576:	331c      	adds	r3, #28
 8006578:	441a      	add	r2, r3
 800657a:	4498      	add	r8, r3
 800657c:	441e      	add	r6, r3
 800657e:	9208      	str	r2, [sp, #32]
 8006580:	e792      	b.n	80064a8 <_dtoa_r+0x818>
 8006582:	4603      	mov	r3, r0
 8006584:	e7f6      	b.n	8006574 <_dtoa_r+0x8e4>
 8006586:	9b07      	ldr	r3, [sp, #28]
 8006588:	9704      	str	r7, [sp, #16]
 800658a:	2b00      	cmp	r3, #0
 800658c:	dc20      	bgt.n	80065d0 <_dtoa_r+0x940>
 800658e:	9300      	str	r3, [sp, #0]
 8006590:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006592:	2b02      	cmp	r3, #2
 8006594:	dd1e      	ble.n	80065d4 <_dtoa_r+0x944>
 8006596:	9b00      	ldr	r3, [sp, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	f47f aec0 	bne.w	800631e <_dtoa_r+0x68e>
 800659e:	4621      	mov	r1, r4
 80065a0:	2205      	movs	r2, #5
 80065a2:	4658      	mov	r0, fp
 80065a4:	f000 fa9a 	bl	8006adc <__multadd>
 80065a8:	4601      	mov	r1, r0
 80065aa:	4604      	mov	r4, r0
 80065ac:	4648      	mov	r0, r9
 80065ae:	f000 fcad 	bl	8006f0c <__mcmp>
 80065b2:	2800      	cmp	r0, #0
 80065b4:	f77f aeb3 	ble.w	800631e <_dtoa_r+0x68e>
 80065b8:	4656      	mov	r6, sl
 80065ba:	2331      	movs	r3, #49	@ 0x31
 80065bc:	f806 3b01 	strb.w	r3, [r6], #1
 80065c0:	9b04      	ldr	r3, [sp, #16]
 80065c2:	3301      	adds	r3, #1
 80065c4:	9304      	str	r3, [sp, #16]
 80065c6:	e6ae      	b.n	8006326 <_dtoa_r+0x696>
 80065c8:	9c07      	ldr	r4, [sp, #28]
 80065ca:	9704      	str	r7, [sp, #16]
 80065cc:	4625      	mov	r5, r4
 80065ce:	e7f3      	b.n	80065b8 <_dtoa_r+0x928>
 80065d0:	9b07      	ldr	r3, [sp, #28]
 80065d2:	9300      	str	r3, [sp, #0]
 80065d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	f000 8104 	beq.w	80067e4 <_dtoa_r+0xb54>
 80065dc:	2e00      	cmp	r6, #0
 80065de:	dd05      	ble.n	80065ec <_dtoa_r+0x95c>
 80065e0:	4629      	mov	r1, r5
 80065e2:	4632      	mov	r2, r6
 80065e4:	4658      	mov	r0, fp
 80065e6:	f000 fc25 	bl	8006e34 <__lshift>
 80065ea:	4605      	mov	r5, r0
 80065ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d05a      	beq.n	80066a8 <_dtoa_r+0xa18>
 80065f2:	6869      	ldr	r1, [r5, #4]
 80065f4:	4658      	mov	r0, fp
 80065f6:	f000 fa0f 	bl	8006a18 <_Balloc>
 80065fa:	4606      	mov	r6, r0
 80065fc:	b928      	cbnz	r0, 800660a <_dtoa_r+0x97a>
 80065fe:	4b84      	ldr	r3, [pc, #528]	@ (8006810 <_dtoa_r+0xb80>)
 8006600:	4602      	mov	r2, r0
 8006602:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006606:	f7ff bb5a 	b.w	8005cbe <_dtoa_r+0x2e>
 800660a:	692a      	ldr	r2, [r5, #16]
 800660c:	3202      	adds	r2, #2
 800660e:	0092      	lsls	r2, r2, #2
 8006610:	f105 010c 	add.w	r1, r5, #12
 8006614:	300c      	adds	r0, #12
 8006616:	f7ff faa2 	bl	8005b5e <memcpy>
 800661a:	2201      	movs	r2, #1
 800661c:	4631      	mov	r1, r6
 800661e:	4658      	mov	r0, fp
 8006620:	f000 fc08 	bl	8006e34 <__lshift>
 8006624:	f10a 0301 	add.w	r3, sl, #1
 8006628:	9307      	str	r3, [sp, #28]
 800662a:	9b00      	ldr	r3, [sp, #0]
 800662c:	4453      	add	r3, sl
 800662e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006630:	9b02      	ldr	r3, [sp, #8]
 8006632:	f003 0301 	and.w	r3, r3, #1
 8006636:	462f      	mov	r7, r5
 8006638:	930a      	str	r3, [sp, #40]	@ 0x28
 800663a:	4605      	mov	r5, r0
 800663c:	9b07      	ldr	r3, [sp, #28]
 800663e:	4621      	mov	r1, r4
 8006640:	3b01      	subs	r3, #1
 8006642:	4648      	mov	r0, r9
 8006644:	9300      	str	r3, [sp, #0]
 8006646:	f7ff fa98 	bl	8005b7a <quorem>
 800664a:	4639      	mov	r1, r7
 800664c:	9002      	str	r0, [sp, #8]
 800664e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006652:	4648      	mov	r0, r9
 8006654:	f000 fc5a 	bl	8006f0c <__mcmp>
 8006658:	462a      	mov	r2, r5
 800665a:	9008      	str	r0, [sp, #32]
 800665c:	4621      	mov	r1, r4
 800665e:	4658      	mov	r0, fp
 8006660:	f000 fc70 	bl	8006f44 <__mdiff>
 8006664:	68c2      	ldr	r2, [r0, #12]
 8006666:	4606      	mov	r6, r0
 8006668:	bb02      	cbnz	r2, 80066ac <_dtoa_r+0xa1c>
 800666a:	4601      	mov	r1, r0
 800666c:	4648      	mov	r0, r9
 800666e:	f000 fc4d 	bl	8006f0c <__mcmp>
 8006672:	4602      	mov	r2, r0
 8006674:	4631      	mov	r1, r6
 8006676:	4658      	mov	r0, fp
 8006678:	920e      	str	r2, [sp, #56]	@ 0x38
 800667a:	f000 fa0d 	bl	8006a98 <_Bfree>
 800667e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006680:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006682:	9e07      	ldr	r6, [sp, #28]
 8006684:	ea43 0102 	orr.w	r1, r3, r2
 8006688:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800668a:	4319      	orrs	r1, r3
 800668c:	d110      	bne.n	80066b0 <_dtoa_r+0xa20>
 800668e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006692:	d029      	beq.n	80066e8 <_dtoa_r+0xa58>
 8006694:	9b08      	ldr	r3, [sp, #32]
 8006696:	2b00      	cmp	r3, #0
 8006698:	dd02      	ble.n	80066a0 <_dtoa_r+0xa10>
 800669a:	9b02      	ldr	r3, [sp, #8]
 800669c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80066a0:	9b00      	ldr	r3, [sp, #0]
 80066a2:	f883 8000 	strb.w	r8, [r3]
 80066a6:	e63f      	b.n	8006328 <_dtoa_r+0x698>
 80066a8:	4628      	mov	r0, r5
 80066aa:	e7bb      	b.n	8006624 <_dtoa_r+0x994>
 80066ac:	2201      	movs	r2, #1
 80066ae:	e7e1      	b.n	8006674 <_dtoa_r+0x9e4>
 80066b0:	9b08      	ldr	r3, [sp, #32]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	db04      	blt.n	80066c0 <_dtoa_r+0xa30>
 80066b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80066b8:	430b      	orrs	r3, r1
 80066ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80066bc:	430b      	orrs	r3, r1
 80066be:	d120      	bne.n	8006702 <_dtoa_r+0xa72>
 80066c0:	2a00      	cmp	r2, #0
 80066c2:	dded      	ble.n	80066a0 <_dtoa_r+0xa10>
 80066c4:	4649      	mov	r1, r9
 80066c6:	2201      	movs	r2, #1
 80066c8:	4658      	mov	r0, fp
 80066ca:	f000 fbb3 	bl	8006e34 <__lshift>
 80066ce:	4621      	mov	r1, r4
 80066d0:	4681      	mov	r9, r0
 80066d2:	f000 fc1b 	bl	8006f0c <__mcmp>
 80066d6:	2800      	cmp	r0, #0
 80066d8:	dc03      	bgt.n	80066e2 <_dtoa_r+0xa52>
 80066da:	d1e1      	bne.n	80066a0 <_dtoa_r+0xa10>
 80066dc:	f018 0f01 	tst.w	r8, #1
 80066e0:	d0de      	beq.n	80066a0 <_dtoa_r+0xa10>
 80066e2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80066e6:	d1d8      	bne.n	800669a <_dtoa_r+0xa0a>
 80066e8:	9a00      	ldr	r2, [sp, #0]
 80066ea:	2339      	movs	r3, #57	@ 0x39
 80066ec:	7013      	strb	r3, [r2, #0]
 80066ee:	4633      	mov	r3, r6
 80066f0:	461e      	mov	r6, r3
 80066f2:	3b01      	subs	r3, #1
 80066f4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80066f8:	2a39      	cmp	r2, #57	@ 0x39
 80066fa:	d052      	beq.n	80067a2 <_dtoa_r+0xb12>
 80066fc:	3201      	adds	r2, #1
 80066fe:	701a      	strb	r2, [r3, #0]
 8006700:	e612      	b.n	8006328 <_dtoa_r+0x698>
 8006702:	2a00      	cmp	r2, #0
 8006704:	dd07      	ble.n	8006716 <_dtoa_r+0xa86>
 8006706:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800670a:	d0ed      	beq.n	80066e8 <_dtoa_r+0xa58>
 800670c:	9a00      	ldr	r2, [sp, #0]
 800670e:	f108 0301 	add.w	r3, r8, #1
 8006712:	7013      	strb	r3, [r2, #0]
 8006714:	e608      	b.n	8006328 <_dtoa_r+0x698>
 8006716:	9b07      	ldr	r3, [sp, #28]
 8006718:	9a07      	ldr	r2, [sp, #28]
 800671a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800671e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006720:	4293      	cmp	r3, r2
 8006722:	d028      	beq.n	8006776 <_dtoa_r+0xae6>
 8006724:	4649      	mov	r1, r9
 8006726:	2300      	movs	r3, #0
 8006728:	220a      	movs	r2, #10
 800672a:	4658      	mov	r0, fp
 800672c:	f000 f9d6 	bl	8006adc <__multadd>
 8006730:	42af      	cmp	r7, r5
 8006732:	4681      	mov	r9, r0
 8006734:	f04f 0300 	mov.w	r3, #0
 8006738:	f04f 020a 	mov.w	r2, #10
 800673c:	4639      	mov	r1, r7
 800673e:	4658      	mov	r0, fp
 8006740:	d107      	bne.n	8006752 <_dtoa_r+0xac2>
 8006742:	f000 f9cb 	bl	8006adc <__multadd>
 8006746:	4607      	mov	r7, r0
 8006748:	4605      	mov	r5, r0
 800674a:	9b07      	ldr	r3, [sp, #28]
 800674c:	3301      	adds	r3, #1
 800674e:	9307      	str	r3, [sp, #28]
 8006750:	e774      	b.n	800663c <_dtoa_r+0x9ac>
 8006752:	f000 f9c3 	bl	8006adc <__multadd>
 8006756:	4629      	mov	r1, r5
 8006758:	4607      	mov	r7, r0
 800675a:	2300      	movs	r3, #0
 800675c:	220a      	movs	r2, #10
 800675e:	4658      	mov	r0, fp
 8006760:	f000 f9bc 	bl	8006adc <__multadd>
 8006764:	4605      	mov	r5, r0
 8006766:	e7f0      	b.n	800674a <_dtoa_r+0xaba>
 8006768:	9b00      	ldr	r3, [sp, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	bfcc      	ite	gt
 800676e:	461e      	movgt	r6, r3
 8006770:	2601      	movle	r6, #1
 8006772:	4456      	add	r6, sl
 8006774:	2700      	movs	r7, #0
 8006776:	4649      	mov	r1, r9
 8006778:	2201      	movs	r2, #1
 800677a:	4658      	mov	r0, fp
 800677c:	f000 fb5a 	bl	8006e34 <__lshift>
 8006780:	4621      	mov	r1, r4
 8006782:	4681      	mov	r9, r0
 8006784:	f000 fbc2 	bl	8006f0c <__mcmp>
 8006788:	2800      	cmp	r0, #0
 800678a:	dcb0      	bgt.n	80066ee <_dtoa_r+0xa5e>
 800678c:	d102      	bne.n	8006794 <_dtoa_r+0xb04>
 800678e:	f018 0f01 	tst.w	r8, #1
 8006792:	d1ac      	bne.n	80066ee <_dtoa_r+0xa5e>
 8006794:	4633      	mov	r3, r6
 8006796:	461e      	mov	r6, r3
 8006798:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800679c:	2a30      	cmp	r2, #48	@ 0x30
 800679e:	d0fa      	beq.n	8006796 <_dtoa_r+0xb06>
 80067a0:	e5c2      	b.n	8006328 <_dtoa_r+0x698>
 80067a2:	459a      	cmp	sl, r3
 80067a4:	d1a4      	bne.n	80066f0 <_dtoa_r+0xa60>
 80067a6:	9b04      	ldr	r3, [sp, #16]
 80067a8:	3301      	adds	r3, #1
 80067aa:	9304      	str	r3, [sp, #16]
 80067ac:	2331      	movs	r3, #49	@ 0x31
 80067ae:	f88a 3000 	strb.w	r3, [sl]
 80067b2:	e5b9      	b.n	8006328 <_dtoa_r+0x698>
 80067b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80067b6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006814 <_dtoa_r+0xb84>
 80067ba:	b11b      	cbz	r3, 80067c4 <_dtoa_r+0xb34>
 80067bc:	f10a 0308 	add.w	r3, sl, #8
 80067c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80067c2:	6013      	str	r3, [r2, #0]
 80067c4:	4650      	mov	r0, sl
 80067c6:	b019      	add	sp, #100	@ 0x64
 80067c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	f77f ae37 	ble.w	8006442 <_dtoa_r+0x7b2>
 80067d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80067d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80067d8:	2001      	movs	r0, #1
 80067da:	e655      	b.n	8006488 <_dtoa_r+0x7f8>
 80067dc:	9b00      	ldr	r3, [sp, #0]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	f77f aed6 	ble.w	8006590 <_dtoa_r+0x900>
 80067e4:	4656      	mov	r6, sl
 80067e6:	4621      	mov	r1, r4
 80067e8:	4648      	mov	r0, r9
 80067ea:	f7ff f9c6 	bl	8005b7a <quorem>
 80067ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80067f2:	f806 8b01 	strb.w	r8, [r6], #1
 80067f6:	9b00      	ldr	r3, [sp, #0]
 80067f8:	eba6 020a 	sub.w	r2, r6, sl
 80067fc:	4293      	cmp	r3, r2
 80067fe:	ddb3      	ble.n	8006768 <_dtoa_r+0xad8>
 8006800:	4649      	mov	r1, r9
 8006802:	2300      	movs	r3, #0
 8006804:	220a      	movs	r2, #10
 8006806:	4658      	mov	r0, fp
 8006808:	f000 f968 	bl	8006adc <__multadd>
 800680c:	4681      	mov	r9, r0
 800680e:	e7ea      	b.n	80067e6 <_dtoa_r+0xb56>
 8006810:	08007d50 	.word	0x08007d50
 8006814:	08007cd4 	.word	0x08007cd4

08006818 <_free_r>:
 8006818:	b538      	push	{r3, r4, r5, lr}
 800681a:	4605      	mov	r5, r0
 800681c:	2900      	cmp	r1, #0
 800681e:	d041      	beq.n	80068a4 <_free_r+0x8c>
 8006820:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006824:	1f0c      	subs	r4, r1, #4
 8006826:	2b00      	cmp	r3, #0
 8006828:	bfb8      	it	lt
 800682a:	18e4      	addlt	r4, r4, r3
 800682c:	f000 f8e8 	bl	8006a00 <__malloc_lock>
 8006830:	4a1d      	ldr	r2, [pc, #116]	@ (80068a8 <_free_r+0x90>)
 8006832:	6813      	ldr	r3, [r2, #0]
 8006834:	b933      	cbnz	r3, 8006844 <_free_r+0x2c>
 8006836:	6063      	str	r3, [r4, #4]
 8006838:	6014      	str	r4, [r2, #0]
 800683a:	4628      	mov	r0, r5
 800683c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006840:	f000 b8e4 	b.w	8006a0c <__malloc_unlock>
 8006844:	42a3      	cmp	r3, r4
 8006846:	d908      	bls.n	800685a <_free_r+0x42>
 8006848:	6820      	ldr	r0, [r4, #0]
 800684a:	1821      	adds	r1, r4, r0
 800684c:	428b      	cmp	r3, r1
 800684e:	bf01      	itttt	eq
 8006850:	6819      	ldreq	r1, [r3, #0]
 8006852:	685b      	ldreq	r3, [r3, #4]
 8006854:	1809      	addeq	r1, r1, r0
 8006856:	6021      	streq	r1, [r4, #0]
 8006858:	e7ed      	b.n	8006836 <_free_r+0x1e>
 800685a:	461a      	mov	r2, r3
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	b10b      	cbz	r3, 8006864 <_free_r+0x4c>
 8006860:	42a3      	cmp	r3, r4
 8006862:	d9fa      	bls.n	800685a <_free_r+0x42>
 8006864:	6811      	ldr	r1, [r2, #0]
 8006866:	1850      	adds	r0, r2, r1
 8006868:	42a0      	cmp	r0, r4
 800686a:	d10b      	bne.n	8006884 <_free_r+0x6c>
 800686c:	6820      	ldr	r0, [r4, #0]
 800686e:	4401      	add	r1, r0
 8006870:	1850      	adds	r0, r2, r1
 8006872:	4283      	cmp	r3, r0
 8006874:	6011      	str	r1, [r2, #0]
 8006876:	d1e0      	bne.n	800683a <_free_r+0x22>
 8006878:	6818      	ldr	r0, [r3, #0]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	6053      	str	r3, [r2, #4]
 800687e:	4408      	add	r0, r1
 8006880:	6010      	str	r0, [r2, #0]
 8006882:	e7da      	b.n	800683a <_free_r+0x22>
 8006884:	d902      	bls.n	800688c <_free_r+0x74>
 8006886:	230c      	movs	r3, #12
 8006888:	602b      	str	r3, [r5, #0]
 800688a:	e7d6      	b.n	800683a <_free_r+0x22>
 800688c:	6820      	ldr	r0, [r4, #0]
 800688e:	1821      	adds	r1, r4, r0
 8006890:	428b      	cmp	r3, r1
 8006892:	bf04      	itt	eq
 8006894:	6819      	ldreq	r1, [r3, #0]
 8006896:	685b      	ldreq	r3, [r3, #4]
 8006898:	6063      	str	r3, [r4, #4]
 800689a:	bf04      	itt	eq
 800689c:	1809      	addeq	r1, r1, r0
 800689e:	6021      	streq	r1, [r4, #0]
 80068a0:	6054      	str	r4, [r2, #4]
 80068a2:	e7ca      	b.n	800683a <_free_r+0x22>
 80068a4:	bd38      	pop	{r3, r4, r5, pc}
 80068a6:	bf00      	nop
 80068a8:	200005a0 	.word	0x200005a0

080068ac <malloc>:
 80068ac:	4b02      	ldr	r3, [pc, #8]	@ (80068b8 <malloc+0xc>)
 80068ae:	4601      	mov	r1, r0
 80068b0:	6818      	ldr	r0, [r3, #0]
 80068b2:	f000 b825 	b.w	8006900 <_malloc_r>
 80068b6:	bf00      	nop
 80068b8:	20000140 	.word	0x20000140

080068bc <sbrk_aligned>:
 80068bc:	b570      	push	{r4, r5, r6, lr}
 80068be:	4e0f      	ldr	r6, [pc, #60]	@ (80068fc <sbrk_aligned+0x40>)
 80068c0:	460c      	mov	r4, r1
 80068c2:	6831      	ldr	r1, [r6, #0]
 80068c4:	4605      	mov	r5, r0
 80068c6:	b911      	cbnz	r1, 80068ce <sbrk_aligned+0x12>
 80068c8:	f000 fe46 	bl	8007558 <_sbrk_r>
 80068cc:	6030      	str	r0, [r6, #0]
 80068ce:	4621      	mov	r1, r4
 80068d0:	4628      	mov	r0, r5
 80068d2:	f000 fe41 	bl	8007558 <_sbrk_r>
 80068d6:	1c43      	adds	r3, r0, #1
 80068d8:	d103      	bne.n	80068e2 <sbrk_aligned+0x26>
 80068da:	f04f 34ff 	mov.w	r4, #4294967295
 80068de:	4620      	mov	r0, r4
 80068e0:	bd70      	pop	{r4, r5, r6, pc}
 80068e2:	1cc4      	adds	r4, r0, #3
 80068e4:	f024 0403 	bic.w	r4, r4, #3
 80068e8:	42a0      	cmp	r0, r4
 80068ea:	d0f8      	beq.n	80068de <sbrk_aligned+0x22>
 80068ec:	1a21      	subs	r1, r4, r0
 80068ee:	4628      	mov	r0, r5
 80068f0:	f000 fe32 	bl	8007558 <_sbrk_r>
 80068f4:	3001      	adds	r0, #1
 80068f6:	d1f2      	bne.n	80068de <sbrk_aligned+0x22>
 80068f8:	e7ef      	b.n	80068da <sbrk_aligned+0x1e>
 80068fa:	bf00      	nop
 80068fc:	2000059c 	.word	0x2000059c

08006900 <_malloc_r>:
 8006900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006904:	1ccd      	adds	r5, r1, #3
 8006906:	f025 0503 	bic.w	r5, r5, #3
 800690a:	3508      	adds	r5, #8
 800690c:	2d0c      	cmp	r5, #12
 800690e:	bf38      	it	cc
 8006910:	250c      	movcc	r5, #12
 8006912:	2d00      	cmp	r5, #0
 8006914:	4606      	mov	r6, r0
 8006916:	db01      	blt.n	800691c <_malloc_r+0x1c>
 8006918:	42a9      	cmp	r1, r5
 800691a:	d904      	bls.n	8006926 <_malloc_r+0x26>
 800691c:	230c      	movs	r3, #12
 800691e:	6033      	str	r3, [r6, #0]
 8006920:	2000      	movs	r0, #0
 8006922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006926:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80069fc <_malloc_r+0xfc>
 800692a:	f000 f869 	bl	8006a00 <__malloc_lock>
 800692e:	f8d8 3000 	ldr.w	r3, [r8]
 8006932:	461c      	mov	r4, r3
 8006934:	bb44      	cbnz	r4, 8006988 <_malloc_r+0x88>
 8006936:	4629      	mov	r1, r5
 8006938:	4630      	mov	r0, r6
 800693a:	f7ff ffbf 	bl	80068bc <sbrk_aligned>
 800693e:	1c43      	adds	r3, r0, #1
 8006940:	4604      	mov	r4, r0
 8006942:	d158      	bne.n	80069f6 <_malloc_r+0xf6>
 8006944:	f8d8 4000 	ldr.w	r4, [r8]
 8006948:	4627      	mov	r7, r4
 800694a:	2f00      	cmp	r7, #0
 800694c:	d143      	bne.n	80069d6 <_malloc_r+0xd6>
 800694e:	2c00      	cmp	r4, #0
 8006950:	d04b      	beq.n	80069ea <_malloc_r+0xea>
 8006952:	6823      	ldr	r3, [r4, #0]
 8006954:	4639      	mov	r1, r7
 8006956:	4630      	mov	r0, r6
 8006958:	eb04 0903 	add.w	r9, r4, r3
 800695c:	f000 fdfc 	bl	8007558 <_sbrk_r>
 8006960:	4581      	cmp	r9, r0
 8006962:	d142      	bne.n	80069ea <_malloc_r+0xea>
 8006964:	6821      	ldr	r1, [r4, #0]
 8006966:	1a6d      	subs	r5, r5, r1
 8006968:	4629      	mov	r1, r5
 800696a:	4630      	mov	r0, r6
 800696c:	f7ff ffa6 	bl	80068bc <sbrk_aligned>
 8006970:	3001      	adds	r0, #1
 8006972:	d03a      	beq.n	80069ea <_malloc_r+0xea>
 8006974:	6823      	ldr	r3, [r4, #0]
 8006976:	442b      	add	r3, r5
 8006978:	6023      	str	r3, [r4, #0]
 800697a:	f8d8 3000 	ldr.w	r3, [r8]
 800697e:	685a      	ldr	r2, [r3, #4]
 8006980:	bb62      	cbnz	r2, 80069dc <_malloc_r+0xdc>
 8006982:	f8c8 7000 	str.w	r7, [r8]
 8006986:	e00f      	b.n	80069a8 <_malloc_r+0xa8>
 8006988:	6822      	ldr	r2, [r4, #0]
 800698a:	1b52      	subs	r2, r2, r5
 800698c:	d420      	bmi.n	80069d0 <_malloc_r+0xd0>
 800698e:	2a0b      	cmp	r2, #11
 8006990:	d917      	bls.n	80069c2 <_malloc_r+0xc2>
 8006992:	1961      	adds	r1, r4, r5
 8006994:	42a3      	cmp	r3, r4
 8006996:	6025      	str	r5, [r4, #0]
 8006998:	bf18      	it	ne
 800699a:	6059      	strne	r1, [r3, #4]
 800699c:	6863      	ldr	r3, [r4, #4]
 800699e:	bf08      	it	eq
 80069a0:	f8c8 1000 	streq.w	r1, [r8]
 80069a4:	5162      	str	r2, [r4, r5]
 80069a6:	604b      	str	r3, [r1, #4]
 80069a8:	4630      	mov	r0, r6
 80069aa:	f000 f82f 	bl	8006a0c <__malloc_unlock>
 80069ae:	f104 000b 	add.w	r0, r4, #11
 80069b2:	1d23      	adds	r3, r4, #4
 80069b4:	f020 0007 	bic.w	r0, r0, #7
 80069b8:	1ac2      	subs	r2, r0, r3
 80069ba:	bf1c      	itt	ne
 80069bc:	1a1b      	subne	r3, r3, r0
 80069be:	50a3      	strne	r3, [r4, r2]
 80069c0:	e7af      	b.n	8006922 <_malloc_r+0x22>
 80069c2:	6862      	ldr	r2, [r4, #4]
 80069c4:	42a3      	cmp	r3, r4
 80069c6:	bf0c      	ite	eq
 80069c8:	f8c8 2000 	streq.w	r2, [r8]
 80069cc:	605a      	strne	r2, [r3, #4]
 80069ce:	e7eb      	b.n	80069a8 <_malloc_r+0xa8>
 80069d0:	4623      	mov	r3, r4
 80069d2:	6864      	ldr	r4, [r4, #4]
 80069d4:	e7ae      	b.n	8006934 <_malloc_r+0x34>
 80069d6:	463c      	mov	r4, r7
 80069d8:	687f      	ldr	r7, [r7, #4]
 80069da:	e7b6      	b.n	800694a <_malloc_r+0x4a>
 80069dc:	461a      	mov	r2, r3
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	42a3      	cmp	r3, r4
 80069e2:	d1fb      	bne.n	80069dc <_malloc_r+0xdc>
 80069e4:	2300      	movs	r3, #0
 80069e6:	6053      	str	r3, [r2, #4]
 80069e8:	e7de      	b.n	80069a8 <_malloc_r+0xa8>
 80069ea:	230c      	movs	r3, #12
 80069ec:	6033      	str	r3, [r6, #0]
 80069ee:	4630      	mov	r0, r6
 80069f0:	f000 f80c 	bl	8006a0c <__malloc_unlock>
 80069f4:	e794      	b.n	8006920 <_malloc_r+0x20>
 80069f6:	6005      	str	r5, [r0, #0]
 80069f8:	e7d6      	b.n	80069a8 <_malloc_r+0xa8>
 80069fa:	bf00      	nop
 80069fc:	200005a0 	.word	0x200005a0

08006a00 <__malloc_lock>:
 8006a00:	4801      	ldr	r0, [pc, #4]	@ (8006a08 <__malloc_lock+0x8>)
 8006a02:	f7ff b8aa 	b.w	8005b5a <__retarget_lock_acquire_recursive>
 8006a06:	bf00      	nop
 8006a08:	20000598 	.word	0x20000598

08006a0c <__malloc_unlock>:
 8006a0c:	4801      	ldr	r0, [pc, #4]	@ (8006a14 <__malloc_unlock+0x8>)
 8006a0e:	f7ff b8a5 	b.w	8005b5c <__retarget_lock_release_recursive>
 8006a12:	bf00      	nop
 8006a14:	20000598 	.word	0x20000598

08006a18 <_Balloc>:
 8006a18:	b570      	push	{r4, r5, r6, lr}
 8006a1a:	69c6      	ldr	r6, [r0, #28]
 8006a1c:	4604      	mov	r4, r0
 8006a1e:	460d      	mov	r5, r1
 8006a20:	b976      	cbnz	r6, 8006a40 <_Balloc+0x28>
 8006a22:	2010      	movs	r0, #16
 8006a24:	f7ff ff42 	bl	80068ac <malloc>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	61e0      	str	r0, [r4, #28]
 8006a2c:	b920      	cbnz	r0, 8006a38 <_Balloc+0x20>
 8006a2e:	4b18      	ldr	r3, [pc, #96]	@ (8006a90 <_Balloc+0x78>)
 8006a30:	4818      	ldr	r0, [pc, #96]	@ (8006a94 <_Balloc+0x7c>)
 8006a32:	216b      	movs	r1, #107	@ 0x6b
 8006a34:	f000 fda0 	bl	8007578 <__assert_func>
 8006a38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a3c:	6006      	str	r6, [r0, #0]
 8006a3e:	60c6      	str	r6, [r0, #12]
 8006a40:	69e6      	ldr	r6, [r4, #28]
 8006a42:	68f3      	ldr	r3, [r6, #12]
 8006a44:	b183      	cbz	r3, 8006a68 <_Balloc+0x50>
 8006a46:	69e3      	ldr	r3, [r4, #28]
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006a4e:	b9b8      	cbnz	r0, 8006a80 <_Balloc+0x68>
 8006a50:	2101      	movs	r1, #1
 8006a52:	fa01 f605 	lsl.w	r6, r1, r5
 8006a56:	1d72      	adds	r2, r6, #5
 8006a58:	0092      	lsls	r2, r2, #2
 8006a5a:	4620      	mov	r0, r4
 8006a5c:	f000 fdaa 	bl	80075b4 <_calloc_r>
 8006a60:	b160      	cbz	r0, 8006a7c <_Balloc+0x64>
 8006a62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006a66:	e00e      	b.n	8006a86 <_Balloc+0x6e>
 8006a68:	2221      	movs	r2, #33	@ 0x21
 8006a6a:	2104      	movs	r1, #4
 8006a6c:	4620      	mov	r0, r4
 8006a6e:	f000 fda1 	bl	80075b4 <_calloc_r>
 8006a72:	69e3      	ldr	r3, [r4, #28]
 8006a74:	60f0      	str	r0, [r6, #12]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d1e4      	bne.n	8006a46 <_Balloc+0x2e>
 8006a7c:	2000      	movs	r0, #0
 8006a7e:	bd70      	pop	{r4, r5, r6, pc}
 8006a80:	6802      	ldr	r2, [r0, #0]
 8006a82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006a86:	2300      	movs	r3, #0
 8006a88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006a8c:	e7f7      	b.n	8006a7e <_Balloc+0x66>
 8006a8e:	bf00      	nop
 8006a90:	08007ce1 	.word	0x08007ce1
 8006a94:	08007d61 	.word	0x08007d61

08006a98 <_Bfree>:
 8006a98:	b570      	push	{r4, r5, r6, lr}
 8006a9a:	69c6      	ldr	r6, [r0, #28]
 8006a9c:	4605      	mov	r5, r0
 8006a9e:	460c      	mov	r4, r1
 8006aa0:	b976      	cbnz	r6, 8006ac0 <_Bfree+0x28>
 8006aa2:	2010      	movs	r0, #16
 8006aa4:	f7ff ff02 	bl	80068ac <malloc>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	61e8      	str	r0, [r5, #28]
 8006aac:	b920      	cbnz	r0, 8006ab8 <_Bfree+0x20>
 8006aae:	4b09      	ldr	r3, [pc, #36]	@ (8006ad4 <_Bfree+0x3c>)
 8006ab0:	4809      	ldr	r0, [pc, #36]	@ (8006ad8 <_Bfree+0x40>)
 8006ab2:	218f      	movs	r1, #143	@ 0x8f
 8006ab4:	f000 fd60 	bl	8007578 <__assert_func>
 8006ab8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006abc:	6006      	str	r6, [r0, #0]
 8006abe:	60c6      	str	r6, [r0, #12]
 8006ac0:	b13c      	cbz	r4, 8006ad2 <_Bfree+0x3a>
 8006ac2:	69eb      	ldr	r3, [r5, #28]
 8006ac4:	6862      	ldr	r2, [r4, #4]
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006acc:	6021      	str	r1, [r4, #0]
 8006ace:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006ad2:	bd70      	pop	{r4, r5, r6, pc}
 8006ad4:	08007ce1 	.word	0x08007ce1
 8006ad8:	08007d61 	.word	0x08007d61

08006adc <__multadd>:
 8006adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ae0:	690d      	ldr	r5, [r1, #16]
 8006ae2:	4607      	mov	r7, r0
 8006ae4:	460c      	mov	r4, r1
 8006ae6:	461e      	mov	r6, r3
 8006ae8:	f101 0c14 	add.w	ip, r1, #20
 8006aec:	2000      	movs	r0, #0
 8006aee:	f8dc 3000 	ldr.w	r3, [ip]
 8006af2:	b299      	uxth	r1, r3
 8006af4:	fb02 6101 	mla	r1, r2, r1, r6
 8006af8:	0c1e      	lsrs	r6, r3, #16
 8006afa:	0c0b      	lsrs	r3, r1, #16
 8006afc:	fb02 3306 	mla	r3, r2, r6, r3
 8006b00:	b289      	uxth	r1, r1
 8006b02:	3001      	adds	r0, #1
 8006b04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006b08:	4285      	cmp	r5, r0
 8006b0a:	f84c 1b04 	str.w	r1, [ip], #4
 8006b0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006b12:	dcec      	bgt.n	8006aee <__multadd+0x12>
 8006b14:	b30e      	cbz	r6, 8006b5a <__multadd+0x7e>
 8006b16:	68a3      	ldr	r3, [r4, #8]
 8006b18:	42ab      	cmp	r3, r5
 8006b1a:	dc19      	bgt.n	8006b50 <__multadd+0x74>
 8006b1c:	6861      	ldr	r1, [r4, #4]
 8006b1e:	4638      	mov	r0, r7
 8006b20:	3101      	adds	r1, #1
 8006b22:	f7ff ff79 	bl	8006a18 <_Balloc>
 8006b26:	4680      	mov	r8, r0
 8006b28:	b928      	cbnz	r0, 8006b36 <__multadd+0x5a>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8006b60 <__multadd+0x84>)
 8006b2e:	480d      	ldr	r0, [pc, #52]	@ (8006b64 <__multadd+0x88>)
 8006b30:	21ba      	movs	r1, #186	@ 0xba
 8006b32:	f000 fd21 	bl	8007578 <__assert_func>
 8006b36:	6922      	ldr	r2, [r4, #16]
 8006b38:	3202      	adds	r2, #2
 8006b3a:	f104 010c 	add.w	r1, r4, #12
 8006b3e:	0092      	lsls	r2, r2, #2
 8006b40:	300c      	adds	r0, #12
 8006b42:	f7ff f80c 	bl	8005b5e <memcpy>
 8006b46:	4621      	mov	r1, r4
 8006b48:	4638      	mov	r0, r7
 8006b4a:	f7ff ffa5 	bl	8006a98 <_Bfree>
 8006b4e:	4644      	mov	r4, r8
 8006b50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006b54:	3501      	adds	r5, #1
 8006b56:	615e      	str	r6, [r3, #20]
 8006b58:	6125      	str	r5, [r4, #16]
 8006b5a:	4620      	mov	r0, r4
 8006b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b60:	08007d50 	.word	0x08007d50
 8006b64:	08007d61 	.word	0x08007d61

08006b68 <__hi0bits>:
 8006b68:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	bf36      	itet	cc
 8006b70:	0403      	lslcc	r3, r0, #16
 8006b72:	2000      	movcs	r0, #0
 8006b74:	2010      	movcc	r0, #16
 8006b76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b7a:	bf3c      	itt	cc
 8006b7c:	021b      	lslcc	r3, r3, #8
 8006b7e:	3008      	addcc	r0, #8
 8006b80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b84:	bf3c      	itt	cc
 8006b86:	011b      	lslcc	r3, r3, #4
 8006b88:	3004      	addcc	r0, #4
 8006b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b8e:	bf3c      	itt	cc
 8006b90:	009b      	lslcc	r3, r3, #2
 8006b92:	3002      	addcc	r0, #2
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	db05      	blt.n	8006ba4 <__hi0bits+0x3c>
 8006b98:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006b9c:	f100 0001 	add.w	r0, r0, #1
 8006ba0:	bf08      	it	eq
 8006ba2:	2020      	moveq	r0, #32
 8006ba4:	4770      	bx	lr

08006ba6 <__lo0bits>:
 8006ba6:	6803      	ldr	r3, [r0, #0]
 8006ba8:	4602      	mov	r2, r0
 8006baa:	f013 0007 	ands.w	r0, r3, #7
 8006bae:	d00b      	beq.n	8006bc8 <__lo0bits+0x22>
 8006bb0:	07d9      	lsls	r1, r3, #31
 8006bb2:	d421      	bmi.n	8006bf8 <__lo0bits+0x52>
 8006bb4:	0798      	lsls	r0, r3, #30
 8006bb6:	bf49      	itett	mi
 8006bb8:	085b      	lsrmi	r3, r3, #1
 8006bba:	089b      	lsrpl	r3, r3, #2
 8006bbc:	2001      	movmi	r0, #1
 8006bbe:	6013      	strmi	r3, [r2, #0]
 8006bc0:	bf5c      	itt	pl
 8006bc2:	6013      	strpl	r3, [r2, #0]
 8006bc4:	2002      	movpl	r0, #2
 8006bc6:	4770      	bx	lr
 8006bc8:	b299      	uxth	r1, r3
 8006bca:	b909      	cbnz	r1, 8006bd0 <__lo0bits+0x2a>
 8006bcc:	0c1b      	lsrs	r3, r3, #16
 8006bce:	2010      	movs	r0, #16
 8006bd0:	b2d9      	uxtb	r1, r3
 8006bd2:	b909      	cbnz	r1, 8006bd8 <__lo0bits+0x32>
 8006bd4:	3008      	adds	r0, #8
 8006bd6:	0a1b      	lsrs	r3, r3, #8
 8006bd8:	0719      	lsls	r1, r3, #28
 8006bda:	bf04      	itt	eq
 8006bdc:	091b      	lsreq	r3, r3, #4
 8006bde:	3004      	addeq	r0, #4
 8006be0:	0799      	lsls	r1, r3, #30
 8006be2:	bf04      	itt	eq
 8006be4:	089b      	lsreq	r3, r3, #2
 8006be6:	3002      	addeq	r0, #2
 8006be8:	07d9      	lsls	r1, r3, #31
 8006bea:	d403      	bmi.n	8006bf4 <__lo0bits+0x4e>
 8006bec:	085b      	lsrs	r3, r3, #1
 8006bee:	f100 0001 	add.w	r0, r0, #1
 8006bf2:	d003      	beq.n	8006bfc <__lo0bits+0x56>
 8006bf4:	6013      	str	r3, [r2, #0]
 8006bf6:	4770      	bx	lr
 8006bf8:	2000      	movs	r0, #0
 8006bfa:	4770      	bx	lr
 8006bfc:	2020      	movs	r0, #32
 8006bfe:	4770      	bx	lr

08006c00 <__i2b>:
 8006c00:	b510      	push	{r4, lr}
 8006c02:	460c      	mov	r4, r1
 8006c04:	2101      	movs	r1, #1
 8006c06:	f7ff ff07 	bl	8006a18 <_Balloc>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	b928      	cbnz	r0, 8006c1a <__i2b+0x1a>
 8006c0e:	4b05      	ldr	r3, [pc, #20]	@ (8006c24 <__i2b+0x24>)
 8006c10:	4805      	ldr	r0, [pc, #20]	@ (8006c28 <__i2b+0x28>)
 8006c12:	f240 1145 	movw	r1, #325	@ 0x145
 8006c16:	f000 fcaf 	bl	8007578 <__assert_func>
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	6144      	str	r4, [r0, #20]
 8006c1e:	6103      	str	r3, [r0, #16]
 8006c20:	bd10      	pop	{r4, pc}
 8006c22:	bf00      	nop
 8006c24:	08007d50 	.word	0x08007d50
 8006c28:	08007d61 	.word	0x08007d61

08006c2c <__multiply>:
 8006c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c30:	4614      	mov	r4, r2
 8006c32:	690a      	ldr	r2, [r1, #16]
 8006c34:	6923      	ldr	r3, [r4, #16]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	bfa8      	it	ge
 8006c3a:	4623      	movge	r3, r4
 8006c3c:	460f      	mov	r7, r1
 8006c3e:	bfa4      	itt	ge
 8006c40:	460c      	movge	r4, r1
 8006c42:	461f      	movge	r7, r3
 8006c44:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006c48:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006c4c:	68a3      	ldr	r3, [r4, #8]
 8006c4e:	6861      	ldr	r1, [r4, #4]
 8006c50:	eb0a 0609 	add.w	r6, sl, r9
 8006c54:	42b3      	cmp	r3, r6
 8006c56:	b085      	sub	sp, #20
 8006c58:	bfb8      	it	lt
 8006c5a:	3101      	addlt	r1, #1
 8006c5c:	f7ff fedc 	bl	8006a18 <_Balloc>
 8006c60:	b930      	cbnz	r0, 8006c70 <__multiply+0x44>
 8006c62:	4602      	mov	r2, r0
 8006c64:	4b44      	ldr	r3, [pc, #272]	@ (8006d78 <__multiply+0x14c>)
 8006c66:	4845      	ldr	r0, [pc, #276]	@ (8006d7c <__multiply+0x150>)
 8006c68:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006c6c:	f000 fc84 	bl	8007578 <__assert_func>
 8006c70:	f100 0514 	add.w	r5, r0, #20
 8006c74:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006c78:	462b      	mov	r3, r5
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	4543      	cmp	r3, r8
 8006c7e:	d321      	bcc.n	8006cc4 <__multiply+0x98>
 8006c80:	f107 0114 	add.w	r1, r7, #20
 8006c84:	f104 0214 	add.w	r2, r4, #20
 8006c88:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006c8c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006c90:	9302      	str	r3, [sp, #8]
 8006c92:	1b13      	subs	r3, r2, r4
 8006c94:	3b15      	subs	r3, #21
 8006c96:	f023 0303 	bic.w	r3, r3, #3
 8006c9a:	3304      	adds	r3, #4
 8006c9c:	f104 0715 	add.w	r7, r4, #21
 8006ca0:	42ba      	cmp	r2, r7
 8006ca2:	bf38      	it	cc
 8006ca4:	2304      	movcc	r3, #4
 8006ca6:	9301      	str	r3, [sp, #4]
 8006ca8:	9b02      	ldr	r3, [sp, #8]
 8006caa:	9103      	str	r1, [sp, #12]
 8006cac:	428b      	cmp	r3, r1
 8006cae:	d80c      	bhi.n	8006cca <__multiply+0x9e>
 8006cb0:	2e00      	cmp	r6, #0
 8006cb2:	dd03      	ble.n	8006cbc <__multiply+0x90>
 8006cb4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d05b      	beq.n	8006d74 <__multiply+0x148>
 8006cbc:	6106      	str	r6, [r0, #16]
 8006cbe:	b005      	add	sp, #20
 8006cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cc4:	f843 2b04 	str.w	r2, [r3], #4
 8006cc8:	e7d8      	b.n	8006c7c <__multiply+0x50>
 8006cca:	f8b1 a000 	ldrh.w	sl, [r1]
 8006cce:	f1ba 0f00 	cmp.w	sl, #0
 8006cd2:	d024      	beq.n	8006d1e <__multiply+0xf2>
 8006cd4:	f104 0e14 	add.w	lr, r4, #20
 8006cd8:	46a9      	mov	r9, r5
 8006cda:	f04f 0c00 	mov.w	ip, #0
 8006cde:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006ce2:	f8d9 3000 	ldr.w	r3, [r9]
 8006ce6:	fa1f fb87 	uxth.w	fp, r7
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	fb0a 330b 	mla	r3, sl, fp, r3
 8006cf0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006cf4:	f8d9 7000 	ldr.w	r7, [r9]
 8006cf8:	4463      	add	r3, ip
 8006cfa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006cfe:	fb0a c70b 	mla	r7, sl, fp, ip
 8006d02:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006d0c:	4572      	cmp	r2, lr
 8006d0e:	f849 3b04 	str.w	r3, [r9], #4
 8006d12:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006d16:	d8e2      	bhi.n	8006cde <__multiply+0xb2>
 8006d18:	9b01      	ldr	r3, [sp, #4]
 8006d1a:	f845 c003 	str.w	ip, [r5, r3]
 8006d1e:	9b03      	ldr	r3, [sp, #12]
 8006d20:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006d24:	3104      	adds	r1, #4
 8006d26:	f1b9 0f00 	cmp.w	r9, #0
 8006d2a:	d021      	beq.n	8006d70 <__multiply+0x144>
 8006d2c:	682b      	ldr	r3, [r5, #0]
 8006d2e:	f104 0c14 	add.w	ip, r4, #20
 8006d32:	46ae      	mov	lr, r5
 8006d34:	f04f 0a00 	mov.w	sl, #0
 8006d38:	f8bc b000 	ldrh.w	fp, [ip]
 8006d3c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006d40:	fb09 770b 	mla	r7, r9, fp, r7
 8006d44:	4457      	add	r7, sl
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006d4c:	f84e 3b04 	str.w	r3, [lr], #4
 8006d50:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006d54:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d58:	f8be 3000 	ldrh.w	r3, [lr]
 8006d5c:	fb09 330a 	mla	r3, r9, sl, r3
 8006d60:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006d64:	4562      	cmp	r2, ip
 8006d66:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d6a:	d8e5      	bhi.n	8006d38 <__multiply+0x10c>
 8006d6c:	9f01      	ldr	r7, [sp, #4]
 8006d6e:	51eb      	str	r3, [r5, r7]
 8006d70:	3504      	adds	r5, #4
 8006d72:	e799      	b.n	8006ca8 <__multiply+0x7c>
 8006d74:	3e01      	subs	r6, #1
 8006d76:	e79b      	b.n	8006cb0 <__multiply+0x84>
 8006d78:	08007d50 	.word	0x08007d50
 8006d7c:	08007d61 	.word	0x08007d61

08006d80 <__pow5mult>:
 8006d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d84:	4615      	mov	r5, r2
 8006d86:	f012 0203 	ands.w	r2, r2, #3
 8006d8a:	4607      	mov	r7, r0
 8006d8c:	460e      	mov	r6, r1
 8006d8e:	d007      	beq.n	8006da0 <__pow5mult+0x20>
 8006d90:	4c25      	ldr	r4, [pc, #148]	@ (8006e28 <__pow5mult+0xa8>)
 8006d92:	3a01      	subs	r2, #1
 8006d94:	2300      	movs	r3, #0
 8006d96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006d9a:	f7ff fe9f 	bl	8006adc <__multadd>
 8006d9e:	4606      	mov	r6, r0
 8006da0:	10ad      	asrs	r5, r5, #2
 8006da2:	d03d      	beq.n	8006e20 <__pow5mult+0xa0>
 8006da4:	69fc      	ldr	r4, [r7, #28]
 8006da6:	b97c      	cbnz	r4, 8006dc8 <__pow5mult+0x48>
 8006da8:	2010      	movs	r0, #16
 8006daa:	f7ff fd7f 	bl	80068ac <malloc>
 8006dae:	4602      	mov	r2, r0
 8006db0:	61f8      	str	r0, [r7, #28]
 8006db2:	b928      	cbnz	r0, 8006dc0 <__pow5mult+0x40>
 8006db4:	4b1d      	ldr	r3, [pc, #116]	@ (8006e2c <__pow5mult+0xac>)
 8006db6:	481e      	ldr	r0, [pc, #120]	@ (8006e30 <__pow5mult+0xb0>)
 8006db8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006dbc:	f000 fbdc 	bl	8007578 <__assert_func>
 8006dc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006dc4:	6004      	str	r4, [r0, #0]
 8006dc6:	60c4      	str	r4, [r0, #12]
 8006dc8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006dcc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006dd0:	b94c      	cbnz	r4, 8006de6 <__pow5mult+0x66>
 8006dd2:	f240 2171 	movw	r1, #625	@ 0x271
 8006dd6:	4638      	mov	r0, r7
 8006dd8:	f7ff ff12 	bl	8006c00 <__i2b>
 8006ddc:	2300      	movs	r3, #0
 8006dde:	f8c8 0008 	str.w	r0, [r8, #8]
 8006de2:	4604      	mov	r4, r0
 8006de4:	6003      	str	r3, [r0, #0]
 8006de6:	f04f 0900 	mov.w	r9, #0
 8006dea:	07eb      	lsls	r3, r5, #31
 8006dec:	d50a      	bpl.n	8006e04 <__pow5mult+0x84>
 8006dee:	4631      	mov	r1, r6
 8006df0:	4622      	mov	r2, r4
 8006df2:	4638      	mov	r0, r7
 8006df4:	f7ff ff1a 	bl	8006c2c <__multiply>
 8006df8:	4631      	mov	r1, r6
 8006dfa:	4680      	mov	r8, r0
 8006dfc:	4638      	mov	r0, r7
 8006dfe:	f7ff fe4b 	bl	8006a98 <_Bfree>
 8006e02:	4646      	mov	r6, r8
 8006e04:	106d      	asrs	r5, r5, #1
 8006e06:	d00b      	beq.n	8006e20 <__pow5mult+0xa0>
 8006e08:	6820      	ldr	r0, [r4, #0]
 8006e0a:	b938      	cbnz	r0, 8006e1c <__pow5mult+0x9c>
 8006e0c:	4622      	mov	r2, r4
 8006e0e:	4621      	mov	r1, r4
 8006e10:	4638      	mov	r0, r7
 8006e12:	f7ff ff0b 	bl	8006c2c <__multiply>
 8006e16:	6020      	str	r0, [r4, #0]
 8006e18:	f8c0 9000 	str.w	r9, [r0]
 8006e1c:	4604      	mov	r4, r0
 8006e1e:	e7e4      	b.n	8006dea <__pow5mult+0x6a>
 8006e20:	4630      	mov	r0, r6
 8006e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e26:	bf00      	nop
 8006e28:	08007dbc 	.word	0x08007dbc
 8006e2c:	08007ce1 	.word	0x08007ce1
 8006e30:	08007d61 	.word	0x08007d61

08006e34 <__lshift>:
 8006e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e38:	460c      	mov	r4, r1
 8006e3a:	6849      	ldr	r1, [r1, #4]
 8006e3c:	6923      	ldr	r3, [r4, #16]
 8006e3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006e42:	68a3      	ldr	r3, [r4, #8]
 8006e44:	4607      	mov	r7, r0
 8006e46:	4691      	mov	r9, r2
 8006e48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006e4c:	f108 0601 	add.w	r6, r8, #1
 8006e50:	42b3      	cmp	r3, r6
 8006e52:	db0b      	blt.n	8006e6c <__lshift+0x38>
 8006e54:	4638      	mov	r0, r7
 8006e56:	f7ff fddf 	bl	8006a18 <_Balloc>
 8006e5a:	4605      	mov	r5, r0
 8006e5c:	b948      	cbnz	r0, 8006e72 <__lshift+0x3e>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	4b28      	ldr	r3, [pc, #160]	@ (8006f04 <__lshift+0xd0>)
 8006e62:	4829      	ldr	r0, [pc, #164]	@ (8006f08 <__lshift+0xd4>)
 8006e64:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006e68:	f000 fb86 	bl	8007578 <__assert_func>
 8006e6c:	3101      	adds	r1, #1
 8006e6e:	005b      	lsls	r3, r3, #1
 8006e70:	e7ee      	b.n	8006e50 <__lshift+0x1c>
 8006e72:	2300      	movs	r3, #0
 8006e74:	f100 0114 	add.w	r1, r0, #20
 8006e78:	f100 0210 	add.w	r2, r0, #16
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	4553      	cmp	r3, sl
 8006e80:	db33      	blt.n	8006eea <__lshift+0xb6>
 8006e82:	6920      	ldr	r0, [r4, #16]
 8006e84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e88:	f104 0314 	add.w	r3, r4, #20
 8006e8c:	f019 091f 	ands.w	r9, r9, #31
 8006e90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006e94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006e98:	d02b      	beq.n	8006ef2 <__lshift+0xbe>
 8006e9a:	f1c9 0e20 	rsb	lr, r9, #32
 8006e9e:	468a      	mov	sl, r1
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	6818      	ldr	r0, [r3, #0]
 8006ea4:	fa00 f009 	lsl.w	r0, r0, r9
 8006ea8:	4310      	orrs	r0, r2
 8006eaa:	f84a 0b04 	str.w	r0, [sl], #4
 8006eae:	f853 2b04 	ldr.w	r2, [r3], #4
 8006eb2:	459c      	cmp	ip, r3
 8006eb4:	fa22 f20e 	lsr.w	r2, r2, lr
 8006eb8:	d8f3      	bhi.n	8006ea2 <__lshift+0x6e>
 8006eba:	ebac 0304 	sub.w	r3, ip, r4
 8006ebe:	3b15      	subs	r3, #21
 8006ec0:	f023 0303 	bic.w	r3, r3, #3
 8006ec4:	3304      	adds	r3, #4
 8006ec6:	f104 0015 	add.w	r0, r4, #21
 8006eca:	4584      	cmp	ip, r0
 8006ecc:	bf38      	it	cc
 8006ece:	2304      	movcc	r3, #4
 8006ed0:	50ca      	str	r2, [r1, r3]
 8006ed2:	b10a      	cbz	r2, 8006ed8 <__lshift+0xa4>
 8006ed4:	f108 0602 	add.w	r6, r8, #2
 8006ed8:	3e01      	subs	r6, #1
 8006eda:	4638      	mov	r0, r7
 8006edc:	612e      	str	r6, [r5, #16]
 8006ede:	4621      	mov	r1, r4
 8006ee0:	f7ff fdda 	bl	8006a98 <_Bfree>
 8006ee4:	4628      	mov	r0, r5
 8006ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eea:	f842 0f04 	str.w	r0, [r2, #4]!
 8006eee:	3301      	adds	r3, #1
 8006ef0:	e7c5      	b.n	8006e7e <__lshift+0x4a>
 8006ef2:	3904      	subs	r1, #4
 8006ef4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ef8:	f841 2f04 	str.w	r2, [r1, #4]!
 8006efc:	459c      	cmp	ip, r3
 8006efe:	d8f9      	bhi.n	8006ef4 <__lshift+0xc0>
 8006f00:	e7ea      	b.n	8006ed8 <__lshift+0xa4>
 8006f02:	bf00      	nop
 8006f04:	08007d50 	.word	0x08007d50
 8006f08:	08007d61 	.word	0x08007d61

08006f0c <__mcmp>:
 8006f0c:	690a      	ldr	r2, [r1, #16]
 8006f0e:	4603      	mov	r3, r0
 8006f10:	6900      	ldr	r0, [r0, #16]
 8006f12:	1a80      	subs	r0, r0, r2
 8006f14:	b530      	push	{r4, r5, lr}
 8006f16:	d10e      	bne.n	8006f36 <__mcmp+0x2a>
 8006f18:	3314      	adds	r3, #20
 8006f1a:	3114      	adds	r1, #20
 8006f1c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006f20:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006f24:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006f28:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006f2c:	4295      	cmp	r5, r2
 8006f2e:	d003      	beq.n	8006f38 <__mcmp+0x2c>
 8006f30:	d205      	bcs.n	8006f3e <__mcmp+0x32>
 8006f32:	f04f 30ff 	mov.w	r0, #4294967295
 8006f36:	bd30      	pop	{r4, r5, pc}
 8006f38:	42a3      	cmp	r3, r4
 8006f3a:	d3f3      	bcc.n	8006f24 <__mcmp+0x18>
 8006f3c:	e7fb      	b.n	8006f36 <__mcmp+0x2a>
 8006f3e:	2001      	movs	r0, #1
 8006f40:	e7f9      	b.n	8006f36 <__mcmp+0x2a>
	...

08006f44 <__mdiff>:
 8006f44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f48:	4689      	mov	r9, r1
 8006f4a:	4606      	mov	r6, r0
 8006f4c:	4611      	mov	r1, r2
 8006f4e:	4648      	mov	r0, r9
 8006f50:	4614      	mov	r4, r2
 8006f52:	f7ff ffdb 	bl	8006f0c <__mcmp>
 8006f56:	1e05      	subs	r5, r0, #0
 8006f58:	d112      	bne.n	8006f80 <__mdiff+0x3c>
 8006f5a:	4629      	mov	r1, r5
 8006f5c:	4630      	mov	r0, r6
 8006f5e:	f7ff fd5b 	bl	8006a18 <_Balloc>
 8006f62:	4602      	mov	r2, r0
 8006f64:	b928      	cbnz	r0, 8006f72 <__mdiff+0x2e>
 8006f66:	4b3f      	ldr	r3, [pc, #252]	@ (8007064 <__mdiff+0x120>)
 8006f68:	f240 2137 	movw	r1, #567	@ 0x237
 8006f6c:	483e      	ldr	r0, [pc, #248]	@ (8007068 <__mdiff+0x124>)
 8006f6e:	f000 fb03 	bl	8007578 <__assert_func>
 8006f72:	2301      	movs	r3, #1
 8006f74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006f78:	4610      	mov	r0, r2
 8006f7a:	b003      	add	sp, #12
 8006f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f80:	bfbc      	itt	lt
 8006f82:	464b      	movlt	r3, r9
 8006f84:	46a1      	movlt	r9, r4
 8006f86:	4630      	mov	r0, r6
 8006f88:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006f8c:	bfba      	itte	lt
 8006f8e:	461c      	movlt	r4, r3
 8006f90:	2501      	movlt	r5, #1
 8006f92:	2500      	movge	r5, #0
 8006f94:	f7ff fd40 	bl	8006a18 <_Balloc>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	b918      	cbnz	r0, 8006fa4 <__mdiff+0x60>
 8006f9c:	4b31      	ldr	r3, [pc, #196]	@ (8007064 <__mdiff+0x120>)
 8006f9e:	f240 2145 	movw	r1, #581	@ 0x245
 8006fa2:	e7e3      	b.n	8006f6c <__mdiff+0x28>
 8006fa4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006fa8:	6926      	ldr	r6, [r4, #16]
 8006faa:	60c5      	str	r5, [r0, #12]
 8006fac:	f109 0310 	add.w	r3, r9, #16
 8006fb0:	f109 0514 	add.w	r5, r9, #20
 8006fb4:	f104 0e14 	add.w	lr, r4, #20
 8006fb8:	f100 0b14 	add.w	fp, r0, #20
 8006fbc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006fc0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006fc4:	9301      	str	r3, [sp, #4]
 8006fc6:	46d9      	mov	r9, fp
 8006fc8:	f04f 0c00 	mov.w	ip, #0
 8006fcc:	9b01      	ldr	r3, [sp, #4]
 8006fce:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006fd2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006fd6:	9301      	str	r3, [sp, #4]
 8006fd8:	fa1f f38a 	uxth.w	r3, sl
 8006fdc:	4619      	mov	r1, r3
 8006fde:	b283      	uxth	r3, r0
 8006fe0:	1acb      	subs	r3, r1, r3
 8006fe2:	0c00      	lsrs	r0, r0, #16
 8006fe4:	4463      	add	r3, ip
 8006fe6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006fea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006ff4:	4576      	cmp	r6, lr
 8006ff6:	f849 3b04 	str.w	r3, [r9], #4
 8006ffa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006ffe:	d8e5      	bhi.n	8006fcc <__mdiff+0x88>
 8007000:	1b33      	subs	r3, r6, r4
 8007002:	3b15      	subs	r3, #21
 8007004:	f023 0303 	bic.w	r3, r3, #3
 8007008:	3415      	adds	r4, #21
 800700a:	3304      	adds	r3, #4
 800700c:	42a6      	cmp	r6, r4
 800700e:	bf38      	it	cc
 8007010:	2304      	movcc	r3, #4
 8007012:	441d      	add	r5, r3
 8007014:	445b      	add	r3, fp
 8007016:	461e      	mov	r6, r3
 8007018:	462c      	mov	r4, r5
 800701a:	4544      	cmp	r4, r8
 800701c:	d30e      	bcc.n	800703c <__mdiff+0xf8>
 800701e:	f108 0103 	add.w	r1, r8, #3
 8007022:	1b49      	subs	r1, r1, r5
 8007024:	f021 0103 	bic.w	r1, r1, #3
 8007028:	3d03      	subs	r5, #3
 800702a:	45a8      	cmp	r8, r5
 800702c:	bf38      	it	cc
 800702e:	2100      	movcc	r1, #0
 8007030:	440b      	add	r3, r1
 8007032:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007036:	b191      	cbz	r1, 800705e <__mdiff+0x11a>
 8007038:	6117      	str	r7, [r2, #16]
 800703a:	e79d      	b.n	8006f78 <__mdiff+0x34>
 800703c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007040:	46e6      	mov	lr, ip
 8007042:	0c08      	lsrs	r0, r1, #16
 8007044:	fa1c fc81 	uxtah	ip, ip, r1
 8007048:	4471      	add	r1, lr
 800704a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800704e:	b289      	uxth	r1, r1
 8007050:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007054:	f846 1b04 	str.w	r1, [r6], #4
 8007058:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800705c:	e7dd      	b.n	800701a <__mdiff+0xd6>
 800705e:	3f01      	subs	r7, #1
 8007060:	e7e7      	b.n	8007032 <__mdiff+0xee>
 8007062:	bf00      	nop
 8007064:	08007d50 	.word	0x08007d50
 8007068:	08007d61 	.word	0x08007d61

0800706c <__d2b>:
 800706c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007070:	460f      	mov	r7, r1
 8007072:	2101      	movs	r1, #1
 8007074:	ec59 8b10 	vmov	r8, r9, d0
 8007078:	4616      	mov	r6, r2
 800707a:	f7ff fccd 	bl	8006a18 <_Balloc>
 800707e:	4604      	mov	r4, r0
 8007080:	b930      	cbnz	r0, 8007090 <__d2b+0x24>
 8007082:	4602      	mov	r2, r0
 8007084:	4b23      	ldr	r3, [pc, #140]	@ (8007114 <__d2b+0xa8>)
 8007086:	4824      	ldr	r0, [pc, #144]	@ (8007118 <__d2b+0xac>)
 8007088:	f240 310f 	movw	r1, #783	@ 0x30f
 800708c:	f000 fa74 	bl	8007578 <__assert_func>
 8007090:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007094:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007098:	b10d      	cbz	r5, 800709e <__d2b+0x32>
 800709a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800709e:	9301      	str	r3, [sp, #4]
 80070a0:	f1b8 0300 	subs.w	r3, r8, #0
 80070a4:	d023      	beq.n	80070ee <__d2b+0x82>
 80070a6:	4668      	mov	r0, sp
 80070a8:	9300      	str	r3, [sp, #0]
 80070aa:	f7ff fd7c 	bl	8006ba6 <__lo0bits>
 80070ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 80070b2:	b1d0      	cbz	r0, 80070ea <__d2b+0x7e>
 80070b4:	f1c0 0320 	rsb	r3, r0, #32
 80070b8:	fa02 f303 	lsl.w	r3, r2, r3
 80070bc:	430b      	orrs	r3, r1
 80070be:	40c2      	lsrs	r2, r0
 80070c0:	6163      	str	r3, [r4, #20]
 80070c2:	9201      	str	r2, [sp, #4]
 80070c4:	9b01      	ldr	r3, [sp, #4]
 80070c6:	61a3      	str	r3, [r4, #24]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	bf0c      	ite	eq
 80070cc:	2201      	moveq	r2, #1
 80070ce:	2202      	movne	r2, #2
 80070d0:	6122      	str	r2, [r4, #16]
 80070d2:	b1a5      	cbz	r5, 80070fe <__d2b+0x92>
 80070d4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80070d8:	4405      	add	r5, r0
 80070da:	603d      	str	r5, [r7, #0]
 80070dc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80070e0:	6030      	str	r0, [r6, #0]
 80070e2:	4620      	mov	r0, r4
 80070e4:	b003      	add	sp, #12
 80070e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80070ea:	6161      	str	r1, [r4, #20]
 80070ec:	e7ea      	b.n	80070c4 <__d2b+0x58>
 80070ee:	a801      	add	r0, sp, #4
 80070f0:	f7ff fd59 	bl	8006ba6 <__lo0bits>
 80070f4:	9b01      	ldr	r3, [sp, #4]
 80070f6:	6163      	str	r3, [r4, #20]
 80070f8:	3020      	adds	r0, #32
 80070fa:	2201      	movs	r2, #1
 80070fc:	e7e8      	b.n	80070d0 <__d2b+0x64>
 80070fe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007102:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007106:	6038      	str	r0, [r7, #0]
 8007108:	6918      	ldr	r0, [r3, #16]
 800710a:	f7ff fd2d 	bl	8006b68 <__hi0bits>
 800710e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007112:	e7e5      	b.n	80070e0 <__d2b+0x74>
 8007114:	08007d50 	.word	0x08007d50
 8007118:	08007d61 	.word	0x08007d61

0800711c <__ssputs_r>:
 800711c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007120:	688e      	ldr	r6, [r1, #8]
 8007122:	461f      	mov	r7, r3
 8007124:	42be      	cmp	r6, r7
 8007126:	680b      	ldr	r3, [r1, #0]
 8007128:	4682      	mov	sl, r0
 800712a:	460c      	mov	r4, r1
 800712c:	4690      	mov	r8, r2
 800712e:	d82d      	bhi.n	800718c <__ssputs_r+0x70>
 8007130:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007134:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007138:	d026      	beq.n	8007188 <__ssputs_r+0x6c>
 800713a:	6965      	ldr	r5, [r4, #20]
 800713c:	6909      	ldr	r1, [r1, #16]
 800713e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007142:	eba3 0901 	sub.w	r9, r3, r1
 8007146:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800714a:	1c7b      	adds	r3, r7, #1
 800714c:	444b      	add	r3, r9
 800714e:	106d      	asrs	r5, r5, #1
 8007150:	429d      	cmp	r5, r3
 8007152:	bf38      	it	cc
 8007154:	461d      	movcc	r5, r3
 8007156:	0553      	lsls	r3, r2, #21
 8007158:	d527      	bpl.n	80071aa <__ssputs_r+0x8e>
 800715a:	4629      	mov	r1, r5
 800715c:	f7ff fbd0 	bl	8006900 <_malloc_r>
 8007160:	4606      	mov	r6, r0
 8007162:	b360      	cbz	r0, 80071be <__ssputs_r+0xa2>
 8007164:	6921      	ldr	r1, [r4, #16]
 8007166:	464a      	mov	r2, r9
 8007168:	f7fe fcf9 	bl	8005b5e <memcpy>
 800716c:	89a3      	ldrh	r3, [r4, #12]
 800716e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007172:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007176:	81a3      	strh	r3, [r4, #12]
 8007178:	6126      	str	r6, [r4, #16]
 800717a:	6165      	str	r5, [r4, #20]
 800717c:	444e      	add	r6, r9
 800717e:	eba5 0509 	sub.w	r5, r5, r9
 8007182:	6026      	str	r6, [r4, #0]
 8007184:	60a5      	str	r5, [r4, #8]
 8007186:	463e      	mov	r6, r7
 8007188:	42be      	cmp	r6, r7
 800718a:	d900      	bls.n	800718e <__ssputs_r+0x72>
 800718c:	463e      	mov	r6, r7
 800718e:	6820      	ldr	r0, [r4, #0]
 8007190:	4632      	mov	r2, r6
 8007192:	4641      	mov	r1, r8
 8007194:	f000 f9c6 	bl	8007524 <memmove>
 8007198:	68a3      	ldr	r3, [r4, #8]
 800719a:	1b9b      	subs	r3, r3, r6
 800719c:	60a3      	str	r3, [r4, #8]
 800719e:	6823      	ldr	r3, [r4, #0]
 80071a0:	4433      	add	r3, r6
 80071a2:	6023      	str	r3, [r4, #0]
 80071a4:	2000      	movs	r0, #0
 80071a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071aa:	462a      	mov	r2, r5
 80071ac:	f000 fa28 	bl	8007600 <_realloc_r>
 80071b0:	4606      	mov	r6, r0
 80071b2:	2800      	cmp	r0, #0
 80071b4:	d1e0      	bne.n	8007178 <__ssputs_r+0x5c>
 80071b6:	6921      	ldr	r1, [r4, #16]
 80071b8:	4650      	mov	r0, sl
 80071ba:	f7ff fb2d 	bl	8006818 <_free_r>
 80071be:	230c      	movs	r3, #12
 80071c0:	f8ca 3000 	str.w	r3, [sl]
 80071c4:	89a3      	ldrh	r3, [r4, #12]
 80071c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071ca:	81a3      	strh	r3, [r4, #12]
 80071cc:	f04f 30ff 	mov.w	r0, #4294967295
 80071d0:	e7e9      	b.n	80071a6 <__ssputs_r+0x8a>
	...

080071d4 <_svfiprintf_r>:
 80071d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071d8:	4698      	mov	r8, r3
 80071da:	898b      	ldrh	r3, [r1, #12]
 80071dc:	061b      	lsls	r3, r3, #24
 80071de:	b09d      	sub	sp, #116	@ 0x74
 80071e0:	4607      	mov	r7, r0
 80071e2:	460d      	mov	r5, r1
 80071e4:	4614      	mov	r4, r2
 80071e6:	d510      	bpl.n	800720a <_svfiprintf_r+0x36>
 80071e8:	690b      	ldr	r3, [r1, #16]
 80071ea:	b973      	cbnz	r3, 800720a <_svfiprintf_r+0x36>
 80071ec:	2140      	movs	r1, #64	@ 0x40
 80071ee:	f7ff fb87 	bl	8006900 <_malloc_r>
 80071f2:	6028      	str	r0, [r5, #0]
 80071f4:	6128      	str	r0, [r5, #16]
 80071f6:	b930      	cbnz	r0, 8007206 <_svfiprintf_r+0x32>
 80071f8:	230c      	movs	r3, #12
 80071fa:	603b      	str	r3, [r7, #0]
 80071fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007200:	b01d      	add	sp, #116	@ 0x74
 8007202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007206:	2340      	movs	r3, #64	@ 0x40
 8007208:	616b      	str	r3, [r5, #20]
 800720a:	2300      	movs	r3, #0
 800720c:	9309      	str	r3, [sp, #36]	@ 0x24
 800720e:	2320      	movs	r3, #32
 8007210:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007214:	f8cd 800c 	str.w	r8, [sp, #12]
 8007218:	2330      	movs	r3, #48	@ 0x30
 800721a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80073b8 <_svfiprintf_r+0x1e4>
 800721e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007222:	f04f 0901 	mov.w	r9, #1
 8007226:	4623      	mov	r3, r4
 8007228:	469a      	mov	sl, r3
 800722a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800722e:	b10a      	cbz	r2, 8007234 <_svfiprintf_r+0x60>
 8007230:	2a25      	cmp	r2, #37	@ 0x25
 8007232:	d1f9      	bne.n	8007228 <_svfiprintf_r+0x54>
 8007234:	ebba 0b04 	subs.w	fp, sl, r4
 8007238:	d00b      	beq.n	8007252 <_svfiprintf_r+0x7e>
 800723a:	465b      	mov	r3, fp
 800723c:	4622      	mov	r2, r4
 800723e:	4629      	mov	r1, r5
 8007240:	4638      	mov	r0, r7
 8007242:	f7ff ff6b 	bl	800711c <__ssputs_r>
 8007246:	3001      	adds	r0, #1
 8007248:	f000 80a7 	beq.w	800739a <_svfiprintf_r+0x1c6>
 800724c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800724e:	445a      	add	r2, fp
 8007250:	9209      	str	r2, [sp, #36]	@ 0x24
 8007252:	f89a 3000 	ldrb.w	r3, [sl]
 8007256:	2b00      	cmp	r3, #0
 8007258:	f000 809f 	beq.w	800739a <_svfiprintf_r+0x1c6>
 800725c:	2300      	movs	r3, #0
 800725e:	f04f 32ff 	mov.w	r2, #4294967295
 8007262:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007266:	f10a 0a01 	add.w	sl, sl, #1
 800726a:	9304      	str	r3, [sp, #16]
 800726c:	9307      	str	r3, [sp, #28]
 800726e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007272:	931a      	str	r3, [sp, #104]	@ 0x68
 8007274:	4654      	mov	r4, sl
 8007276:	2205      	movs	r2, #5
 8007278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800727c:	484e      	ldr	r0, [pc, #312]	@ (80073b8 <_svfiprintf_r+0x1e4>)
 800727e:	f7f8 ffaf 	bl	80001e0 <memchr>
 8007282:	9a04      	ldr	r2, [sp, #16]
 8007284:	b9d8      	cbnz	r0, 80072be <_svfiprintf_r+0xea>
 8007286:	06d0      	lsls	r0, r2, #27
 8007288:	bf44      	itt	mi
 800728a:	2320      	movmi	r3, #32
 800728c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007290:	0711      	lsls	r1, r2, #28
 8007292:	bf44      	itt	mi
 8007294:	232b      	movmi	r3, #43	@ 0x2b
 8007296:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800729a:	f89a 3000 	ldrb.w	r3, [sl]
 800729e:	2b2a      	cmp	r3, #42	@ 0x2a
 80072a0:	d015      	beq.n	80072ce <_svfiprintf_r+0xfa>
 80072a2:	9a07      	ldr	r2, [sp, #28]
 80072a4:	4654      	mov	r4, sl
 80072a6:	2000      	movs	r0, #0
 80072a8:	f04f 0c0a 	mov.w	ip, #10
 80072ac:	4621      	mov	r1, r4
 80072ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072b2:	3b30      	subs	r3, #48	@ 0x30
 80072b4:	2b09      	cmp	r3, #9
 80072b6:	d94b      	bls.n	8007350 <_svfiprintf_r+0x17c>
 80072b8:	b1b0      	cbz	r0, 80072e8 <_svfiprintf_r+0x114>
 80072ba:	9207      	str	r2, [sp, #28]
 80072bc:	e014      	b.n	80072e8 <_svfiprintf_r+0x114>
 80072be:	eba0 0308 	sub.w	r3, r0, r8
 80072c2:	fa09 f303 	lsl.w	r3, r9, r3
 80072c6:	4313      	orrs	r3, r2
 80072c8:	9304      	str	r3, [sp, #16]
 80072ca:	46a2      	mov	sl, r4
 80072cc:	e7d2      	b.n	8007274 <_svfiprintf_r+0xa0>
 80072ce:	9b03      	ldr	r3, [sp, #12]
 80072d0:	1d19      	adds	r1, r3, #4
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	9103      	str	r1, [sp, #12]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	bfbb      	ittet	lt
 80072da:	425b      	neglt	r3, r3
 80072dc:	f042 0202 	orrlt.w	r2, r2, #2
 80072e0:	9307      	strge	r3, [sp, #28]
 80072e2:	9307      	strlt	r3, [sp, #28]
 80072e4:	bfb8      	it	lt
 80072e6:	9204      	strlt	r2, [sp, #16]
 80072e8:	7823      	ldrb	r3, [r4, #0]
 80072ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80072ec:	d10a      	bne.n	8007304 <_svfiprintf_r+0x130>
 80072ee:	7863      	ldrb	r3, [r4, #1]
 80072f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80072f2:	d132      	bne.n	800735a <_svfiprintf_r+0x186>
 80072f4:	9b03      	ldr	r3, [sp, #12]
 80072f6:	1d1a      	adds	r2, r3, #4
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	9203      	str	r2, [sp, #12]
 80072fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007300:	3402      	adds	r4, #2
 8007302:	9305      	str	r3, [sp, #20]
 8007304:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80073c8 <_svfiprintf_r+0x1f4>
 8007308:	7821      	ldrb	r1, [r4, #0]
 800730a:	2203      	movs	r2, #3
 800730c:	4650      	mov	r0, sl
 800730e:	f7f8 ff67 	bl	80001e0 <memchr>
 8007312:	b138      	cbz	r0, 8007324 <_svfiprintf_r+0x150>
 8007314:	9b04      	ldr	r3, [sp, #16]
 8007316:	eba0 000a 	sub.w	r0, r0, sl
 800731a:	2240      	movs	r2, #64	@ 0x40
 800731c:	4082      	lsls	r2, r0
 800731e:	4313      	orrs	r3, r2
 8007320:	3401      	adds	r4, #1
 8007322:	9304      	str	r3, [sp, #16]
 8007324:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007328:	4824      	ldr	r0, [pc, #144]	@ (80073bc <_svfiprintf_r+0x1e8>)
 800732a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800732e:	2206      	movs	r2, #6
 8007330:	f7f8 ff56 	bl	80001e0 <memchr>
 8007334:	2800      	cmp	r0, #0
 8007336:	d036      	beq.n	80073a6 <_svfiprintf_r+0x1d2>
 8007338:	4b21      	ldr	r3, [pc, #132]	@ (80073c0 <_svfiprintf_r+0x1ec>)
 800733a:	bb1b      	cbnz	r3, 8007384 <_svfiprintf_r+0x1b0>
 800733c:	9b03      	ldr	r3, [sp, #12]
 800733e:	3307      	adds	r3, #7
 8007340:	f023 0307 	bic.w	r3, r3, #7
 8007344:	3308      	adds	r3, #8
 8007346:	9303      	str	r3, [sp, #12]
 8007348:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800734a:	4433      	add	r3, r6
 800734c:	9309      	str	r3, [sp, #36]	@ 0x24
 800734e:	e76a      	b.n	8007226 <_svfiprintf_r+0x52>
 8007350:	fb0c 3202 	mla	r2, ip, r2, r3
 8007354:	460c      	mov	r4, r1
 8007356:	2001      	movs	r0, #1
 8007358:	e7a8      	b.n	80072ac <_svfiprintf_r+0xd8>
 800735a:	2300      	movs	r3, #0
 800735c:	3401      	adds	r4, #1
 800735e:	9305      	str	r3, [sp, #20]
 8007360:	4619      	mov	r1, r3
 8007362:	f04f 0c0a 	mov.w	ip, #10
 8007366:	4620      	mov	r0, r4
 8007368:	f810 2b01 	ldrb.w	r2, [r0], #1
 800736c:	3a30      	subs	r2, #48	@ 0x30
 800736e:	2a09      	cmp	r2, #9
 8007370:	d903      	bls.n	800737a <_svfiprintf_r+0x1a6>
 8007372:	2b00      	cmp	r3, #0
 8007374:	d0c6      	beq.n	8007304 <_svfiprintf_r+0x130>
 8007376:	9105      	str	r1, [sp, #20]
 8007378:	e7c4      	b.n	8007304 <_svfiprintf_r+0x130>
 800737a:	fb0c 2101 	mla	r1, ip, r1, r2
 800737e:	4604      	mov	r4, r0
 8007380:	2301      	movs	r3, #1
 8007382:	e7f0      	b.n	8007366 <_svfiprintf_r+0x192>
 8007384:	ab03      	add	r3, sp, #12
 8007386:	9300      	str	r3, [sp, #0]
 8007388:	462a      	mov	r2, r5
 800738a:	4b0e      	ldr	r3, [pc, #56]	@ (80073c4 <_svfiprintf_r+0x1f0>)
 800738c:	a904      	add	r1, sp, #16
 800738e:	4638      	mov	r0, r7
 8007390:	f7fd fe78 	bl	8005084 <_printf_float>
 8007394:	1c42      	adds	r2, r0, #1
 8007396:	4606      	mov	r6, r0
 8007398:	d1d6      	bne.n	8007348 <_svfiprintf_r+0x174>
 800739a:	89ab      	ldrh	r3, [r5, #12]
 800739c:	065b      	lsls	r3, r3, #25
 800739e:	f53f af2d 	bmi.w	80071fc <_svfiprintf_r+0x28>
 80073a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80073a4:	e72c      	b.n	8007200 <_svfiprintf_r+0x2c>
 80073a6:	ab03      	add	r3, sp, #12
 80073a8:	9300      	str	r3, [sp, #0]
 80073aa:	462a      	mov	r2, r5
 80073ac:	4b05      	ldr	r3, [pc, #20]	@ (80073c4 <_svfiprintf_r+0x1f0>)
 80073ae:	a904      	add	r1, sp, #16
 80073b0:	4638      	mov	r0, r7
 80073b2:	f7fe f8ff 	bl	80055b4 <_printf_i>
 80073b6:	e7ed      	b.n	8007394 <_svfiprintf_r+0x1c0>
 80073b8:	08007eb8 	.word	0x08007eb8
 80073bc:	08007ec2 	.word	0x08007ec2
 80073c0:	08005085 	.word	0x08005085
 80073c4:	0800711d 	.word	0x0800711d
 80073c8:	08007ebe 	.word	0x08007ebe

080073cc <__sflush_r>:
 80073cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80073d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073d4:	0716      	lsls	r6, r2, #28
 80073d6:	4605      	mov	r5, r0
 80073d8:	460c      	mov	r4, r1
 80073da:	d454      	bmi.n	8007486 <__sflush_r+0xba>
 80073dc:	684b      	ldr	r3, [r1, #4]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	dc02      	bgt.n	80073e8 <__sflush_r+0x1c>
 80073e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	dd48      	ble.n	800747a <__sflush_r+0xae>
 80073e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80073ea:	2e00      	cmp	r6, #0
 80073ec:	d045      	beq.n	800747a <__sflush_r+0xae>
 80073ee:	2300      	movs	r3, #0
 80073f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80073f4:	682f      	ldr	r7, [r5, #0]
 80073f6:	6a21      	ldr	r1, [r4, #32]
 80073f8:	602b      	str	r3, [r5, #0]
 80073fa:	d030      	beq.n	800745e <__sflush_r+0x92>
 80073fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80073fe:	89a3      	ldrh	r3, [r4, #12]
 8007400:	0759      	lsls	r1, r3, #29
 8007402:	d505      	bpl.n	8007410 <__sflush_r+0x44>
 8007404:	6863      	ldr	r3, [r4, #4]
 8007406:	1ad2      	subs	r2, r2, r3
 8007408:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800740a:	b10b      	cbz	r3, 8007410 <__sflush_r+0x44>
 800740c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800740e:	1ad2      	subs	r2, r2, r3
 8007410:	2300      	movs	r3, #0
 8007412:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007414:	6a21      	ldr	r1, [r4, #32]
 8007416:	4628      	mov	r0, r5
 8007418:	47b0      	blx	r6
 800741a:	1c43      	adds	r3, r0, #1
 800741c:	89a3      	ldrh	r3, [r4, #12]
 800741e:	d106      	bne.n	800742e <__sflush_r+0x62>
 8007420:	6829      	ldr	r1, [r5, #0]
 8007422:	291d      	cmp	r1, #29
 8007424:	d82b      	bhi.n	800747e <__sflush_r+0xb2>
 8007426:	4a2a      	ldr	r2, [pc, #168]	@ (80074d0 <__sflush_r+0x104>)
 8007428:	410a      	asrs	r2, r1
 800742a:	07d6      	lsls	r6, r2, #31
 800742c:	d427      	bmi.n	800747e <__sflush_r+0xb2>
 800742e:	2200      	movs	r2, #0
 8007430:	6062      	str	r2, [r4, #4]
 8007432:	04d9      	lsls	r1, r3, #19
 8007434:	6922      	ldr	r2, [r4, #16]
 8007436:	6022      	str	r2, [r4, #0]
 8007438:	d504      	bpl.n	8007444 <__sflush_r+0x78>
 800743a:	1c42      	adds	r2, r0, #1
 800743c:	d101      	bne.n	8007442 <__sflush_r+0x76>
 800743e:	682b      	ldr	r3, [r5, #0]
 8007440:	b903      	cbnz	r3, 8007444 <__sflush_r+0x78>
 8007442:	6560      	str	r0, [r4, #84]	@ 0x54
 8007444:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007446:	602f      	str	r7, [r5, #0]
 8007448:	b1b9      	cbz	r1, 800747a <__sflush_r+0xae>
 800744a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800744e:	4299      	cmp	r1, r3
 8007450:	d002      	beq.n	8007458 <__sflush_r+0x8c>
 8007452:	4628      	mov	r0, r5
 8007454:	f7ff f9e0 	bl	8006818 <_free_r>
 8007458:	2300      	movs	r3, #0
 800745a:	6363      	str	r3, [r4, #52]	@ 0x34
 800745c:	e00d      	b.n	800747a <__sflush_r+0xae>
 800745e:	2301      	movs	r3, #1
 8007460:	4628      	mov	r0, r5
 8007462:	47b0      	blx	r6
 8007464:	4602      	mov	r2, r0
 8007466:	1c50      	adds	r0, r2, #1
 8007468:	d1c9      	bne.n	80073fe <__sflush_r+0x32>
 800746a:	682b      	ldr	r3, [r5, #0]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d0c6      	beq.n	80073fe <__sflush_r+0x32>
 8007470:	2b1d      	cmp	r3, #29
 8007472:	d001      	beq.n	8007478 <__sflush_r+0xac>
 8007474:	2b16      	cmp	r3, #22
 8007476:	d11e      	bne.n	80074b6 <__sflush_r+0xea>
 8007478:	602f      	str	r7, [r5, #0]
 800747a:	2000      	movs	r0, #0
 800747c:	e022      	b.n	80074c4 <__sflush_r+0xf8>
 800747e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007482:	b21b      	sxth	r3, r3
 8007484:	e01b      	b.n	80074be <__sflush_r+0xf2>
 8007486:	690f      	ldr	r7, [r1, #16]
 8007488:	2f00      	cmp	r7, #0
 800748a:	d0f6      	beq.n	800747a <__sflush_r+0xae>
 800748c:	0793      	lsls	r3, r2, #30
 800748e:	680e      	ldr	r6, [r1, #0]
 8007490:	bf08      	it	eq
 8007492:	694b      	ldreq	r3, [r1, #20]
 8007494:	600f      	str	r7, [r1, #0]
 8007496:	bf18      	it	ne
 8007498:	2300      	movne	r3, #0
 800749a:	eba6 0807 	sub.w	r8, r6, r7
 800749e:	608b      	str	r3, [r1, #8]
 80074a0:	f1b8 0f00 	cmp.w	r8, #0
 80074a4:	dde9      	ble.n	800747a <__sflush_r+0xae>
 80074a6:	6a21      	ldr	r1, [r4, #32]
 80074a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80074aa:	4643      	mov	r3, r8
 80074ac:	463a      	mov	r2, r7
 80074ae:	4628      	mov	r0, r5
 80074b0:	47b0      	blx	r6
 80074b2:	2800      	cmp	r0, #0
 80074b4:	dc08      	bgt.n	80074c8 <__sflush_r+0xfc>
 80074b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074be:	81a3      	strh	r3, [r4, #12]
 80074c0:	f04f 30ff 	mov.w	r0, #4294967295
 80074c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074c8:	4407      	add	r7, r0
 80074ca:	eba8 0800 	sub.w	r8, r8, r0
 80074ce:	e7e7      	b.n	80074a0 <__sflush_r+0xd4>
 80074d0:	dfbffffe 	.word	0xdfbffffe

080074d4 <_fflush_r>:
 80074d4:	b538      	push	{r3, r4, r5, lr}
 80074d6:	690b      	ldr	r3, [r1, #16]
 80074d8:	4605      	mov	r5, r0
 80074da:	460c      	mov	r4, r1
 80074dc:	b913      	cbnz	r3, 80074e4 <_fflush_r+0x10>
 80074de:	2500      	movs	r5, #0
 80074e0:	4628      	mov	r0, r5
 80074e2:	bd38      	pop	{r3, r4, r5, pc}
 80074e4:	b118      	cbz	r0, 80074ee <_fflush_r+0x1a>
 80074e6:	6a03      	ldr	r3, [r0, #32]
 80074e8:	b90b      	cbnz	r3, 80074ee <_fflush_r+0x1a>
 80074ea:	f7fe fa0f 	bl	800590c <__sinit>
 80074ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d0f3      	beq.n	80074de <_fflush_r+0xa>
 80074f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80074f8:	07d0      	lsls	r0, r2, #31
 80074fa:	d404      	bmi.n	8007506 <_fflush_r+0x32>
 80074fc:	0599      	lsls	r1, r3, #22
 80074fe:	d402      	bmi.n	8007506 <_fflush_r+0x32>
 8007500:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007502:	f7fe fb2a 	bl	8005b5a <__retarget_lock_acquire_recursive>
 8007506:	4628      	mov	r0, r5
 8007508:	4621      	mov	r1, r4
 800750a:	f7ff ff5f 	bl	80073cc <__sflush_r>
 800750e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007510:	07da      	lsls	r2, r3, #31
 8007512:	4605      	mov	r5, r0
 8007514:	d4e4      	bmi.n	80074e0 <_fflush_r+0xc>
 8007516:	89a3      	ldrh	r3, [r4, #12]
 8007518:	059b      	lsls	r3, r3, #22
 800751a:	d4e1      	bmi.n	80074e0 <_fflush_r+0xc>
 800751c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800751e:	f7fe fb1d 	bl	8005b5c <__retarget_lock_release_recursive>
 8007522:	e7dd      	b.n	80074e0 <_fflush_r+0xc>

08007524 <memmove>:
 8007524:	4288      	cmp	r0, r1
 8007526:	b510      	push	{r4, lr}
 8007528:	eb01 0402 	add.w	r4, r1, r2
 800752c:	d902      	bls.n	8007534 <memmove+0x10>
 800752e:	4284      	cmp	r4, r0
 8007530:	4623      	mov	r3, r4
 8007532:	d807      	bhi.n	8007544 <memmove+0x20>
 8007534:	1e43      	subs	r3, r0, #1
 8007536:	42a1      	cmp	r1, r4
 8007538:	d008      	beq.n	800754c <memmove+0x28>
 800753a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800753e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007542:	e7f8      	b.n	8007536 <memmove+0x12>
 8007544:	4402      	add	r2, r0
 8007546:	4601      	mov	r1, r0
 8007548:	428a      	cmp	r2, r1
 800754a:	d100      	bne.n	800754e <memmove+0x2a>
 800754c:	bd10      	pop	{r4, pc}
 800754e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007552:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007556:	e7f7      	b.n	8007548 <memmove+0x24>

08007558 <_sbrk_r>:
 8007558:	b538      	push	{r3, r4, r5, lr}
 800755a:	4d06      	ldr	r5, [pc, #24]	@ (8007574 <_sbrk_r+0x1c>)
 800755c:	2300      	movs	r3, #0
 800755e:	4604      	mov	r4, r0
 8007560:	4608      	mov	r0, r1
 8007562:	602b      	str	r3, [r5, #0]
 8007564:	f7fa fb9e 	bl	8001ca4 <_sbrk>
 8007568:	1c43      	adds	r3, r0, #1
 800756a:	d102      	bne.n	8007572 <_sbrk_r+0x1a>
 800756c:	682b      	ldr	r3, [r5, #0]
 800756e:	b103      	cbz	r3, 8007572 <_sbrk_r+0x1a>
 8007570:	6023      	str	r3, [r4, #0]
 8007572:	bd38      	pop	{r3, r4, r5, pc}
 8007574:	20000594 	.word	0x20000594

08007578 <__assert_func>:
 8007578:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800757a:	4614      	mov	r4, r2
 800757c:	461a      	mov	r2, r3
 800757e:	4b09      	ldr	r3, [pc, #36]	@ (80075a4 <__assert_func+0x2c>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4605      	mov	r5, r0
 8007584:	68d8      	ldr	r0, [r3, #12]
 8007586:	b954      	cbnz	r4, 800759e <__assert_func+0x26>
 8007588:	4b07      	ldr	r3, [pc, #28]	@ (80075a8 <__assert_func+0x30>)
 800758a:	461c      	mov	r4, r3
 800758c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007590:	9100      	str	r1, [sp, #0]
 8007592:	462b      	mov	r3, r5
 8007594:	4905      	ldr	r1, [pc, #20]	@ (80075ac <__assert_func+0x34>)
 8007596:	f000 f86f 	bl	8007678 <fiprintf>
 800759a:	f000 f87f 	bl	800769c <abort>
 800759e:	4b04      	ldr	r3, [pc, #16]	@ (80075b0 <__assert_func+0x38>)
 80075a0:	e7f4      	b.n	800758c <__assert_func+0x14>
 80075a2:	bf00      	nop
 80075a4:	20000140 	.word	0x20000140
 80075a8:	08007f0e 	.word	0x08007f0e
 80075ac:	08007ee0 	.word	0x08007ee0
 80075b0:	08007ed3 	.word	0x08007ed3

080075b4 <_calloc_r>:
 80075b4:	b570      	push	{r4, r5, r6, lr}
 80075b6:	fba1 5402 	umull	r5, r4, r1, r2
 80075ba:	b93c      	cbnz	r4, 80075cc <_calloc_r+0x18>
 80075bc:	4629      	mov	r1, r5
 80075be:	f7ff f99f 	bl	8006900 <_malloc_r>
 80075c2:	4606      	mov	r6, r0
 80075c4:	b928      	cbnz	r0, 80075d2 <_calloc_r+0x1e>
 80075c6:	2600      	movs	r6, #0
 80075c8:	4630      	mov	r0, r6
 80075ca:	bd70      	pop	{r4, r5, r6, pc}
 80075cc:	220c      	movs	r2, #12
 80075ce:	6002      	str	r2, [r0, #0]
 80075d0:	e7f9      	b.n	80075c6 <_calloc_r+0x12>
 80075d2:	462a      	mov	r2, r5
 80075d4:	4621      	mov	r1, r4
 80075d6:	f7fe fa42 	bl	8005a5e <memset>
 80075da:	e7f5      	b.n	80075c8 <_calloc_r+0x14>

080075dc <__ascii_mbtowc>:
 80075dc:	b082      	sub	sp, #8
 80075de:	b901      	cbnz	r1, 80075e2 <__ascii_mbtowc+0x6>
 80075e0:	a901      	add	r1, sp, #4
 80075e2:	b142      	cbz	r2, 80075f6 <__ascii_mbtowc+0x1a>
 80075e4:	b14b      	cbz	r3, 80075fa <__ascii_mbtowc+0x1e>
 80075e6:	7813      	ldrb	r3, [r2, #0]
 80075e8:	600b      	str	r3, [r1, #0]
 80075ea:	7812      	ldrb	r2, [r2, #0]
 80075ec:	1e10      	subs	r0, r2, #0
 80075ee:	bf18      	it	ne
 80075f0:	2001      	movne	r0, #1
 80075f2:	b002      	add	sp, #8
 80075f4:	4770      	bx	lr
 80075f6:	4610      	mov	r0, r2
 80075f8:	e7fb      	b.n	80075f2 <__ascii_mbtowc+0x16>
 80075fa:	f06f 0001 	mvn.w	r0, #1
 80075fe:	e7f8      	b.n	80075f2 <__ascii_mbtowc+0x16>

08007600 <_realloc_r>:
 8007600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007604:	4680      	mov	r8, r0
 8007606:	4615      	mov	r5, r2
 8007608:	460c      	mov	r4, r1
 800760a:	b921      	cbnz	r1, 8007616 <_realloc_r+0x16>
 800760c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007610:	4611      	mov	r1, r2
 8007612:	f7ff b975 	b.w	8006900 <_malloc_r>
 8007616:	b92a      	cbnz	r2, 8007624 <_realloc_r+0x24>
 8007618:	f7ff f8fe 	bl	8006818 <_free_r>
 800761c:	2400      	movs	r4, #0
 800761e:	4620      	mov	r0, r4
 8007620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007624:	f000 f841 	bl	80076aa <_malloc_usable_size_r>
 8007628:	4285      	cmp	r5, r0
 800762a:	4606      	mov	r6, r0
 800762c:	d802      	bhi.n	8007634 <_realloc_r+0x34>
 800762e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007632:	d8f4      	bhi.n	800761e <_realloc_r+0x1e>
 8007634:	4629      	mov	r1, r5
 8007636:	4640      	mov	r0, r8
 8007638:	f7ff f962 	bl	8006900 <_malloc_r>
 800763c:	4607      	mov	r7, r0
 800763e:	2800      	cmp	r0, #0
 8007640:	d0ec      	beq.n	800761c <_realloc_r+0x1c>
 8007642:	42b5      	cmp	r5, r6
 8007644:	462a      	mov	r2, r5
 8007646:	4621      	mov	r1, r4
 8007648:	bf28      	it	cs
 800764a:	4632      	movcs	r2, r6
 800764c:	f7fe fa87 	bl	8005b5e <memcpy>
 8007650:	4621      	mov	r1, r4
 8007652:	4640      	mov	r0, r8
 8007654:	f7ff f8e0 	bl	8006818 <_free_r>
 8007658:	463c      	mov	r4, r7
 800765a:	e7e0      	b.n	800761e <_realloc_r+0x1e>

0800765c <__ascii_wctomb>:
 800765c:	4603      	mov	r3, r0
 800765e:	4608      	mov	r0, r1
 8007660:	b141      	cbz	r1, 8007674 <__ascii_wctomb+0x18>
 8007662:	2aff      	cmp	r2, #255	@ 0xff
 8007664:	d904      	bls.n	8007670 <__ascii_wctomb+0x14>
 8007666:	228a      	movs	r2, #138	@ 0x8a
 8007668:	601a      	str	r2, [r3, #0]
 800766a:	f04f 30ff 	mov.w	r0, #4294967295
 800766e:	4770      	bx	lr
 8007670:	700a      	strb	r2, [r1, #0]
 8007672:	2001      	movs	r0, #1
 8007674:	4770      	bx	lr
	...

08007678 <fiprintf>:
 8007678:	b40e      	push	{r1, r2, r3}
 800767a:	b503      	push	{r0, r1, lr}
 800767c:	4601      	mov	r1, r0
 800767e:	ab03      	add	r3, sp, #12
 8007680:	4805      	ldr	r0, [pc, #20]	@ (8007698 <fiprintf+0x20>)
 8007682:	f853 2b04 	ldr.w	r2, [r3], #4
 8007686:	6800      	ldr	r0, [r0, #0]
 8007688:	9301      	str	r3, [sp, #4]
 800768a:	f000 f83f 	bl	800770c <_vfiprintf_r>
 800768e:	b002      	add	sp, #8
 8007690:	f85d eb04 	ldr.w	lr, [sp], #4
 8007694:	b003      	add	sp, #12
 8007696:	4770      	bx	lr
 8007698:	20000140 	.word	0x20000140

0800769c <abort>:
 800769c:	b508      	push	{r3, lr}
 800769e:	2006      	movs	r0, #6
 80076a0:	f000 fa08 	bl	8007ab4 <raise>
 80076a4:	2001      	movs	r0, #1
 80076a6:	f7fa fa85 	bl	8001bb4 <_exit>

080076aa <_malloc_usable_size_r>:
 80076aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076ae:	1f18      	subs	r0, r3, #4
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	bfbc      	itt	lt
 80076b4:	580b      	ldrlt	r3, [r1, r0]
 80076b6:	18c0      	addlt	r0, r0, r3
 80076b8:	4770      	bx	lr

080076ba <__sfputc_r>:
 80076ba:	6893      	ldr	r3, [r2, #8]
 80076bc:	3b01      	subs	r3, #1
 80076be:	2b00      	cmp	r3, #0
 80076c0:	b410      	push	{r4}
 80076c2:	6093      	str	r3, [r2, #8]
 80076c4:	da08      	bge.n	80076d8 <__sfputc_r+0x1e>
 80076c6:	6994      	ldr	r4, [r2, #24]
 80076c8:	42a3      	cmp	r3, r4
 80076ca:	db01      	blt.n	80076d0 <__sfputc_r+0x16>
 80076cc:	290a      	cmp	r1, #10
 80076ce:	d103      	bne.n	80076d8 <__sfputc_r+0x1e>
 80076d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076d4:	f000 b932 	b.w	800793c <__swbuf_r>
 80076d8:	6813      	ldr	r3, [r2, #0]
 80076da:	1c58      	adds	r0, r3, #1
 80076dc:	6010      	str	r0, [r2, #0]
 80076de:	7019      	strb	r1, [r3, #0]
 80076e0:	4608      	mov	r0, r1
 80076e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <__sfputs_r>:
 80076e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ea:	4606      	mov	r6, r0
 80076ec:	460f      	mov	r7, r1
 80076ee:	4614      	mov	r4, r2
 80076f0:	18d5      	adds	r5, r2, r3
 80076f2:	42ac      	cmp	r4, r5
 80076f4:	d101      	bne.n	80076fa <__sfputs_r+0x12>
 80076f6:	2000      	movs	r0, #0
 80076f8:	e007      	b.n	800770a <__sfputs_r+0x22>
 80076fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076fe:	463a      	mov	r2, r7
 8007700:	4630      	mov	r0, r6
 8007702:	f7ff ffda 	bl	80076ba <__sfputc_r>
 8007706:	1c43      	adds	r3, r0, #1
 8007708:	d1f3      	bne.n	80076f2 <__sfputs_r+0xa>
 800770a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800770c <_vfiprintf_r>:
 800770c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007710:	460d      	mov	r5, r1
 8007712:	b09d      	sub	sp, #116	@ 0x74
 8007714:	4614      	mov	r4, r2
 8007716:	4698      	mov	r8, r3
 8007718:	4606      	mov	r6, r0
 800771a:	b118      	cbz	r0, 8007724 <_vfiprintf_r+0x18>
 800771c:	6a03      	ldr	r3, [r0, #32]
 800771e:	b90b      	cbnz	r3, 8007724 <_vfiprintf_r+0x18>
 8007720:	f7fe f8f4 	bl	800590c <__sinit>
 8007724:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007726:	07d9      	lsls	r1, r3, #31
 8007728:	d405      	bmi.n	8007736 <_vfiprintf_r+0x2a>
 800772a:	89ab      	ldrh	r3, [r5, #12]
 800772c:	059a      	lsls	r2, r3, #22
 800772e:	d402      	bmi.n	8007736 <_vfiprintf_r+0x2a>
 8007730:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007732:	f7fe fa12 	bl	8005b5a <__retarget_lock_acquire_recursive>
 8007736:	89ab      	ldrh	r3, [r5, #12]
 8007738:	071b      	lsls	r3, r3, #28
 800773a:	d501      	bpl.n	8007740 <_vfiprintf_r+0x34>
 800773c:	692b      	ldr	r3, [r5, #16]
 800773e:	b99b      	cbnz	r3, 8007768 <_vfiprintf_r+0x5c>
 8007740:	4629      	mov	r1, r5
 8007742:	4630      	mov	r0, r6
 8007744:	f000 f938 	bl	80079b8 <__swsetup_r>
 8007748:	b170      	cbz	r0, 8007768 <_vfiprintf_r+0x5c>
 800774a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800774c:	07dc      	lsls	r4, r3, #31
 800774e:	d504      	bpl.n	800775a <_vfiprintf_r+0x4e>
 8007750:	f04f 30ff 	mov.w	r0, #4294967295
 8007754:	b01d      	add	sp, #116	@ 0x74
 8007756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800775a:	89ab      	ldrh	r3, [r5, #12]
 800775c:	0598      	lsls	r0, r3, #22
 800775e:	d4f7      	bmi.n	8007750 <_vfiprintf_r+0x44>
 8007760:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007762:	f7fe f9fb 	bl	8005b5c <__retarget_lock_release_recursive>
 8007766:	e7f3      	b.n	8007750 <_vfiprintf_r+0x44>
 8007768:	2300      	movs	r3, #0
 800776a:	9309      	str	r3, [sp, #36]	@ 0x24
 800776c:	2320      	movs	r3, #32
 800776e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007772:	f8cd 800c 	str.w	r8, [sp, #12]
 8007776:	2330      	movs	r3, #48	@ 0x30
 8007778:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007928 <_vfiprintf_r+0x21c>
 800777c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007780:	f04f 0901 	mov.w	r9, #1
 8007784:	4623      	mov	r3, r4
 8007786:	469a      	mov	sl, r3
 8007788:	f813 2b01 	ldrb.w	r2, [r3], #1
 800778c:	b10a      	cbz	r2, 8007792 <_vfiprintf_r+0x86>
 800778e:	2a25      	cmp	r2, #37	@ 0x25
 8007790:	d1f9      	bne.n	8007786 <_vfiprintf_r+0x7a>
 8007792:	ebba 0b04 	subs.w	fp, sl, r4
 8007796:	d00b      	beq.n	80077b0 <_vfiprintf_r+0xa4>
 8007798:	465b      	mov	r3, fp
 800779a:	4622      	mov	r2, r4
 800779c:	4629      	mov	r1, r5
 800779e:	4630      	mov	r0, r6
 80077a0:	f7ff ffa2 	bl	80076e8 <__sfputs_r>
 80077a4:	3001      	adds	r0, #1
 80077a6:	f000 80a7 	beq.w	80078f8 <_vfiprintf_r+0x1ec>
 80077aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80077ac:	445a      	add	r2, fp
 80077ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80077b0:	f89a 3000 	ldrb.w	r3, [sl]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	f000 809f 	beq.w	80078f8 <_vfiprintf_r+0x1ec>
 80077ba:	2300      	movs	r3, #0
 80077bc:	f04f 32ff 	mov.w	r2, #4294967295
 80077c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077c4:	f10a 0a01 	add.w	sl, sl, #1
 80077c8:	9304      	str	r3, [sp, #16]
 80077ca:	9307      	str	r3, [sp, #28]
 80077cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80077d0:	931a      	str	r3, [sp, #104]	@ 0x68
 80077d2:	4654      	mov	r4, sl
 80077d4:	2205      	movs	r2, #5
 80077d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077da:	4853      	ldr	r0, [pc, #332]	@ (8007928 <_vfiprintf_r+0x21c>)
 80077dc:	f7f8 fd00 	bl	80001e0 <memchr>
 80077e0:	9a04      	ldr	r2, [sp, #16]
 80077e2:	b9d8      	cbnz	r0, 800781c <_vfiprintf_r+0x110>
 80077e4:	06d1      	lsls	r1, r2, #27
 80077e6:	bf44      	itt	mi
 80077e8:	2320      	movmi	r3, #32
 80077ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077ee:	0713      	lsls	r3, r2, #28
 80077f0:	bf44      	itt	mi
 80077f2:	232b      	movmi	r3, #43	@ 0x2b
 80077f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077f8:	f89a 3000 	ldrb.w	r3, [sl]
 80077fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80077fe:	d015      	beq.n	800782c <_vfiprintf_r+0x120>
 8007800:	9a07      	ldr	r2, [sp, #28]
 8007802:	4654      	mov	r4, sl
 8007804:	2000      	movs	r0, #0
 8007806:	f04f 0c0a 	mov.w	ip, #10
 800780a:	4621      	mov	r1, r4
 800780c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007810:	3b30      	subs	r3, #48	@ 0x30
 8007812:	2b09      	cmp	r3, #9
 8007814:	d94b      	bls.n	80078ae <_vfiprintf_r+0x1a2>
 8007816:	b1b0      	cbz	r0, 8007846 <_vfiprintf_r+0x13a>
 8007818:	9207      	str	r2, [sp, #28]
 800781a:	e014      	b.n	8007846 <_vfiprintf_r+0x13a>
 800781c:	eba0 0308 	sub.w	r3, r0, r8
 8007820:	fa09 f303 	lsl.w	r3, r9, r3
 8007824:	4313      	orrs	r3, r2
 8007826:	9304      	str	r3, [sp, #16]
 8007828:	46a2      	mov	sl, r4
 800782a:	e7d2      	b.n	80077d2 <_vfiprintf_r+0xc6>
 800782c:	9b03      	ldr	r3, [sp, #12]
 800782e:	1d19      	adds	r1, r3, #4
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	9103      	str	r1, [sp, #12]
 8007834:	2b00      	cmp	r3, #0
 8007836:	bfbb      	ittet	lt
 8007838:	425b      	neglt	r3, r3
 800783a:	f042 0202 	orrlt.w	r2, r2, #2
 800783e:	9307      	strge	r3, [sp, #28]
 8007840:	9307      	strlt	r3, [sp, #28]
 8007842:	bfb8      	it	lt
 8007844:	9204      	strlt	r2, [sp, #16]
 8007846:	7823      	ldrb	r3, [r4, #0]
 8007848:	2b2e      	cmp	r3, #46	@ 0x2e
 800784a:	d10a      	bne.n	8007862 <_vfiprintf_r+0x156>
 800784c:	7863      	ldrb	r3, [r4, #1]
 800784e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007850:	d132      	bne.n	80078b8 <_vfiprintf_r+0x1ac>
 8007852:	9b03      	ldr	r3, [sp, #12]
 8007854:	1d1a      	adds	r2, r3, #4
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	9203      	str	r2, [sp, #12]
 800785a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800785e:	3402      	adds	r4, #2
 8007860:	9305      	str	r3, [sp, #20]
 8007862:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007938 <_vfiprintf_r+0x22c>
 8007866:	7821      	ldrb	r1, [r4, #0]
 8007868:	2203      	movs	r2, #3
 800786a:	4650      	mov	r0, sl
 800786c:	f7f8 fcb8 	bl	80001e0 <memchr>
 8007870:	b138      	cbz	r0, 8007882 <_vfiprintf_r+0x176>
 8007872:	9b04      	ldr	r3, [sp, #16]
 8007874:	eba0 000a 	sub.w	r0, r0, sl
 8007878:	2240      	movs	r2, #64	@ 0x40
 800787a:	4082      	lsls	r2, r0
 800787c:	4313      	orrs	r3, r2
 800787e:	3401      	adds	r4, #1
 8007880:	9304      	str	r3, [sp, #16]
 8007882:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007886:	4829      	ldr	r0, [pc, #164]	@ (800792c <_vfiprintf_r+0x220>)
 8007888:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800788c:	2206      	movs	r2, #6
 800788e:	f7f8 fca7 	bl	80001e0 <memchr>
 8007892:	2800      	cmp	r0, #0
 8007894:	d03f      	beq.n	8007916 <_vfiprintf_r+0x20a>
 8007896:	4b26      	ldr	r3, [pc, #152]	@ (8007930 <_vfiprintf_r+0x224>)
 8007898:	bb1b      	cbnz	r3, 80078e2 <_vfiprintf_r+0x1d6>
 800789a:	9b03      	ldr	r3, [sp, #12]
 800789c:	3307      	adds	r3, #7
 800789e:	f023 0307 	bic.w	r3, r3, #7
 80078a2:	3308      	adds	r3, #8
 80078a4:	9303      	str	r3, [sp, #12]
 80078a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078a8:	443b      	add	r3, r7
 80078aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80078ac:	e76a      	b.n	8007784 <_vfiprintf_r+0x78>
 80078ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80078b2:	460c      	mov	r4, r1
 80078b4:	2001      	movs	r0, #1
 80078b6:	e7a8      	b.n	800780a <_vfiprintf_r+0xfe>
 80078b8:	2300      	movs	r3, #0
 80078ba:	3401      	adds	r4, #1
 80078bc:	9305      	str	r3, [sp, #20]
 80078be:	4619      	mov	r1, r3
 80078c0:	f04f 0c0a 	mov.w	ip, #10
 80078c4:	4620      	mov	r0, r4
 80078c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078ca:	3a30      	subs	r2, #48	@ 0x30
 80078cc:	2a09      	cmp	r2, #9
 80078ce:	d903      	bls.n	80078d8 <_vfiprintf_r+0x1cc>
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d0c6      	beq.n	8007862 <_vfiprintf_r+0x156>
 80078d4:	9105      	str	r1, [sp, #20]
 80078d6:	e7c4      	b.n	8007862 <_vfiprintf_r+0x156>
 80078d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80078dc:	4604      	mov	r4, r0
 80078de:	2301      	movs	r3, #1
 80078e0:	e7f0      	b.n	80078c4 <_vfiprintf_r+0x1b8>
 80078e2:	ab03      	add	r3, sp, #12
 80078e4:	9300      	str	r3, [sp, #0]
 80078e6:	462a      	mov	r2, r5
 80078e8:	4b12      	ldr	r3, [pc, #72]	@ (8007934 <_vfiprintf_r+0x228>)
 80078ea:	a904      	add	r1, sp, #16
 80078ec:	4630      	mov	r0, r6
 80078ee:	f7fd fbc9 	bl	8005084 <_printf_float>
 80078f2:	4607      	mov	r7, r0
 80078f4:	1c78      	adds	r0, r7, #1
 80078f6:	d1d6      	bne.n	80078a6 <_vfiprintf_r+0x19a>
 80078f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80078fa:	07d9      	lsls	r1, r3, #31
 80078fc:	d405      	bmi.n	800790a <_vfiprintf_r+0x1fe>
 80078fe:	89ab      	ldrh	r3, [r5, #12]
 8007900:	059a      	lsls	r2, r3, #22
 8007902:	d402      	bmi.n	800790a <_vfiprintf_r+0x1fe>
 8007904:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007906:	f7fe f929 	bl	8005b5c <__retarget_lock_release_recursive>
 800790a:	89ab      	ldrh	r3, [r5, #12]
 800790c:	065b      	lsls	r3, r3, #25
 800790e:	f53f af1f 	bmi.w	8007750 <_vfiprintf_r+0x44>
 8007912:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007914:	e71e      	b.n	8007754 <_vfiprintf_r+0x48>
 8007916:	ab03      	add	r3, sp, #12
 8007918:	9300      	str	r3, [sp, #0]
 800791a:	462a      	mov	r2, r5
 800791c:	4b05      	ldr	r3, [pc, #20]	@ (8007934 <_vfiprintf_r+0x228>)
 800791e:	a904      	add	r1, sp, #16
 8007920:	4630      	mov	r0, r6
 8007922:	f7fd fe47 	bl	80055b4 <_printf_i>
 8007926:	e7e4      	b.n	80078f2 <_vfiprintf_r+0x1e6>
 8007928:	08007eb8 	.word	0x08007eb8
 800792c:	08007ec2 	.word	0x08007ec2
 8007930:	08005085 	.word	0x08005085
 8007934:	080076e9 	.word	0x080076e9
 8007938:	08007ebe 	.word	0x08007ebe

0800793c <__swbuf_r>:
 800793c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800793e:	460e      	mov	r6, r1
 8007940:	4614      	mov	r4, r2
 8007942:	4605      	mov	r5, r0
 8007944:	b118      	cbz	r0, 800794e <__swbuf_r+0x12>
 8007946:	6a03      	ldr	r3, [r0, #32]
 8007948:	b90b      	cbnz	r3, 800794e <__swbuf_r+0x12>
 800794a:	f7fd ffdf 	bl	800590c <__sinit>
 800794e:	69a3      	ldr	r3, [r4, #24]
 8007950:	60a3      	str	r3, [r4, #8]
 8007952:	89a3      	ldrh	r3, [r4, #12]
 8007954:	071a      	lsls	r2, r3, #28
 8007956:	d501      	bpl.n	800795c <__swbuf_r+0x20>
 8007958:	6923      	ldr	r3, [r4, #16]
 800795a:	b943      	cbnz	r3, 800796e <__swbuf_r+0x32>
 800795c:	4621      	mov	r1, r4
 800795e:	4628      	mov	r0, r5
 8007960:	f000 f82a 	bl	80079b8 <__swsetup_r>
 8007964:	b118      	cbz	r0, 800796e <__swbuf_r+0x32>
 8007966:	f04f 37ff 	mov.w	r7, #4294967295
 800796a:	4638      	mov	r0, r7
 800796c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800796e:	6823      	ldr	r3, [r4, #0]
 8007970:	6922      	ldr	r2, [r4, #16]
 8007972:	1a98      	subs	r0, r3, r2
 8007974:	6963      	ldr	r3, [r4, #20]
 8007976:	b2f6      	uxtb	r6, r6
 8007978:	4283      	cmp	r3, r0
 800797a:	4637      	mov	r7, r6
 800797c:	dc05      	bgt.n	800798a <__swbuf_r+0x4e>
 800797e:	4621      	mov	r1, r4
 8007980:	4628      	mov	r0, r5
 8007982:	f7ff fda7 	bl	80074d4 <_fflush_r>
 8007986:	2800      	cmp	r0, #0
 8007988:	d1ed      	bne.n	8007966 <__swbuf_r+0x2a>
 800798a:	68a3      	ldr	r3, [r4, #8]
 800798c:	3b01      	subs	r3, #1
 800798e:	60a3      	str	r3, [r4, #8]
 8007990:	6823      	ldr	r3, [r4, #0]
 8007992:	1c5a      	adds	r2, r3, #1
 8007994:	6022      	str	r2, [r4, #0]
 8007996:	701e      	strb	r6, [r3, #0]
 8007998:	6962      	ldr	r2, [r4, #20]
 800799a:	1c43      	adds	r3, r0, #1
 800799c:	429a      	cmp	r2, r3
 800799e:	d004      	beq.n	80079aa <__swbuf_r+0x6e>
 80079a0:	89a3      	ldrh	r3, [r4, #12]
 80079a2:	07db      	lsls	r3, r3, #31
 80079a4:	d5e1      	bpl.n	800796a <__swbuf_r+0x2e>
 80079a6:	2e0a      	cmp	r6, #10
 80079a8:	d1df      	bne.n	800796a <__swbuf_r+0x2e>
 80079aa:	4621      	mov	r1, r4
 80079ac:	4628      	mov	r0, r5
 80079ae:	f7ff fd91 	bl	80074d4 <_fflush_r>
 80079b2:	2800      	cmp	r0, #0
 80079b4:	d0d9      	beq.n	800796a <__swbuf_r+0x2e>
 80079b6:	e7d6      	b.n	8007966 <__swbuf_r+0x2a>

080079b8 <__swsetup_r>:
 80079b8:	b538      	push	{r3, r4, r5, lr}
 80079ba:	4b29      	ldr	r3, [pc, #164]	@ (8007a60 <__swsetup_r+0xa8>)
 80079bc:	4605      	mov	r5, r0
 80079be:	6818      	ldr	r0, [r3, #0]
 80079c0:	460c      	mov	r4, r1
 80079c2:	b118      	cbz	r0, 80079cc <__swsetup_r+0x14>
 80079c4:	6a03      	ldr	r3, [r0, #32]
 80079c6:	b90b      	cbnz	r3, 80079cc <__swsetup_r+0x14>
 80079c8:	f7fd ffa0 	bl	800590c <__sinit>
 80079cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079d0:	0719      	lsls	r1, r3, #28
 80079d2:	d422      	bmi.n	8007a1a <__swsetup_r+0x62>
 80079d4:	06da      	lsls	r2, r3, #27
 80079d6:	d407      	bmi.n	80079e8 <__swsetup_r+0x30>
 80079d8:	2209      	movs	r2, #9
 80079da:	602a      	str	r2, [r5, #0]
 80079dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079e0:	81a3      	strh	r3, [r4, #12]
 80079e2:	f04f 30ff 	mov.w	r0, #4294967295
 80079e6:	e033      	b.n	8007a50 <__swsetup_r+0x98>
 80079e8:	0758      	lsls	r0, r3, #29
 80079ea:	d512      	bpl.n	8007a12 <__swsetup_r+0x5a>
 80079ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80079ee:	b141      	cbz	r1, 8007a02 <__swsetup_r+0x4a>
 80079f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80079f4:	4299      	cmp	r1, r3
 80079f6:	d002      	beq.n	80079fe <__swsetup_r+0x46>
 80079f8:	4628      	mov	r0, r5
 80079fa:	f7fe ff0d 	bl	8006818 <_free_r>
 80079fe:	2300      	movs	r3, #0
 8007a00:	6363      	str	r3, [r4, #52]	@ 0x34
 8007a02:	89a3      	ldrh	r3, [r4, #12]
 8007a04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007a08:	81a3      	strh	r3, [r4, #12]
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	6063      	str	r3, [r4, #4]
 8007a0e:	6923      	ldr	r3, [r4, #16]
 8007a10:	6023      	str	r3, [r4, #0]
 8007a12:	89a3      	ldrh	r3, [r4, #12]
 8007a14:	f043 0308 	orr.w	r3, r3, #8
 8007a18:	81a3      	strh	r3, [r4, #12]
 8007a1a:	6923      	ldr	r3, [r4, #16]
 8007a1c:	b94b      	cbnz	r3, 8007a32 <__swsetup_r+0x7a>
 8007a1e:	89a3      	ldrh	r3, [r4, #12]
 8007a20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007a24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a28:	d003      	beq.n	8007a32 <__swsetup_r+0x7a>
 8007a2a:	4621      	mov	r1, r4
 8007a2c:	4628      	mov	r0, r5
 8007a2e:	f000 f883 	bl	8007b38 <__smakebuf_r>
 8007a32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a36:	f013 0201 	ands.w	r2, r3, #1
 8007a3a:	d00a      	beq.n	8007a52 <__swsetup_r+0x9a>
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	60a2      	str	r2, [r4, #8]
 8007a40:	6962      	ldr	r2, [r4, #20]
 8007a42:	4252      	negs	r2, r2
 8007a44:	61a2      	str	r2, [r4, #24]
 8007a46:	6922      	ldr	r2, [r4, #16]
 8007a48:	b942      	cbnz	r2, 8007a5c <__swsetup_r+0xa4>
 8007a4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007a4e:	d1c5      	bne.n	80079dc <__swsetup_r+0x24>
 8007a50:	bd38      	pop	{r3, r4, r5, pc}
 8007a52:	0799      	lsls	r1, r3, #30
 8007a54:	bf58      	it	pl
 8007a56:	6962      	ldrpl	r2, [r4, #20]
 8007a58:	60a2      	str	r2, [r4, #8]
 8007a5a:	e7f4      	b.n	8007a46 <__swsetup_r+0x8e>
 8007a5c:	2000      	movs	r0, #0
 8007a5e:	e7f7      	b.n	8007a50 <__swsetup_r+0x98>
 8007a60:	20000140 	.word	0x20000140

08007a64 <_raise_r>:
 8007a64:	291f      	cmp	r1, #31
 8007a66:	b538      	push	{r3, r4, r5, lr}
 8007a68:	4605      	mov	r5, r0
 8007a6a:	460c      	mov	r4, r1
 8007a6c:	d904      	bls.n	8007a78 <_raise_r+0x14>
 8007a6e:	2316      	movs	r3, #22
 8007a70:	6003      	str	r3, [r0, #0]
 8007a72:	f04f 30ff 	mov.w	r0, #4294967295
 8007a76:	bd38      	pop	{r3, r4, r5, pc}
 8007a78:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007a7a:	b112      	cbz	r2, 8007a82 <_raise_r+0x1e>
 8007a7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007a80:	b94b      	cbnz	r3, 8007a96 <_raise_r+0x32>
 8007a82:	4628      	mov	r0, r5
 8007a84:	f000 f830 	bl	8007ae8 <_getpid_r>
 8007a88:	4622      	mov	r2, r4
 8007a8a:	4601      	mov	r1, r0
 8007a8c:	4628      	mov	r0, r5
 8007a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a92:	f000 b817 	b.w	8007ac4 <_kill_r>
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d00a      	beq.n	8007ab0 <_raise_r+0x4c>
 8007a9a:	1c59      	adds	r1, r3, #1
 8007a9c:	d103      	bne.n	8007aa6 <_raise_r+0x42>
 8007a9e:	2316      	movs	r3, #22
 8007aa0:	6003      	str	r3, [r0, #0]
 8007aa2:	2001      	movs	r0, #1
 8007aa4:	e7e7      	b.n	8007a76 <_raise_r+0x12>
 8007aa6:	2100      	movs	r1, #0
 8007aa8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007aac:	4620      	mov	r0, r4
 8007aae:	4798      	blx	r3
 8007ab0:	2000      	movs	r0, #0
 8007ab2:	e7e0      	b.n	8007a76 <_raise_r+0x12>

08007ab4 <raise>:
 8007ab4:	4b02      	ldr	r3, [pc, #8]	@ (8007ac0 <raise+0xc>)
 8007ab6:	4601      	mov	r1, r0
 8007ab8:	6818      	ldr	r0, [r3, #0]
 8007aba:	f7ff bfd3 	b.w	8007a64 <_raise_r>
 8007abe:	bf00      	nop
 8007ac0:	20000140 	.word	0x20000140

08007ac4 <_kill_r>:
 8007ac4:	b538      	push	{r3, r4, r5, lr}
 8007ac6:	4d07      	ldr	r5, [pc, #28]	@ (8007ae4 <_kill_r+0x20>)
 8007ac8:	2300      	movs	r3, #0
 8007aca:	4604      	mov	r4, r0
 8007acc:	4608      	mov	r0, r1
 8007ace:	4611      	mov	r1, r2
 8007ad0:	602b      	str	r3, [r5, #0]
 8007ad2:	f7fa f85f 	bl	8001b94 <_kill>
 8007ad6:	1c43      	adds	r3, r0, #1
 8007ad8:	d102      	bne.n	8007ae0 <_kill_r+0x1c>
 8007ada:	682b      	ldr	r3, [r5, #0]
 8007adc:	b103      	cbz	r3, 8007ae0 <_kill_r+0x1c>
 8007ade:	6023      	str	r3, [r4, #0]
 8007ae0:	bd38      	pop	{r3, r4, r5, pc}
 8007ae2:	bf00      	nop
 8007ae4:	20000594 	.word	0x20000594

08007ae8 <_getpid_r>:
 8007ae8:	f7fa b84c 	b.w	8001b84 <_getpid>

08007aec <__swhatbuf_r>:
 8007aec:	b570      	push	{r4, r5, r6, lr}
 8007aee:	460c      	mov	r4, r1
 8007af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007af4:	2900      	cmp	r1, #0
 8007af6:	b096      	sub	sp, #88	@ 0x58
 8007af8:	4615      	mov	r5, r2
 8007afa:	461e      	mov	r6, r3
 8007afc:	da0d      	bge.n	8007b1a <__swhatbuf_r+0x2e>
 8007afe:	89a3      	ldrh	r3, [r4, #12]
 8007b00:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007b04:	f04f 0100 	mov.w	r1, #0
 8007b08:	bf14      	ite	ne
 8007b0a:	2340      	movne	r3, #64	@ 0x40
 8007b0c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007b10:	2000      	movs	r0, #0
 8007b12:	6031      	str	r1, [r6, #0]
 8007b14:	602b      	str	r3, [r5, #0]
 8007b16:	b016      	add	sp, #88	@ 0x58
 8007b18:	bd70      	pop	{r4, r5, r6, pc}
 8007b1a:	466a      	mov	r2, sp
 8007b1c:	f000 f848 	bl	8007bb0 <_fstat_r>
 8007b20:	2800      	cmp	r0, #0
 8007b22:	dbec      	blt.n	8007afe <__swhatbuf_r+0x12>
 8007b24:	9901      	ldr	r1, [sp, #4]
 8007b26:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007b2a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007b2e:	4259      	negs	r1, r3
 8007b30:	4159      	adcs	r1, r3
 8007b32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007b36:	e7eb      	b.n	8007b10 <__swhatbuf_r+0x24>

08007b38 <__smakebuf_r>:
 8007b38:	898b      	ldrh	r3, [r1, #12]
 8007b3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b3c:	079d      	lsls	r5, r3, #30
 8007b3e:	4606      	mov	r6, r0
 8007b40:	460c      	mov	r4, r1
 8007b42:	d507      	bpl.n	8007b54 <__smakebuf_r+0x1c>
 8007b44:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007b48:	6023      	str	r3, [r4, #0]
 8007b4a:	6123      	str	r3, [r4, #16]
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	6163      	str	r3, [r4, #20]
 8007b50:	b003      	add	sp, #12
 8007b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b54:	ab01      	add	r3, sp, #4
 8007b56:	466a      	mov	r2, sp
 8007b58:	f7ff ffc8 	bl	8007aec <__swhatbuf_r>
 8007b5c:	9f00      	ldr	r7, [sp, #0]
 8007b5e:	4605      	mov	r5, r0
 8007b60:	4639      	mov	r1, r7
 8007b62:	4630      	mov	r0, r6
 8007b64:	f7fe fecc 	bl	8006900 <_malloc_r>
 8007b68:	b948      	cbnz	r0, 8007b7e <__smakebuf_r+0x46>
 8007b6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b6e:	059a      	lsls	r2, r3, #22
 8007b70:	d4ee      	bmi.n	8007b50 <__smakebuf_r+0x18>
 8007b72:	f023 0303 	bic.w	r3, r3, #3
 8007b76:	f043 0302 	orr.w	r3, r3, #2
 8007b7a:	81a3      	strh	r3, [r4, #12]
 8007b7c:	e7e2      	b.n	8007b44 <__smakebuf_r+0xc>
 8007b7e:	89a3      	ldrh	r3, [r4, #12]
 8007b80:	6020      	str	r0, [r4, #0]
 8007b82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b86:	81a3      	strh	r3, [r4, #12]
 8007b88:	9b01      	ldr	r3, [sp, #4]
 8007b8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007b8e:	b15b      	cbz	r3, 8007ba8 <__smakebuf_r+0x70>
 8007b90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b94:	4630      	mov	r0, r6
 8007b96:	f000 f81d 	bl	8007bd4 <_isatty_r>
 8007b9a:	b128      	cbz	r0, 8007ba8 <__smakebuf_r+0x70>
 8007b9c:	89a3      	ldrh	r3, [r4, #12]
 8007b9e:	f023 0303 	bic.w	r3, r3, #3
 8007ba2:	f043 0301 	orr.w	r3, r3, #1
 8007ba6:	81a3      	strh	r3, [r4, #12]
 8007ba8:	89a3      	ldrh	r3, [r4, #12]
 8007baa:	431d      	orrs	r5, r3
 8007bac:	81a5      	strh	r5, [r4, #12]
 8007bae:	e7cf      	b.n	8007b50 <__smakebuf_r+0x18>

08007bb0 <_fstat_r>:
 8007bb0:	b538      	push	{r3, r4, r5, lr}
 8007bb2:	4d07      	ldr	r5, [pc, #28]	@ (8007bd0 <_fstat_r+0x20>)
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	4604      	mov	r4, r0
 8007bb8:	4608      	mov	r0, r1
 8007bba:	4611      	mov	r1, r2
 8007bbc:	602b      	str	r3, [r5, #0]
 8007bbe:	f7fa f849 	bl	8001c54 <_fstat>
 8007bc2:	1c43      	adds	r3, r0, #1
 8007bc4:	d102      	bne.n	8007bcc <_fstat_r+0x1c>
 8007bc6:	682b      	ldr	r3, [r5, #0]
 8007bc8:	b103      	cbz	r3, 8007bcc <_fstat_r+0x1c>
 8007bca:	6023      	str	r3, [r4, #0]
 8007bcc:	bd38      	pop	{r3, r4, r5, pc}
 8007bce:	bf00      	nop
 8007bd0:	20000594 	.word	0x20000594

08007bd4 <_isatty_r>:
 8007bd4:	b538      	push	{r3, r4, r5, lr}
 8007bd6:	4d06      	ldr	r5, [pc, #24]	@ (8007bf0 <_isatty_r+0x1c>)
 8007bd8:	2300      	movs	r3, #0
 8007bda:	4604      	mov	r4, r0
 8007bdc:	4608      	mov	r0, r1
 8007bde:	602b      	str	r3, [r5, #0]
 8007be0:	f7fa f848 	bl	8001c74 <_isatty>
 8007be4:	1c43      	adds	r3, r0, #1
 8007be6:	d102      	bne.n	8007bee <_isatty_r+0x1a>
 8007be8:	682b      	ldr	r3, [r5, #0]
 8007bea:	b103      	cbz	r3, 8007bee <_isatty_r+0x1a>
 8007bec:	6023      	str	r3, [r4, #0]
 8007bee:	bd38      	pop	{r3, r4, r5, pc}
 8007bf0:	20000594 	.word	0x20000594

08007bf4 <_init>:
 8007bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bf6:	bf00      	nop
 8007bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bfa:	bc08      	pop	{r3}
 8007bfc:	469e      	mov	lr, r3
 8007bfe:	4770      	bx	lr

08007c00 <_fini>:
 8007c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c02:	bf00      	nop
 8007c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c06:	bc08      	pop	{r3}
 8007c08:	469e      	mov	lr, r3
 8007c0a:	4770      	bx	lr
